<%= javascript_include_tag 'automatic_templates_manager' %>
<script>
    // Do not open calendars for the following classifications
    window.do_not_open_calendar_classifications = ['give_info', 'update_event'];
    window.beforeUpdateData = <%== @message_classification.before_update_data.to_json %>
    var useTemplateGenerationService = false;
    var currentAppointmentIsVirtual = false;

    $(function() {
      useTemplateGenerationService = window.featuresHelper.isFeatureActive("template_generation_v2_for_update_event") && window.classification == 'update_event';
      currentAppointmentIsVirtual = window.getCurrentAppointment().appointment_kind_hash.is_virtual;

        window.templateManager = new TemplateManager({
            categories: ['free_reply'],
            skipDefaultItem: true,
            onItemSelected: function(clickedNode, template) {
                window.setReplyMessage(template, "only_client");
            }
        });

        var callback = function() {
            window.templateManager.refreshCurrentSelectedTemplate(function() {
                window.setReplyMessageActions();
            });
        };
        initializeEmailLanguageSelector(callback);
    });

    window.drawCalendarCallback = function(){
      window.activateCalendarWithParams({
        mode: "select_events",
        date_times: [],
        email: window.threadAccount.email,
        duration: window.threadComputedData.duration,
        compute_meeting_rooms_via_backend: true
      });


      if(window.do_not_open_calendar_classifications.indexOf(window.classification) != -1)
        $(".calendar-container").addClass("minimized");
    };

    function getRestaurantBookingUpdateStatus(eventOrganizationUpdated, attendeesChanged) {
      var usingRestaurantBooking = window.threadComputedData.using_restaurant_booking;
      var currentLocation = $('#location').val();

      var locationIsSet = !!currentLocation && currentLocation.length > 0;

      return locationIsSet && usingRestaurantBooking && (eventOrganizationUpdated || attendeesChanged);
    };

    window.getEventModifications = function() {
      // When the event has not been updated (no click on the 'edit' button in the event tile, then the beforeUpdateData will be null
      // We can skip this part as we know that no changes have been made
      if(!window.beforeUpdateData) {
        return {};
      }

      var beforeUpdateEvent = window.beforeUpdateData.event;
      var updatedEventData = window.currentEventTile.event;
      var beforeUpdateAttendees = window.beforeUpdateData.attendees;
      var updatedAttendees = window.threadComputedData.attendees;
      var beforeUpdateMeetingRoomsDetails = window.beforeUpdateData.meeting_rooms;
      var updatedMeetingRoomsDetails = window.threadComputedData.booked_rooms_details;

      var currentAddress = window.getCurrentAddress();

      beforeUpdateEvent.appointment = window.beforeUpdateData.appointment;
      updatedEventData.appointment = window.threadComputedData.appointment_nature;

      beforeUpdateEvent.call_instructions_details = '';
      updatedEventData.call_instructions_details = '';

      if(beforeUpdateEvent.call_instructions && updatedEventData.call_instructions) {
        beforeUpdateEvent.call_instructions_details = beforeUpdateEvent.call_instructions.details;
        updatedEventData.call_instructions_details = updatedEventData.call_instructions.details;
      }

      var eventOrganizationAttributes = {
        timezoneId: 'string',
        start: 'date',
        end: 'date',
        appointment: 'string'
      };

      var eventAnnexeAttributes = ['call_instructions_details', 'title', 'private', 'description'];
      var attendeesUntouched = JSON.stringify(beforeUpdateAttendees) == JSON.stringify(updatedAttendees);
      var eventOrganizationUpdated = false;
      var eventAnnexeAttributesChanged = [];
      var addedAttendees = [];
      var resourcesChanged = [];

      // We only take the location into account to notify the event organization infos update when we are not in a virtual appointment
      if(!currentAppointmentIsVirtual) {
        eventOrganizationAttributes.location = 'string';
      }

      _.each(eventOrganizationAttributes, function(val, key) {
        if(val == 'date') {
          if(!moment(updatedEventData[key]).isSame(moment(beforeUpdateEvent[key]))) {
            eventOrganizationUpdated = true;
          }
        } else {
          if(updatedEventData[key] != beforeUpdateEvent[key]) {
            eventOrganizationUpdated = true;
          }
        }
      });

      var updatedEventAttendees = _.map(updatedEventData.attendees, function(attendee) { return attendee.email; });
      var beforeUpdateEventAttendees = _.map(beforeUpdateEvent.attendees, function(attendee) { return attendee.email; });

        // We use it to remove the meeting rooms froms the attendees, so they will not be considered as one when we will be computing the changes
        var availableRoomsIds = _.map($('#meeting-rooms-manager').scope().getEveryPossibleMeetingRooms(), function(room) {return room.id});
        updatedEventAttendees = _.reject(updatedEventAttendees, function(attEmail) { return availableRoomsIds.indexOf(attEmail) > -1 });
        beforeUpdateEventAttendees = _.reject(beforeUpdateEventAttendees, function(attEmail) { return availableRoomsIds.indexOf(attEmail) > -1 });


        var removedAttendees = _.difference(beforeUpdateEventAttendees, updatedEventAttendees);

      if(removedAttendees.length == 0) {
        addedAttendees = _.difference(updatedEventAttendees, beforeUpdateEventAttendees);
      }

      _.each(eventAnnexeAttributes, function(attr) {
        if(updatedEventData[attr] != beforeUpdateEvent[attr]) {
          // We update the description only when neither the attendees nor the call instructions where updated and when no organization infos have been updated
          if(attr == 'description') {
            if (attendeesUntouched && eventAnnexeAttributesChanged.indexOf('call_instructions_details') == -1 && !eventOrganizationUpdated) {
              eventAnnexeAttributesChanged.push(attr);
            }
          } else if(attr == 'call_instructions_details') {
            if(window.currentAppointmentIsVirtual) {
              eventAnnexeAttributesChanged.push(attr);
            }
          } else {
            eventAnnexeAttributesChanged.push(attr);
          }
        }
      });

      if(removedAttendees.length > 0) {
        eventAnnexeAttributesChanged.push('attendees');
      }

      var attendeesChanged = addedAttendees.length > 0 || removedAttendees.length > 0;

      if(beforeUpdateMeetingRoomsDetails) {
        var beforeUpdateMeetingRooms = _.map(_.values(beforeUpdateMeetingRoomsDetails), function(roomDetails) {
            return roomDetails.id;
        });
        var afterUpdateMeetingRooms = _.map(_.values(updatedMeetingRoomsDetails), function(roomDetails) {
           return roomDetails.id;
        });

        beforeUpdateMeetingRooms = beforeUpdateMeetingRooms.sort();
        afterUpdateMeetingRooms = afterUpdateMeetingRooms.sort();

          var currentLocation = undefined;

         if(currentAddress) {
             currentLocation = currentAddress.address;
         }

        if(!_.isEqual(beforeUpdateMeetingRooms, afterUpdateMeetingRooms)) {
            _.each(updatedMeetingRoomsDetails, function(roomDetails, address) {
                resourcesChanged.push({
                    summary: roomDetails.summary,
                    onSameLocationThanMeeting: address === currentLocation,
                    location: address
                });
            });
        }
      }

      return {
        event_organization_updated: eventOrganizationUpdated,
        removed_attendees: removedAttendees,
        added_attendees: addedAttendees,
        event_annexe_attributes_changed: eventAnnexeAttributesChanged,
        resources_changed: resourcesChanged,
        restaurant_booking_changed: getRestaurantBookingUpdateStatus(eventOrganizationUpdated, attendeesChanged)
      };
    };

    window.setReplyMessageActions = function() {
      var messageBuilder = $('#reply-area').scope();

      if(useTemplateGenerationService) {
        var serviceParams = {
          template: 'update_event',
          locale: window.threadComputedData.locale,
          appointment_nature: window.threadComputedData.appointment_nature,
          event: window.currentEventTile.event,
          current_appointment_is_virtual: currentAppointmentIsVirtual,
          modifications: window.getEventModifications()
        };

        new TemplateServiceManager.getInstance().generateTemplate(serviceParams).then(function(generatedTemplate) {
          if(typeof(generatedTemplate) == "object") {
            window.setReplyMessage(generatedTemplate["text"], "all", window.otherEmails);
            window.annotatedReply = generatedTemplate["annotated_text"];
          }
          else {
            window.setReplyMessage(generatedTemplate, "all", window.otherEmails);
          }
        });
      } else {

        var params = {
          action: "send_confirmation",
          origin: window.classification,
          locale: window.threadComputedData.locale
        };

        if(window.classification == 'update_event') {
          params.locationUpdated = window.locationHasBeenChanged;
          params.usingRestaurantBooking =  $('#restaurant-booking-manager').scope().getUsingRestaurantBooking();
          params.location = window.threadComputedData.location;
        }

        window.setReplyMessage(messageBuilder.generateReply(params), "all");
      }
    };

    window.afterEventFetched = function() {
        if(!window.threadComputedData.meeting_room_details) {
            window.setReplyMessageActions();
        }
    };

    // We need to know every possible rooms that could be booked for the thread to check against it and not count them as attendees
    angular.element(document).ready(function () {
        var meetingRoomsManager = $('#meeting-rooms-manager').scope();

        if(meetingRoomsManager) {
            meetingRoomsManager.$on('meetingRoomsInitialized', function(event, args) {
                window.setReplyMessageActions();
            });
        }
    });

    window.afterReplyBoxInitCallback = function() {
      if(!useTemplateGenerationService) {
        //window.initializeEmailLanguageSelector(window.setReplyMessageActions);
        window.setReplyMessageActions();
      }
        window.templateManager.fetchTemplates();
    };

</script>