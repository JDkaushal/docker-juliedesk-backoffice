<script>
    var isPostpone = <%= (messages_thread.event_data[:event_id].present?)?"true":"false" %>;
    var previousAppointment = $.grep(window.threadAccount.appointments,function(v) {
        return v.label == "<%= @messages_thread.event_data[:appointment_nature] %>";
    })[0];

    window.drawCalendarCallback = function(){
        window.activateCalendarWithParams({
            mode: "select_events",
            date_times: [],
            email: window.threadAccount.email,
            duration: window.threadComputedData.duration,
            compute_meeting_rooms_via_backend: true
        });
        // We don't want to directly show the calendar when forwarding to a client
        $(".calendar-container").addClass("minimized");
    };

    window.afterReplyBoxInitCallback = function(){
        function setWaitingForContactReplyMesssage() {
            var messageBuilder = $('#reply-area').scope();

            window.setReplyMessage(messageBuilder.generateReply({
                action: "wait_for_contact",
                isPostpone: isPostpone,
                previousAppointment: previousAppointment,
                currentEventData: window.currentEventData,
                locale: window.threadComputedData.locale,
                timezoneId: window.threadComputedData.timezone,
                defaultTimezoneId: window.threadAccount.default_timezone_id
            }), "only_client", []);
        }

        if(isPostpone) {
          if(window.currentEventData) {
            setWaitingForContactReplyMesssage();
          } else {
            window.afterEventFetched = function() {
              setWaitingForContactReplyMesssage();
            }
          }
        }
        else {
            setWaitingForContactReplyMesssage();
        }
    };

    var waitingForContactReplyFunction = function() {
        $.ajax({
            url: "/julie_actions/<%= @julie_action.id %>/update",
            method: "post",
            data: {
                text: $("textarea#reply-text").val(),
                generated_text: window.currentFullMessageWithFooter,
                to: window.currentRecipients().to,
                cc: window.currentRecipients().cc,
                deleted_event: window.actionDeletedEvent,
                done: true,
                processed_in: Date.now() - window.startedAt,
                messages_thread_id: "<%= @messages_thread.id %>",
                client_settings: window.getClientSettings()
            }
        });
        window.sendReply();
    };

    window.clickReplyButton = function() {
        if(isPostpone) {
            window.deleteEventBeforeReply(function() {
                waitingForContactReplyFunction();
            });
        }
        else {
            waitingForContactReplyFunction()
        }
    };

</script>