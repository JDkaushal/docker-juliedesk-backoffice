<% if @messages_thread.account_email %>
    <%= render partial: "messages_threads/info_panel", locals: {messages_thread: @messages_thread, julie_action: @julie_action} %>
<% else %>
    <%= render partial: "messages_threads/info_panel_no_account", locals: {messages_thread: @messages_thread} %>
<% end %>

<% if [JulieAction::JD_ACTION_SUGGEST_DATES,
       JulieAction::JD_ACTION_CHECK_AVAILABILITIES,
       JulieAction::JD_ACTION_SEND_INFO,
       JulieAction::JD_ACTION_SEND_CONFIRMATION,
       JulieAction::JD_ACTION_FREE_ACTION,
       JulieAction::JD_ACTION_CANCEL_EVENT,
       JulieAction::JD_ACTION_CREATE_EVENT,
       JulieAction::JD_ACTION_CANCEL_MULTIPLE_EVENTS,
       JulieAction::JD_ACTION_POSTPONE_MULTIPLE_EVENTS].include? @julie_action.action_nature %>
    <%= render partial: @julie_action.action_nature, locals: {julie_action: @julie_action, messages_thread: @messages_thread} %>
<% end %>

<script>
    window.timeSlotsToSuggest = [];
    window.timeSlotToCreate = null;
    window.selectedEvents = [];
    window.forceCancelEventIds = [];
    window.julieAliasId = "<%= JULIE_ALIASES_DATA[@messages_thread.julie_alias][:id] %>"

    window.startedAt = Date.now();

    window.actionDeletedEvent = false;

    window.activateCalendarWithParams = function (calendarParams) {
        calendarParams.height = $(".calendar-container").height();
        calendarParams.other_emails = window.otherAccountEmails;
        if(window.threadAccount) {
            calendarParams.default_timezone_id = window.threadAccount.default_timezone_id;
        }

        calendarParams.constraintsData = _.groupBy(window.threadComputedData.constraints_data, function (data) {
            return data.attendee_email;
        });
        window.currentCalendar = new Calendar($(".calendar-container"), calendarParams);
        $(".calendar-container").addClass("visible");
    };




    /*elsif @julie_action.action_nature == JulieAction::JD_ACTION_POSTPONE_EVENT
    window.afterEventFetched = function () {
        // Add attendees as recipients if not present already
        var toRecipients = _.map($("#recipients-to-input").tokenInput("get"), function (elt) {
            return elt.name;
        });
        var ccRecipients = _.map($("#recipients-cc-input").tokenInput("get"), function (elt) {
            return elt.name;
        });

        _.each(window.currentEventData.attendees, function (attendee) {
            if (toRecipients.indexOf(attendee.email) == -1 && ccRecipients.indexOf(attendee.email) == -1) {
                $("#recipients-to-input").tokenInput("add", {name: attendee.email});
            }
        });

        $("input#quote_message").removeAttr("checked");
        window.currentCalendar.addForbiddenEvents([
            {
                title: "TO POSTPONE",
                start: window.currentEventData.start.dateTime,
                end: window.currentEventData.end.dateTime
            }
        ]);
        redrawReplyText();
    };
*/


    <% initial_to_recipients = (JSON.parse(@message.reply_all_recipients || "{}")['to'] || []).map{|c| c['email']} %>
    <% initial_cc_recipients = (JSON.parse(@message.reply_all_recipients || "{}")['cc'] || []).map{|c| c['email']} %>

    // Add client as CC if not present
    <% if @messages_thread.account_email && ((initial_cc_recipients + initial_to_recipients) & @messages_thread.account.all_emails).empty?
            initial_cc_recipients += [@messages_thread.client_email]
       end %>
    function initialToRecipients() {
        return <%== initial_to_recipients.map{|c| {name: c}}.to_json %>;
    }
    function initialCcRecipients() {
        return <%== initial_cc_recipients.map{|c| {name: c}}.to_json %>;
    }

    function possibleRecipients() {
        <% recipients = JSON.parse(@message.reply_all_recipients || "{}") || [] %>
        <% recipients_array = ((recipients['to'] || []) + (recipients['cc'] || [])).map{|c| c['email']} %>

        return <%== (@messages_thread.contacts(with_client: true).map { |c| c[:email] } + recipients_array).uniq.map{|e| {name: e}}.to_json %>;
    }

    function clientRecipient() {
        return {name: "<%= @messages_thread.client_email %>"};
    }

    window.currentRecipients = function () {
        return {
            to: $.map($("#recipients-to-input").tokenInput("get"), function (elt) {
                return elt.name;
            }),
            cc: $.map($("#recipients-cc-input").tokenInput("get"), function (elt) {
                return elt.name;
            })
        };
    };

    function initTokenInputs() {
        if (window.tokenInputsInitialized) {
            return;
        }
        window.tokenInputsInitialized = true;
        $("#recipients-to-input").tokenInput(
                possibleRecipients(),
                {
                    searchDelay: 0,
                    enableFreeInput: true,
                    hintText: '',
                    noResultsText: '',
                    searchingText: '',
                    animateDropdown: false,
                    prePopulate: initialToRecipients(),
                    preventDuplicates: true,
                    theme: 'facebook'
                });
        $("#recipients-cc-input").tokenInput(
                possibleRecipients(),
                {
                    searchDelay: 0,
                    enableFreeInput: true,
                    hintText: '',
                    noResultsText: '',
                    searchingText: '',
                    animateDropdown: false,
                    prePopulate: initialCcRecipients(),
                    preventDuplicates: true,
                    theme: 'facebook'
                });
    }

    $(function () {
        initTokenInputs();
        $("#show-calendar-button").click(function () {
            $(".calendar-container").removeClass("minimized");
            window.currentCalendar.redrawFullCalendar();
            if (window.newEventEventTiles && window.showEditedEventInCalendar) {
                window.showEditedEventInCalendar();
            }
        });
        $("body").on("click", ".time-slots-to-suggest-list-container .time-slot-to-suggest", function (e) {
            var dateTime = $(this).data("date-time");
            $(".calendar-container").removeClass("minimized");
            window.currentCalendar.goToDateTime(dateTime);
        });

        $(".left-column").scroll(function () {
            if ($(this).scrollTop() < 40) {
                $(".julie-action-title").css({top: 40});
            }
            else {
                $(".julie-action-title").css({top: $(this).scrollTop()});
            }
        });

        $("#reply-button").click(function () {
            $("#reply-button").prop('disabled', true);
            if(window.clickReplyButton) {
                window.clickReplyButton();
            }
            else {
                $.ajax({
                    url: "/julie_actions/<%= @julie_action.id %>/update",
                    method: "post",
                    data: {
                        text: $("textarea#reply-text").val(),
                        to: window.currentRecipients().to,
                        cc: window.currentRecipients().cc,
                        done: true,
                        processed_in: Date.now() - window.startedAt
                    }
                });
                window.sendReply();
            }
        });

        window.deleteEventBeforeReply = function (callback) {
            if(window.currentEventTile) {
                window.currentEventTile.doneEditingCallback = function() {
                    window.actionDeletedEvent = true;
                    $(".messages-thread-info-panel .created-event-panel").hide();
                    callback();
                };
                window.currentEventTile.deleteEvent();
            }
        };

        window.redrawTimeSlotsToSuggestContainer = function () {
            var $container = $("#thread-header-other-entries-container");
            $container.html("");
            var $timeSlotsToSuggestDiv = $("<div>").addClass("time-slots-to-suggest-list-container");
            var $timeSlotsToSuggestListDiv = $("<div>").addClass("time-slots-to-suggest-list");
            $timeSlotsToSuggestListDiv.append($("<div>").addClass("time-slots-to-suggest-title").html("Dates sélectionnées"));
            $timeSlotsToSuggestListDiv.append($("<div>").addClass("time-slots-to-suggest-timezone").html("(" + window.threadComputedData.timezone + ")"));

            _.each(window.timeSlotsToSuggest, function (timeSlot) {
                var $timeSlotDiv = $("<div>").addClass("btn btn-sm btn-block btn-primary time-slot-to-suggest").data("date-time", timeSlot).html(window.helpers.capitalize(moment(timeSlot).tz(window.threadComputedData.timezone).locale(window.threadComputedData.locale).format(localize("email_templates.common.full_date_format"))));
                $timeSlotsToSuggestListDiv.append($timeSlotDiv);
            });
            $timeSlotsToSuggestDiv.append($timeSlotsToSuggestListDiv);
            $container.append($timeSlotsToSuggestDiv);
            var height = $(".time-slots-to-suggest-list").outerHeight();

            $(".time-slots-to-suggest-list-container").css({height: height});
            var $fakeDiv = $("<div>").css({
                height: height,
                width: '100%'
            });
            $container.append($fakeDiv);
        };

        window.sendReply = function () {
            $(".reply-box #callback-message").html("<%= I18n.t("common.sending")%>");
            $.ajax({
                url: "/messages/<%= @julie_action.message_classification.message_id %>/reply",
                method: "post",
                data: {
                    text: $("textarea#reply-text").val(),
                    html_signature: $("#reply-text-signature").html(),
                    to: window.currentRecipients().to,
                    cc: window.currentRecipients().cc,
                    quote_message: $("input#quote_message:checked").length > 0
                },
                success: function (e) {
                    $(".reply-box #callback-message").html("<%= I18n.t("common.sent")%>");
                    $("#reply-button").removeProp('disabled');
                    window.location = "<%= messages_thread_path(@messages_thread) %>"
                },
                error: function (e) {
                    console.log("error", e);
                    $("#reply-button").removeProp('disabled');
                    $(".reply-box #callback-message").html("Error: " + e);
                }
            });
        };
    });

    window.setReplyRecipients = function(recipients, otherRecipients) {
        initTokenInputs();
        $("#recipients-to-input").tokenInput("clear");
        $("#recipients-cc-input").tokenInput("clear");
        if (recipients == "only_client") {
            $("#recipients-to-input").tokenInput("add", clientRecipient());
        }
        else {
            _.each(initialToRecipients(), function (recipient) {
                $("#recipients-to-input").tokenInput("add", recipient);
            });
            _.each(initialCcRecipients(), function (recipient) {
                $("#recipients-cc-input").tokenInput("add", recipient);
            });
            if(otherRecipients) {
                var toRecipients = _.map($("#recipients-to-input").tokenInput("get"), function (elt) {
                    return elt.name;
                });
                var ccRecipients = _.map($("#recipients-cc-input").tokenInput("get"), function (elt) {
                    return elt.name;
                });
                _(otherRecipients).each(function(email) {
                    if (toRecipients.indexOf(email) == -1 && ccRecipients.indexOf(email) == -1) {
                        $("#recipients-to-input").tokenInput("add", {name: email});
                    }
                });
            }
        }
    };

    window.setReplyMessage = function (message, recipients, otherRecipients) {
        window.setReplyRecipients(recipients, otherRecipients);
        setCurrentLocale(window.threadComputedData.locale);
        $("textarea#reply-text").val(localize("email_templates.common.before") + message + localize("email_templates.common.footer." + window.julieAliasId));
        $("div#reply-text-signature").html(localize("email_templates.common.signature." + window.julieAliasId));
        $("textarea#reply-text").elastic();
        setCurrentLocale("<%= I18n.locale %>");
    };
</script>

<div class="fixed-columns">
  <div class="left-column">

    <%= render partial: "common/header" %>

    <div class="julie-action-title">
      <span class="title"><%= I18n.t("common.to_do") %> <%= I18n.t("actions.#{@julie_action.action_nature}.todo") %></span>

      <div id="show-calendar-button" class="btn btn-sm btn-default"><%= I18n.t("actions.show_calendar") %></div>
    </div>

    <%= render template: "calendar/calendar" %>


    <div class="julie-action-fantom"></div>

    <div class="messages-thread-emails">

      <div class="messages-thread-subject">
        <%= @messages_thread.subject %>
      </div>
      <% @messages_thread.messages.sort_by(&:received_at).each do |message| %>
          <%= render partial: "messages_threads/email", locals: {message: message, highlight: message.id == @message.id, highlight_message: I18n.t("classification_categories.#{message.classification_category_for_classification @julie_action.message_classification.classification}.classifications.#{@julie_action.message_classification.classification}.action")} %>

          <% if message.id == @message.id %>
              <div class="highlighted-below-email">
                <div class="reply-box">
                  <div class="from"><%= I18n.t("common.from") %> <%= "#{JULIE_ALIASES_DATA[@messages_thread.julie_alias][:name]} <#{@messages_thread.julie_alias}>" %></div>
                  <div class="to">
                    <span><%= I18n.t("common.to") %></span>
                    <input id="recipients-to-input"/>
                  </div>
                  <div class="cc">
                    <span><%= I18n.t("common.cc") %></span>
                    <input id="recipients-cc-input"/>
                  </div>
                  <textarea id="reply-text"></textarea>

                  <div id="reply-text-signature"></div>
                  <div class="quote-message-container">
                    <%= check_box_tag :quote_message, "", true %>
                    <%= I18n.t "common.quote_message" %>
                  </div>
                  <button class="btn btn-success" id="reply-button"><%= I18n.t("common.reply") %></button>
                  <div id="callback-message"></div>
                </div>
              </div>
          <% end %>
      <% end %>
    </div>


  </div>
</div>


