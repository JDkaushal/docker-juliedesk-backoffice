<script>
    var presenceFormat = "YYYYMMDDTHHmm00";
    var app = angular.module("backofficeApp", []);
    app.controller("OperatorsPresenceCtrl", function($scope, $http, $timeout, $sce) {
        moment.locale('fr');
        $scope.operatorEmailByHourRate = 5;
        //var operatorEmailByHourRate = 7.5;
        var aiForecastWindow = 45;

        $scope.startWeekDate = moment.tz('Indian/Antananarivo').startOf("isoweek").utc().add(6, 'h');

        $scope.countsToMatch = {};
        $scope.aiForecast = {};

        $scope.init = function() {
            var startDate = $('.operators-presence-container').data('start-date');

            if(startDate) {
                $scope.startWeekDate = moment(startDate).tz('Indian/Antananarivo').startOf("isoweek").utc().add(6, 'h');
            }

            $scope.refreshEndWeekDate();
            $scope.setWeekDays();
            $scope.setTimeReferences();
            $scope.fetch();
            $scope.refreshAIForecast();
        };

        $scope.refreshAIForecast = function() {
            if(!$scope.lastFetchedForecastDate) {
                $scope.firstFetchedForecastDate = $scope.startWeekDate.clone();
                //$scope.lastFetchedForecastDate = $scope.startWeekDate.clone();

                $scope.fetchAIForecast('future');
                $scope.fetchAIForecast('past');
            } else {
                var refreshDate = $scope.lastFetchedForecastDate.clone().add('d', aiForecastWindow - 7);

                $scope.computeAIForecast();

                if(refreshDate.diff($scope.endWeekDate, 'days') < 8 ) {
                    $scope.fetchAIForecast('future');
                } else if($scope.startWeekDate.diff($scope.firstFetchedForecastDate, 'days') < 8) {
                    $scope.fetchAIForecast('past');
                }
            }

        };

        $scope.computeAIForecast = function() {
            var currentDate, formattedDate, currentValue;
            _.each($scope.hours, function(times, weekday) {
                _.each(times, function(time) {
                    currentDate = time.clone().minute(0).second(0);
                    formattedDate = String(currentDate.utc().format('YYYY-MM-DD HH:mm:SS'));
                    currentValue = 'n/a';

                    if($scope.aiForecast[formattedDate]) {
                        currentValue = Math.ceil($scope.aiForecast[formattedDate] / $scope.operatorEmailByHourRate);
                    }

                    $scope.countsToMatch[currentDate.format('EHH')] = currentValue;
                });
            });
        };

        $scope.fetchAIForecast = function(mode) {
            console.log('fetching ai', mode);

            $scope.aiThinking = true;

            var startDate;

            if(mode == 'future') {
                $scope.lastFetchedForecastDate = $scope.startWeekDate.clone();
                startDate = $scope.lastFetchedForecastDate;
            } else {
                startDate = $scope.firstFetchedForecastDate.add('d', -30);
            }

            $http.get("/api/v1/emails_forecast?start_date=" + startDate.format('YYYY-MM-DD') + "&duration=" + aiForecastWindow, {headers: {'Authorization': 'EDx19D72bH7e5I64EXk1kwa4jXvynddS'}}).success(function(response) {
                $scope.aiForecast = $.extend($scope.aiForecast,response);
                $scope.computeAIForecast();
                $scope.aiThinking = false;
            });
        };

        $scope.refreshEndWeekDate = function() {
            $scope.endWeekDate = $scope.startWeekDate.clone().endOf("isoweek");
        };

        $scope.setWeekDays = function() {
            $scope.daysOfCurrentWeek = [];
            var currentDate = $scope.startWeekDate.clone().startOf('day');
            var endDate = $scope.endWeekDate.clone().startOf('day');

            while(currentDate.diff(endDate) <= 0) {
                $scope.daysOfCurrentWeek.push(currentDate.clone());
                currentDate.add('days', 1)
            }
        };

        $scope.getWeekDay = function(weekDayNumber) {
            var weekday = _.find($scope.daysOfCurrentWeek, function(date) {
                return date.isoWeekday() == weekDayNumber;
            });

            var formattedWeekDay = 'Not found';

            if(weekday) {
                formattedWeekDay = weekday.format('ddd D MMMM');
                formattedWeekDay = formattedWeekDay.charAt(0).toUpperCase() + formattedWeekDay.substr(1).toLowerCase();
            }

            return formattedWeekDay;
        };

        $scope.setTimeReferences = function() {
            $scope.halfHours = { 1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [] };
            $scope.hours = { 1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [] };
            var currentIsoWeekDay = 1;

            var mTime = $scope.startWeekDate.clone();

            for(var i=1; i <= 7; i++) {
                currentIsoWeekDay = i;
                for(var j=0; j < 24; j++) {
                    var clonedHourTime = mTime.clone();
                    $scope.halfHours[currentIsoWeekDay].push(clonedHourTime);
                    $scope.hours[currentIsoWeekDay].push(clonedHourTime);
                    var clonedHalfHourTime = clonedHourTime.clone();
                    clonedHalfHourTime.add(30, 'm');
                    $scope.halfHours[currentIsoWeekDay].push(clonedHalfHourTime);
                    mTime.add(1, 'h');
                }
            }
        };

        $scope.levelTwo0perators = function() {
            return _.filter($scope.operators, function(operator) {
                return operator.privilege == "<%= Operator::PRIVILEGE_SUPER_OPERATOR_LEVEL_2 %>";
            });
        };

        $scope.previousWeek = function() {
            $scope.startWeekDate.add(-1, 'w');
            $scope.refreshWeekContext();
        };

        $scope.nextWeek = function() {
            $scope.startWeekDate.add(1, 'w');
            $scope.refreshWeekContext();
        };

        $scope.refreshWeekContext = function() {
            $scope.setTimeReferences();
            $scope.refreshEndWeekDate();
            $scope.setWeekDays();
            $scope.fetch();
            $scope.saveCurrentWeekInUrl();
            $scope.refreshAIForecast();
        };

        $scope.fetch = function() {
            $scope.loading = true;
            $http.get("operators_presence.json?start=" + $scope.startWeekDate.format()).success(function(response) {
                $scope.operators = response.data.operators;
                $scope.loading = false;
            });
        };

        $scope.getHours = function(weekDay) {
            if(!!$scope.hours) {
                return $scope.hours[weekDay];
            }
        };

        $scope.getHalfHours = function(weekDay) {
            if(!!$scope.halfHours) {
                return $scope.halfHours[weekDay];
            }
        };

        $scope.displaySavedLabel = function() {
            var savedLabelNode = $('#saved_label');
            savedLabelNode.removeClass('disappear');
            savedLabelNode.addClass('appear');

            $timeout(function() {
                savedLabelNode.addClass('disappear');
            }, 500)
        };

        $scope.displaySaveFailedLabel = function() {
            var errorLabelNode = $('#error_label');
            errorLabelNode.removeClass('disappear');
            errorLabelNode.addClass('appear');

            $timeout(function() {
                errorLabelNode.addClass('disappear');
            }, 500)
        };

        $scope.endTogglePresences = function(weekday, operator, presence, reviewMode, event) {
            var formattedPresence = presence.format(presenceFormat);
            $scope.removePreselection();
            if($scope.initDrag && $scope.initDrag.operator == operator) {
                var startNode = $($scope.initDrag.startNode);
                var endNode = $(event.currentTarget);

                var presences = _.select(_.map($scope.halfHours[weekday], function(mHalfHour) {
                    return mHalfHour.format(presenceFormat);
                }), function(formattedHalfHour) {
                    return formattedHalfHour <= formattedPresence && formattedHalfHour >= $scope.initDrag.presence.format(presenceFormat);
                });

                var allSelected = true;
                _.each(presences, function(presence) {
                    if(reviewMode) {
                        allSelected = allSelected && operator.review_presences.indexOf(presence) > -1;
                    }
                    else {
                        allSelected = allSelected && operator.presences.indexOf(presence) > -1;
                    }

                });

                $scope.addClassToNodes('selected' ,startNode, endNode);

                if(allSelected) {
                    _.each(presences, function(presence) {
                        var index;
                        if(reviewMode) {
                            index = operator.review_presences.indexOf(presence);
                            if(index > -1) {
                                operator.review_presences.splice(index, 1);
                            }
                        }
                        else {
                            index = operator.presences.indexOf(presence);
                            if(index > -1) {
                                operator.presences.splice(index, 1);
                            }
                        }
                    });

                    $scope.removeClassToNodes('selected' ,startNode, endNode);

                    $scope.loading = true;

                    $http.post("/review/operators_presence/remove", {
                        presences: presences,
                        operator_id: operator.id,
                        is_review: reviewMode
                    }).then(function() {
                        $scope.loading = false;
                        $scope.displaySavedLabel();
                    }, function(response) {
                        console.log(response);
                        $scope.loading = false;
                        $scope.displaySaveFailedLabel();
                    });
                }
                else {
                    _.each(presences, function(presence) {
                        var index;
                        if(reviewMode) {
                            index = operator.review_presences.indexOf(presence);
                            if (index == -1) {
                                operator.review_presences.push(presence);
                            }
                        }
                        else {
                            index = operator.presences.indexOf(presence);
                            if (index == -1) {
                                operator.presences.push(presence);
                            }
                        }
                    });

                    $scope.loading = true;

                    $http.post("/review/operators_presence/add", {
                        presences: presences,
                        operator_id: operator.id,
                        is_review: reviewMode
                    }).then(function() {
                        $scope.loading = false;
                        $scope.displaySavedLabel();
                    }, function(response) {
                        console.log(response);
                        $scope.loading = false;
                        $scope.displaySaveFailedLabel();
                    });

                }
            }
            $scope.initDrag = null;
        };

        $scope.isOperatorPresent = function(operator, presence, reviewMode) {
            if(reviewMode) {
                return operator.review_presences.indexOf(presence.format(presenceFormat)) > -1;
            }
            else {
                return operator.presences.indexOf(presence.format(presenceFormat)) > -1;
            }
        };

        $scope.resetDay = function(weekDay, event) {
            var $currentTarget = $(event.currentTarget);

            $currentTarget.closest('.weekday-grid').find('td.selected').removeClass('selected');
            $scope.loading = true;

            $http.post("/review/operators_presence/reset_day", {
                day: $scope.startWeekDate.clone().add(weekDay - 1, 'd').format()
            }).then(function() {
                $scope.loading = false;
                $scope.fetch();
                $scope.displaySavedLabel();
            }, function(response) {
                console.log(response);
                $scope.loading = false;
                $scope.displaySaveFailedLabel();
            });

        };

        $scope.copyDay = function(weekDay, days) {
            $scope.loading = true;

            $http.post("/review/operators_presence/copy_day", {
                day: $scope.startWeekDate.clone().add(weekDay - 1, 'd').format(),
                days: days
            }).then(function() {
                $scope.loading = false;
                $scope.fetch();
                $scope.displaySavedLabel();
            }, function(response) {
                console.log(response);
                $scope.loading = false;
                $scope.displaySaveFailedLabel();
            });
        };

        $scope.initTogglePresences = function(operator, presence, event) {
            $scope.initDrag = {
                operator: operator,
                presence: presence,
                startNode: event.currentTarget
            };
        };

        $scope.preselectPresences = function(operator, presence, event) {
            $scope.removePreselection();
            if($scope.initDrag != null && $scope.initDrag.operator == operator) {
                var startNode = $($scope.initDrag.startNode);
                var endNode = $(event.currentTarget);

                $scope.addClassToNodes('pre-selected', startNode, endNode);
            }
        };

        $scope.removePreselection = function() {
            $('td.pre-selected').removeClass('pre-selected');
        };

        $scope.addClassToNodes = function(className, startNode, endNode) {
            var startNodeId = startNode.attr('id');
            var endNodeId = endNode.attr('id');

            startNode.addClass(className);

            if(startNode[0] !== endNode[0]) {
                var nodesToPreselect = $('#' + startNodeId).nextUntil('#' + endNodeId);
                nodesToPreselect.addClass(className);
                endNode.addClass(className);
            }

        };

        $scope.removeClassToNodes = function(className, startNode, endNode) {
            var startNodeId = startNode.attr('id');
            var endNodeId = endNode.attr('id');

            startNode.removeClass(className);

            if(startNode[0] !== endNode[0]) {
                var nodesToPreselect = $('#' + startNodeId).nextUntil('#' + endNodeId);
                nodesToPreselect.removeClass(className);
                endNode.removeClass(className);
            }

        };

        $scope.countsForHalfHour = function(halfHour) {
            var result = 0;
            _($scope.operators).each(function(operator) {
                if(!operator.in_formation && $scope.isOperatorPresent(operator, halfHour)) {
                    result += 1;
                }
            });
            return result;
        };

        $scope.countsToMatchForHalfHour = function(halfHour) {
            return $scope.countsToMatch[halfHour.format("EHH")];
        };

        $scope.saveCurrentWeekInUrl = function() {
            window.history.pushState(null, 'operator_planning', '/review/operators_presence?start_date=' + $scope.startWeekDate.format('YYYY-MM-DD'))
        };

        $scope.displayHourHeader = function(hour) {
            var clone = hour.clone().tz("Indian/Antananarivo");
            var cloneHH = clone.format("HH");
            var result = '';

            if(cloneHH == "06") {
                result = clone.format("ddd HH");
            }else {
                result = cloneHH;
            }

            return result + 'h';
        };

        $scope.init();
    });
</script>

<div ng-app="backofficeApp" ng-controller="OperatorsPresenceCtrl" class="operators-presence-container" data-start-date="<%= params[:start_date]%>">
  <h1>Operator presence times</h1>

  <label>Number of emails processed per hour per operator</label>
  <input ng-model="operatorEmailByHourRate" ng-change="computeAIForecast()">

  <div id=by-julie>Predictions by Julie</div>

  <div class="ai-thinking" ng-show="aiThinking">Julie Thinking</div>
  <div class="loading" ng-show="loading">Loading...</div>
  <div class="save-succeeded" id="saved_label">Saved</div>
  <div class="save-error" id="error_label">Error while saving</div>

  <br>
  <h5>
    <a href="/review/operators_presence.csv?start={{ startWeekDate.format() }}" target="_blank" class="btn btn-default">Recap</a>
    <div ng-click="fetch()" class="btn btn-default">Refresh</div>
    <div class="btn btn-default" ng-click="previousWeek()"><</div>
    <div class="btn btn-default" ng-click="nextWeek()">></div>
    Week {{ startWeekDate.format("W") }} of {{ startWeekDate.format("YYYY") }}: {{ startWeekDate.format("dddd D MMMM") }} - {{ endWeekDate.format("dddd D MMMM") }}
  </h5>
  <br>
  <br>

  <div class="table-container weekday-grid" ng-repeat="weekday in [1, 2, 3, 4, 5, 6, 7]">
    <table class="table table-stripped">
      <tr>
        <th class="fixed">{{getWeekDay(weekday)}} (heure Mada)</th>
        <th class="hour"
            ng-class="(hour.clone().tz('Indian/Antananarivo').format('HH') == '06')?'main-of-day':''"
            ng-repeat="hour in getHours(weekday) track by $index"
            colspan="2">
          {{ displayHourHeader(hour) }}
        </th>
      </tr>
      <tr ng-repeat="operator in operators track by $index" class="operator-{{operator.id}}-{{weekday}}">
        <style>
            .operator-{{operator.id}}-{{weekday}} td.selected {
                background: {{operator.color}} !important;
                opacity: 1 !important;
            }
            .operator-{{operator.id}}-{{weekday}} td.selected.pre-selected {
                background: {{operator.color}} !important;
                opacity: 0.5 !important;
            }
            .operator-{{operator.id}}-{{weekday}} td.pre-selected {
                background: {{operator.color}} !important;
                opacity: 0.5;
            }
        </style>

        <td class="fixed">
          <span class="operator-name">{{ operator.stars }} {{ operator.name }} {{ operator.in_formation ? "(Form)" : ""}}</span>
          <span class="operator-working-hours">{{ operator.presences.length / 2.0 }}h</span>
        </td>
        <td ng-repeat="halfHour in getHalfHours(weekday) track by $index"
            ng-mouseover="preselectPresences(operator, halfHour, $event)"
            ng-mouseDown="initTogglePresences(operator, halfHour, $event)"
            ng-mouseUp="endTogglePresences(weekday, operator, halfHour, undefined, $event)"
            ng-class="(isOperatorPresent(operator, halfHour))?'selected':''"
            id="{{weekday}}-{{operator.id}}-{{$index}}"
        >
        </td>
      </tr>

      <tr ng-repeat="operator in levelTwo0perators() track by $index" class="operator-{{operator.id}}-{{weekday}}">
        <td class="fixed">
          <span class="operator-name">{{ operator.stars }} {{ operator.name }} (rv)</span>
          <span class="operator-working-hours">{{ operator.review_presences.length / 2.0 }}h</span>
        </td>
        <td ng-repeat="halfHour in getHalfHours(weekday) track by $index"
            ng-mouseover="preselectPresences(operator, halfHour, $event)"
            ng-mouseDown="initTogglePresences(operator, halfHour, $event)"
            ng-mouseUp="endTogglePresences(weekday, operator, halfHour, true, $event)"
            ng-class="(isOperatorPresent(operator, halfHour, true))?'selected':''"
            id="level2-{{weekday}}-{{operator.id}}-{{$index}}"
        >
        </td>
      </tr>

      <tr>
        <td class="fixed"></td>
        <td class="day-counts"
            ng-repeat="halfHour in getHalfHours(weekday) track by $index"
            ng-class="(countsForHalfHour(halfHour) < countsToMatchForHalfHour(halfHour))?'warn':((countsForHalfHour(halfHour) > countsToMatchForHalfHour(halfHour))?'warn2':'')"
        >
          {{ countsForHalfHour(halfHour) }}<br>
          {{ countsToMatchForHalfHour(halfHour) }}
        </td>
      </tr>
    </table>

    <div class="day-buttons">
      <div class="btn btn-warning btn-xs" ng-click="resetDay(weekday, $event)">Reset</div>
      <div class="btn btn-warning btn-xs" ng-click="copyDay(weekday, 1)">Copy to next day</div>

      <div class="btn btn-warning btn-xs" ng-click="copyDay(weekday, 7)">Copy to next week</div>
    </div>
  </div>
</div>