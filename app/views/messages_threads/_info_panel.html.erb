<%= javascript_include_tag 'angular_dependencies' %>
<script>
    setCurrentLocale("<%= I18n.locale %>");

    <% currentAttendees = [] %>
    <% attendees = messages_thread.computed_data[:attendees] || [] %>
    // Put the messages_thread contacts at the end of the array, so if we already saved it (i.e. the form for the contact has been filled) it will take precedence over the former when applying the select.first instruction
    <% possible_attendees = attendees.map(&:symbolize_keys) + messages_thread.contacts %>
    <% same_company_attendees = messages_thread.account.contacts_from_same_company %>
    <% possible_contacts_for_cache = messages_thread.possible_contacts_for_cache %>
    <% (possible_attendees + same_company_attendees).each{|co| co[:email] = "#{co[:email]}".downcase }.uniq { |co| co[:email] }.each do |contact| %>
        <% attendee = attendees.select { |att| att['email'] == contact[:email] }.first %>
        <% if attendee || (
             messages_thread.computed_data[:appointment_nature].nil? &&
                     possible_attendees.include?(contact)) %>
            <%  currentAttendees.push(contact) %>
        <% end %>
    <% end %>

    <%  currentAttendees.push(attendees.select{|a| a['email'].blank? }).flatten!  %>
    <% if possible_contacts_for_cache.size > 0 %>

    <%  currentAttendees = currentAttendees.push(possible_contacts_for_cache).flatten.uniq { |co| co[:email] }  %>
    <% end %>


    window.currentAttendees = <%== currentAttendees.to_json %>;
    window.currentJulieAlias = <%== @messages_thread.julie_alias.to_json %>;

    window.threadComputedData = <%== @messages_thread.computed_data.to_json %>;
    window.threadAccount = <%== @messages_thread.account.to_json %>;

    window.otherAttendeesWithAccount = _.filter(window.threadComputedData.attendees, function (attendee) {
        return attendee.account_email && attendee.account_email != "<%= @messages_thread.account_email %>";
    });
    window.otherAccountEmails = _.map(otherAttendeesWithAccount, function (attendee) {
        return attendee.account_email;
    });

    window.otherAttendeesWithoutAccount = _.filter(window.threadComputedData.attendees, function (attendee) {
        return !attendee.account_email;
    });

    window.virtualAppointmentNatures = <%== MessagesThread.virtual_appointment_natures.to_json %>;

    $(document).ready(function() {
    //$(function () {
        if (window.leftColumnMessage) {
            $(".messages-thread-info-panel .message-container").html(window.leftColumnMessage).show();
        }
        initAppointments();

        $(".validate-linear-form-entry-button").click(function() {
            askNextLinearFormEntry();
        });

        $(".client-current-time").html(moment.tz(window.threadAccount.default_timezone_id).format("DD/MM YYYY, HH:mm:ss"));

        redrawLinearForm();
        if (window.threadDataIsEditable) {
            $(".data select#appointment_nature").prop('disabled', true);

            $("#timezone").timezonePicker();
            $("#timezone").on("autocompletechange", function() {
                redrawDifferentTimezoneWarner();
            });

            <% if messages_thread.calendar_login['type'] != "GoogleLogin" %>
            $(".data input#private").prop('disabled', true);
            <% end %>
            $(".data textarea#notes").prop('disabled', true);
            $(".add-constraint-button").show();
        }
        else {
            $(".data input, .data textarea, .data select").prop('disabled', true);
            $(".data .input-like").addClass('disabled');

            $(".data-entry .add-attendee-container").hide();
            $(".linear-form-entry .validate-linear-form-entry-button").hide();
            $(".add-constraint-button").hide();
        }
        if (window.afterFormLoadedCallback) {
            window.afterFormLoadedCallback();
        }

        $("#appointment_nature").change(function () {
            setAppointmentValues();
            if($(".linear-form-entry[data-entry-name='timezone']:hidden").length > 0 && $("#appointment_nature").val()) {
                    askNextLinearFormEntry();
            }
            redrawDifferentTimezoneWarner();
        });

        $(".change-account-init-button").click(function() {
            $(this).hide();
            $(".change-account-container").show();
        });

        $(".change-account-button").click(function() {
            $(".change-account-spinner").css({display: "block"});
            $(".change-account-container").hide();
            $.ajax({
                url: "/messages_threads/<%= messages_thread.id %>/associate_to_account",
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify({
                    account_email: $("select#change-account-input").val()
                }),
                success: function() {
                    window.location = window.location;
                },
                error: function () {
                    window.location = window.location;
                }
            })
        });



        $("input[name='locale']").change(function () {
            setNotes();
            reProcessTitle();
        });

        $("body").on("change", "input#attendee", function() {
            reProcessTitle();
        });

        // Listen to the changes made in the attendees form (angular 2 way binding to the attendee list checkbox) to update the title also
        $("body").on("change", "input#attendee_presence", function() {
            reProcessTitle();
        });

        $("body").on("change", "input#attendee_name", function() {
            reProcessTitle();
        });

        $("body").on("change", "select#location_nature", function () {
            setAddressValues();
        });


        if($("#current_notes").length > 0) {
            $("#current_notes").height($("#current_notes")[0].scrollHeight);
        }



        $(".submit-classification").click(function () {
            $(this).attr('disabled', true);
            if (window.submitClassification) {
                window.submitClassification();
            }
        });

        $("body").on("change", "input[type=checkbox]#attendee", function() {
            processAppointmentType();
        });
        $(".data #add-attendee-button").click(function (e) {
            var email = $(".data #add_attendee").val();
            $(".data #add_attendee").val("");
            var $contact = $("<div>").addClass("contact").data("email", email).data("name", "");
            $contact.append($("<input type='checkbox' checked>").val(email).attr('id', "attendee"));
            var $nameAndEmail = $("<div>").addClass("attendee-name-and-email");
            $nameAndEmail.append($("<input type='text'>").attr("id", "attendee_name").val("").attr("placeholder", "<%= I18n.t("info_box.full_name_placeholder") %>"));
            $nameAndEmail.append($("<div>").addClass("attendee-email").html(email));
            $contact.append($nameAndEmail);
            $(".data #contacts-data-list").append($contact);
            reProcessTitle();
            processAppointmentType();
        });

        <% if messages_thread.event_data[:event_id] %>


        var $eventDoesNotExist = $("<div>").addClass("event-does-not-exist");
        $eventDoesNotExist.append($("<div>").html(localize("info_panel.event_does_not_exist_anymore")));
        $eventDoesNotExist.append($("<a href='/messages_threads/<%= messages_thread.id %>/remove_event_link'>").addClass("btn btn-success btn-block").html(localize("info_panel.remove_link")));
        window.currentEventTile = new EventTile($(".messages-thread-info-panel .created-event-panel"), {
            timezoneId: window.threadComputedData.timezone,
            mode: "read_only",
            event: {},
            eventId: "<%= messages_thread.event_data[:event_id] %>",
            eventUrl: "<%= messages_thread.event_data[:event_url] %>",
            calendarId: "<%= messages_thread.event_data[:calendar_id] %>",
            accountEmail: window.threadAccount.email,
            calendarLoginUsername: "<%= messages_thread.event_data[:calendar_login_username] %>",
            locale: window.threadComputedData.locale,
            eventDoesNotExistSelector: $eventDoesNotExist,
            doneEditingCallback: function() {

            }
        });
        $(".messages-thread-info-panel .created-event-panel").show();
        window.currentEventTile.redraw();
        window.currentEventTile.fetchEvent(function(data) {
            window.currentEventData = data;
            window.currentEventTile.redraw();
            if(window.afterEventFetched) {
                window.afterEventFetched();
            }
        });

        <% end %>

        fetchOtherAccounts();
    });

    window.getCurrentAppointment = function() {
        return $.grep(window.threadAccount.appointments,function(v) {
            return v.label == $("select#appointment_nature").val();
        })[0];
    };
    window.getCurrentAddress = function() {
        var currentAppointment = window.getCurrentAppointment();
        if(!currentAppointment) {
            return null;
        }
        var address = _.find(currentAppointment.addresses_with_description, function(addressObject) {
            return addressObject.label == $("select#location_nature").val();
        });
        if(address) {
            if(address.address == "") {
                address.address = $("#location").val();
            }
            return address;
        }
        else if($("#location").val().length > 0) {
            return $("#location").val();
        }
        return null;
    };

    function newConstraintTile(data, expand) {
        var possibleAttendees = window.getInfoPanelAttendees();
        // ALready set in the angular controller
//        possibleAttendees.push({
//            email: window.threadAccount.email,
//            name: window.threadAccount.full_name
//        });

        $(".messages-thread-info-panel .constraint-tiles-container").append($("<div>").addClass("constraint-tile-container"));
        new ConstraintTile($(".messages-thread-info-panel .constraint-tiles-container").find(".constraint-tile-container").last(), {
            possible_attendees: possibleAttendees,
            locale: "<%= I18n.locale %>",
            timezone: window.threadAccount.default_timezone_id,
            data: data,
            expand: expand,
            cloneCallback: function(data) {
                newConstraintTile(data, true);
            }
        });
    }


    function redrawDifferentTimezoneWarner() {
        $(".different-timezone-warner").hide();
        return;
        var appointment = $.grep(window.threadAccount.appointments, function (v) {
            return v.label == $("#appointment_nature").val();
        })[0];
        if(appointment.label != "call" && appointment.label != "skype" && appointment.label != "webex") {
            if($("#timezone").val() != window.threadAccount.default_timezone_id) {
                $(".different-timezone-warner").show();
            }
        }
    }

    function reProcessTitle() {
        var appointment = $.grep(window.threadAccount.appointments, function (v) {
            return v.label == $("#appointment_nature").val();
        })[0];

        var contactNames = [];
        $("input#attendee[type='checkbox']:checked").each(function() {
            if($(this).closest(".contact").attr('data-intitle') == "true")
                contactNames.push($(this).closest(".contact").attr('data-name'));
        });

//        var contactNames = $("input#attendee[type='checkbox']:checked").map(function() {
//            return $(this).closest(".contact").data('name');
//            //return $(this).closest(".contact").find("input#attendee_name").val();
//        }).get();
        console.log(contactNames);
        contactNames.push(window.threadAccount.full_name);
        $("input#summary").val(appointment.title_in_calendar[$("input[name='locale']:checked").val()] + " " + contactNames.join(" / "));
    }

    function fetchOtherAccounts() {
        $(".other-accounts").hide();
        $(".other-accounts-list").html("");
        for (var i in window.otherAccountEmails) {
            var otherAccountEmail = window.otherAccountEmails[i];
            CommonHelpers.externalRequest({
                action: "show_account",
                email: otherAccountEmail
            }, function (sae) {
                $(".other-accounts").show();
                var $otherAccount = $("<div>").addClass("other-account");
                $otherAccount.append($("<div>").addClass("other-account-name").html(sae.data.full_name));
                $otherAccount.append($("<div>").addClass("other-account-email").html(sae.data.email));
                $otherAccount.append($("<div>").addClass("other-account-timezone").html("Default timezone: " +  sae.data.default_timezone_id));
                $otherAccount.append($("<div>").addClass("other-account-current-notes").html(sae.data.current_notes));
                $(".other-accounts-list").append($otherAccount);
            }, function (sae) {

            });
        }
    }

    function setAppointmentNatureAndChangeIfNeeded(appointmentNature) {
        var oldAppointmentNatture = $("select#appointment_nature").val();
        if(appointmentNature != oldAppointmentNatture) {
            $("select#appointment_nature").val(appointmentNature);
            $("select#appointment_nature").change();
        }
    }

    function processAppointmentType() {
        var possibleAppointmentsTypes = _.filter(window.threadAccount.appointments, function(appointment) {
            return appointment.appointment_kind_hash.family_kind == $("select#appointment_family_nature").val();
        });
        if(possibleAppointmentsTypes.length == 1) {
            setAppointmentNatureAndChangeIfNeeded(possibleAppointmentsTypes[0].kind);
        }
        else if(possibleAppointmentsTypes.length > 1) {
            var possibleAppointment = _.find(possibleAppointmentsTypes, function(appointment) {
                var rule = appointment.appointment_kind_hash.rule;
                return _.filter(rule.split("&"), function(rule_item) {
                    if(rule_item.indexOf("ATTENDEES") > -1) {
                        if(rule_item.split(">").length == 2) {
                            return window.getInfoPanelAttendees().length > rule_item.split(">")[1];
                        }
                        else if (rule_item.split("=").length == 2) {
                            return window.getInfoPanelAttendees().length == rule_item.split("=")[1];
                        }
                        else if (rule_item.split("<").length == 2) {
                            return window.getInfoPanelAttendees().length < rule_item.split("<")[1];
                        }
                        else {
                            return false;
                        }
                    }
                }).length == rule.split("&").length;
            });
            if(possibleAppointment) {
                setAppointmentNatureAndChangeIfNeeded(possibleAppointment.kind)
            }
        }
    }

    function initAppointments() {
        $("select#appointment_nature").html("");
        _.each(window.threadAccount.appointments, function(appointment) {
            $("select#appointment_nature").append($("<option>").val(appointment.label).html(appointment.label));
        });

        _(_(_.map(window.threadAccount.appointments, function(appointment) {
            return appointment.appointment_kind_hash.family_kind;
        })).uniq()).each(function(familyKind) {
            $("select#appointment_family_nature").append($("<option>").val(familyKind).html(familyKind));
        });

        $("select#appointment_family_nature").change(function() {
            processAppointmentType()
        });

        $("select#appointment_nature").val(window.threadComputedData.appointment_nature);
        var currentAppointment = window.getCurrentAppointment();
        if(currentAppointment) {
            $("select#appointment_family_nature").val(currentAppointment.appointment_kind_hash.family_kind);
        }
        else {
            $("select#appointment_family_nature").val(null);
        }
        if (window.threadComputedData.appointment_nature) {
            initAddresses();
            setLocationOrNumberToCallPart();
            if (window.threadComputedData.location_nature) {
                $("select#location_nature").val(window.threadComputedData.location_nature);
                var address = _.find(window.threadAccount.addresses, function (addressObject) {
                    return addressObject.label == $("select#location_nature").val();
                });

                if (address) {
                    $("input#location").val(address.address).attr('disabled', true);
                }
            }
        }

    }

    function redrawLinearForm() {
        if(!window.threadComputedData.appointment_nature) {
            $(".linear-form-entry").hide();
        }
        else {
            $(".linear-form-entry .validate-linear-form-entry-button").hide();
        }
        if(window.threadDataIsEditable) {
            if(window.threadComputedData.appointment_nature) {
                $(".save-info-container").show();
            }
            else {
                $(".linear-form-entry:hidden:eq(0)").show();
            }
        }

    }

    function askNextLinearFormEntry() {
        $(".linear-form-entry:visible .validate-linear-form-entry-button").hide();
        if($(".linear-form-entry:hidden:not(.dont-show)").length ==0) {
            $(".save-info-container").show();
        }
        else {
            $(".linear-form-entry:hidden:not(.dont-show):eq(0)").show();
        }
        $(".messages-thread-info-panel").scrollTop($(".messages-thread-info-panel")[0].scrollHeight);
    }

    function initAddresses() {
        var appointment = $.grep(window.threadAccount.appointments, function (v) {
            return v.label == $("#appointment_nature").val();
        })[0];

        $("select#location_nature").html("");
        _.each(window.threadAccount.addresses, function(addressObject) {
            $("select#location_nature").append($("<option>").val(addressObject.label).html(addressObject.label));
        });
        $("select#location_nature").append($("<option>").val("Custom").html("Custom"));
        $("select#location_nature").val("Custom");
        if (appointment.default_address) {
            $("select#location_nature").val(appointment.default_address.label);
        }
    }

    function setAppointmentValues() {
        var appointment = $.grep(window.threadAccount.appointments, function (v) {
            return v.label == $("#appointment_nature").val();
        })[0];

        var $timezoneEntryName = $(".linear-form-entry[data-entry-name='timezone']").find(".data-entry-name");
        if(window.virtualAppointmentNatures.indexOf(appointment.label) > -1) {
            $timezoneEntryName.html("<%= I18n.t("info_box.timezone_for_virtual") %>");
        }
        else {
            $timezoneEntryName.html("<%= I18n.t("info_box.timezone_for_physical") %>");
        }

        $("input#duration").val(appointment.duration);
        reProcessTitle();
        initAddresses();


        setAddressValues();
        setNumberToCallValue();

        setLocationOrNumberToCallPart();
    }

    function setLocationOrNumberToCallPart() {
        $(".location-part-container").hide();
        $(".number-to-call-part-container").hide();
        $(".location-part-container").closest(".linear-form-entry").removeClass("dont-show");

        var appointment = getCurrentAppointment();
        if(appointment.appointment_kind_hash.is_virtual) {
            if(appointment.kind == "call" || appointment.kind == "confcall") {
                $(".number-to-call-part-container").show();
            }
            else {
                $(".location-part-container").closest(".linear-form-entry").addClass("dont-show");
            }
        }
        else {
            $(".location-part-container").show();
        }
    }

    function setNumberToCallValue() {
        var appointment = _.find(window.threadAccount.appointments, function (appointmentObject) {
            return appointmentObject.label == $("#appointment_nature").val();
        });

        if(appointment.default_number_to_call && appointment.default_number_to_call.length >0) {
            $("textarea#number_to_call").val(localize("email_templates.invites_sent.call_client_on", {client: window.threadAccount.usage_name, number_to_call: appointment.default_number_to_call, locale: $("input[name='locale']:checked").val()}));
        }
        else {
            $("textarea#number_to_call").val("");
        }
    }

    function setAddressValues() {
        var appointment = _.find(window.threadAccount.appointments, function (appointmentObject) {
            return appointmentObject.label == $("#appointment_nature").val();
        });

        var address = _.find(window.threadAccount.addresses, function (addressObject) {
            return addressObject.label == $("select#location_nature").val();
        });

        if (address) {
            $("input#location").val(address.address).attr('disabled', true);
        }
        else {

            $("input#location").val("").removeAttr('disabled');
        }

        setNotes();
    }

    function setNotes() {
        var appointment = _.find(window.threadAccount.appointments, function (appointmentObject) {
            return appointmentObject.label == $("#appointment_nature").val();
        });

        var address = _.find(window.threadAccount.addresses, function (addressObject) {
            return addressObject.label == $("select#location_nature").val();
        });

        var notes = appointment.note[$("input[name='locale']:checked").val()];
        if (address) {
            var addressComplement = address.address_complement;
            if(addressComplement && addressComplement.length > 0) {
                notes = addressComplement + "\n" + notes;
            }
            $("textarea#notes").val(notes);
        }
        else {
            $("textarea#notes").val(notes);
        }
    }

    window.getInfoPanelAttendees = function() {
        var contacts = angular.element($('#attendeesCtrl')).scope();
        var attendees = contacts.attendees_manager.attendees.slice();
//        var filteredAttendees = attendees.filter(function(attendee){
//            return attendee.isPresent;
//        }).map(function(attendee) {
//            return{
//                email: attendee.email,
//                firstName: attendee.firstName,
//                lastName: attendee.lastName,
//                name: attendee.name,
//                usageName: attendee.usageName,
//                gender: attendee.gender,
//                isAssistant: attendee.isAssistant,
//                assisted: attendee.assisted,
//                assistedBy: attendee.assistedBy,
//                company: attendee.company,
//                timezone: attendee.timezone,
//                landline: attendee.landline,
//                mobile: attendee.mobile,
//                skypeId: attendee.skypeId,
//                confCallInstructions: attendee.confCallInstructions,
//                isPresent: attendee.isPresent
//            }
//        });
        // We save every contact on the thread even those who will not attend
        var filteredAttendees = attendees.map(function(attendee) {
            return{
                email: attendee.email,
                firstName: attendee.firstName,
                lastName: attendee.lastName,
                name: attendee.name,
                usageName: attendee.usageName,
                gender: attendee.gender,
                isAssistant: attendee.isAssistant,
                assisted: attendee.assisted,
                assistedBy: attendee.assistedBy,
                company: attendee.company,
                timezone: attendee.timezone,
                landline: attendee.landline,
                mobile: attendee.mobile,
                skypeId: attendee.skypeId,
                confCallInstructions: attendee.confCallInstructions,
                isPresent: attendee.isPresent
            }
        });
        return filteredAttendees;
//        return $("input#attendee[type='checkbox']:checked").map(function() {
//            var $contact = $(this).closest(".contact");
//
//            return {
//                name: $contact.find("input#attendee_name").val(),
//                email: $contact.find(".attendee-email").html()
//            };
//        }).get();
    };
</script>

<div class="messages-thread-info-panel scrollable">

  <div class="message-container"></div>

  <div id="thread-header-other-entries-container"></div>

  <%= render partial: "messages_threads/waiting_for_others_panel", locals: {message: @message} %>

  <%= render partial: "messages_threads/client_agreement_panel", locals: {messages_thread: messages_thread, classification: local_assigns[:classification]} %>

  <%= render partial: "messages_threads/attendees_are_noticed_panel", locals: {messages_thread: messages_thread, classification: local_assigns[:classification]} %>

  <div class="created-event-panel"></div>

  <%= render partial: "messages_threads/create_event_panel", locals: {messages_thread: messages_thread, julie_action: local_assigns[:julie_action]} %>


  <div class="only-locale-panel">
    <div class="data-entry">
      <div class="data-entry-name"><%= I18n.t("info_box.locale") %></div>
      <div class="semi-data-entry">
        <%= radio_button_tag :locale_only, "fr", (messages_thread.computed_data[:locale] != "en") %> <%= I18n.t("info_box.french") %>
      </div>
      <div class="semi-data-entry">
        <%= radio_button_tag :locale_only, "en", (messages_thread.computed_data[:locale] == "en") %> <%= I18n.t("info_box.english") %>
      </div>
      <br>
      <br>
      <button class="btn btn-block btn-success validate-locale-button"><%= I18n.t("common.validate") %></button>
    </div>
  </div>

  <div class="classic-info-panel">


    <div class="account">
      <% account = messages_thread.account %>
      <% if account %>
          <div class="full-name"><%= account.full_name %></div>
          <div class="account-email"><%= messages_thread.account.email %></div>
          <div class="client-current-date">Client current time: <span class="client-current-time"></span></div>
          <div class="client-for-date <%= (account.created_at > DateTime.now - 14.days)?"warning":"" %>">Has been client for <span><%= distance_of_time_in_words_to_now(account.created_at) %></span></div>
          <% if account.complaints_count > 0 %>
              <div class="complaints-count"><%= account.complaints_count %> complaints</div>
          <% end %>

          <% possible_contacts_for_cache = messages_thread.possible_contacts_for_cache %>
          <% if possible_contacts_for_cache.length > 0 %>
          <div class="change-account-init-button">Change</div>
          <%= image_tag "ajax-loader.gif", class: "change-account-spinner" %>
          <div class="change-account-container">
            <select id="change-account-input">
                <% possible_contacts_for_cache.each do |contact| %>
                    <option value="<%= contact[:email] %>"><%= contact[:name] %> - <%= contact[:email] %></option>
                <% end %>
            </select>
            <div class="change-account-button btn btn-sm btn-success">Change</div>
          </div>
          <% end %>
          <div class="account-details">
            <%= simple_format account.client_info %>
            <%if account.current_notes.present? || account.awaiting_current_notes.present? %>
                <%
                   notes = account.current_notes
                   if account.awaiting_current_notes.present?
                    notes += "\n#{I18n.t("info_box.new_preferences")} #{account.awaiting_current_notes}"
                   end
                %>

                <%= text_area_tag :current_notes, notes, class: "current-notes form-control", disabled: true %>
            <% end %>

            <% if @messages_thread.delegated_to_founders %>
                <div class="to-founders-message-div">
                  <%= (@messages_thread.operator_actions_groups.sort_by(&:created_at).select{|oag| oag.label == OperatorActionsGroup::LABEL_SEND_TO_SUPPORT}.last.try(:operator_actions) || []).select{|oa| oa.nature == OperatorAction::NATURE_SEND_TO_SUPPORT}.first.try(:message) %>
                </div>
            <% end %>
          </div>
          <div class="other-accounts">
            <div class="other-accounts-title">Other accounts</div>
            <div class="other-accounts-list"></div>
          </div>
      <% else %>
          <%= I18n.t("info_box.no_account_found") %>
      <% end %>
    </div>


    <div class="data">
      <div class="data-entry linear-form-entry">
        <div class="data-entry-name"><%= I18n.t("info_box.locale") %></div>
        <div class="semi-data-entry">
          <%= radio_button_tag :locale, "fr", (messages_thread.computed_data[:locale] != "en") %> <%= I18n.t("info_box.french") %>
        </div>
        <div class="semi-data-entry">
          <%= radio_button_tag :locale, "en", (messages_thread.computed_data[:locale] == "en") %> <%= I18n.t("info_box.english") %>
        </div>

        <div class="validate-linear-form-entry-button btn btn-success btn-sm"><%= I18n.t("common.validate") %></div>
      </div>



      <div class="data-entry linear-form-entry">
        <div class="data-entry-name"><%= I18n.t("info_box.appointment_type") %></div>
        <%= select_tag :appointment_family_nature, "", class: "data-entry form-control" %>
        <div class="data-entry-name"><%= I18n.t("info_box.computed_appointment_type") %></div>
        <%= select_tag :appointment_nature, "", class: "data-entry form-control" %>
      </div>

      <div class="data-entry linear-form-entry" data-entry-name="timezone">
        <div class="data-entry-name"><%= I18n.t("info_box.timezone") %></div>
        <%= text_field_tag :timezone, messages_thread.computed_data[:timezone], class: "data-entry form-control" %>
        <div class="validate-linear-form-entry-button btn btn-success btn-sm"><%= I18n.t("common.validate") %></div>

        <div class="different-timezone-warner">
          <div class="warning">
            <%= I18n.t("info_box.warning_different_timezones") %>
          </div>
          <div class="forbidden">
              <%= I18n.t("info_box.forbidden_different_timezones") %>
          </div>
        </div>
      </div>

      <%= render partial: "messages_threads/partials/attendees", locals: {messages_thread: messages_thread} %>

      <div class="data-entry linear-form-entry">
        <div class="data-entry-name"><%= I18n.t("info_box.ticket_notes") %></div>
        <%= text_area_tag :constraints, messages_thread.computed_data[:constraints], class: "data-entry form-control" %>

        <div class="constraint-tiles-container">

        </div>
        <div class="add-constraint-button btn btn-primary btn-sm btn-block">Add constraint</div>

        <div class="validate-linear-form-entry-button btn btn-success btn-sm"><%= I18n.t("common.validate") %></div>
      </div>



      <div class="data-entry linear-form-entry">
        <div class="data-entry-name"><%= I18n.t("info_box.summary") %></div>
        <%= text_field_tag :summary, messages_thread.computed_data[:summary], class: "data-entry form-control" %>
        <div class="validate-linear-form-entry-button btn btn-success btn-sm"><%= I18n.t("common.validate") %></div>
      </div>

      <div class="data-entry linear-form-entry">
        <div class="data-entry-name"><%= I18n.t("info_box.duration") %></div>
        <%= text_field_tag :duration, messages_thread.computed_data[:duration], class: "data-entry form-control" %>
        <div class="validate-linear-form-entry-button btn btn-success btn-sm"><%= I18n.t("common.validate") %></div>
      </div>

      <div class="data-entry linear-form-entry">
        <div class="location-part-container">
            <div class="data-entry-name"><%= I18n.t("info_box.location") %></div>
            <%= select_tag :location_nature, "", class: "data-entry form-control" %>
            <%= text_field_tag :location, messages_thread.computed_data[:location], class: "data-entry form-control" %>
        </div>
        <div class="number-to-call-part-container">

          <div class="data-entry-name"><%= I18n.t("info_box.number_to_call") %></div>
          <%= text_area_tag :number_to_call, messages_thread.computed_data[:number_to_call], class: "data-entry form-control" %>
        </div>
        <div class="validate-linear-form-entry-button btn btn-success btn-sm"><%= I18n.t("common.validate") %></div>
      </div>



      <div class="data-entry linear-form-entry">
        <div class="data-entry-name"><%= I18n.t("info_box.private_event") %></div>
        <div class="data-entry-value">
          <%= check_box_tag :private, "", messages_thread.computed_data[:private] %>
          <%= I18n.t("info_box.private_event") %>
        </div>
        <div class="validate-linear-form-entry-button btn btn-success btn-sm"><%= I18n.t("common.validate") %></div>
      </div>

      <div class="data-entry linear-form-entry">
        <div class="data-entry-name"><%= I18n.t("info_box.notes") %></div>
        <%= text_area_tag :notes, messages_thread.computed_data[:notes], class: "data-entry form-control" %>
        <%= text_area_tag :other_notes, messages_thread.computed_data[:other_notes], class: "data-entry form-control" %>
        <div class="validate-linear-form-entry-button btn btn-success btn-sm"><%= I18n.t("common.validate") %></div>
      </div>

      <div class="save-info-container">
        <br>
        <br>
        <button class="btn btn-block btn-success submit-classification"><%= I18n.t("common.save") %></button>
      </div>

    </div>
  </div>

  <div class="add-preference-panel">
      <div class="add-preference-data-entry">
        <div class="data-entry-name">Note a preference</div>
        <%= text_area_tag :preference_to_add, messages_thread.account.awaiting_current_notes %>
      </div>
    <button class="btn btn-block btn-success submit-add-preference"><%= I18n.t("common.save") %></button>
  </div>

  <%= render partial: "messages_threads/dates_identification_panel", locals: {messages_thread: messages_thread} %>
</div>