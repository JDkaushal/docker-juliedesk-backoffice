<%= render partial: "messages_threads/info_panel", locals: {
                                                         messages_thread: @messages_thread,
                                                         message: @message,
                                                         classification: @classification,
                                                         accounts_cache_light: @accounts_cache_light
                                                 } %>

<script>
  window.processingMessageThreadId = <%= @messages_thread.id %>;
  window.messageInterpretations = <%== @message.message_interpretations.to_json %>;
  window.isClassifying = true;
  window.classification = "<%= @classification %>";

  window.onload = function () { trackActionV2('Form_is_open', {first_time: window.formFirstPass, ux_element: 'form'}); };

  var isPostpone = <%= (@messages_thread.event_data[:event_id].present?)?"true":"false" %>;
  var classificationForm = window.classificationForms.createClassificationForm({
      classification:  window.classification,
      startedAt: <%= params[:started_at] || (DateTime.now.to_i * 1000) %>,
      locale: "<%= I18n.locale %>",
      threadLocale:"<%= @messages_thread.computed_data[:locale] %>",
      isPostpone: isPostpone,
      messageId: "<%= @message.id %>",
      clientAgreement: window.threadComputedData.client_agreement && !isPostpone,
      alreadySuggestedDates: <%== @message.messages_thread.suggested_date_times.map{|dt| dt.to_s}.to_json %>
  });

  window.messageText = '<%= CGI.escape(@message.server_message['text']).gsub('+', '%20') %>';

  <% if @display_calendar %>

      window.activateCalendarWithParams = function (calendarParams) {
          calendarParams.height = $(".calendar-container").height();
          calendarParams.other_emails = window.otherAccountEmails;
          if(window.threadAccount) {
              calendarParams.default_timezone_id = window.threadAccount.default_timezone_id;
          }
          calendarParams.additional_timezone_ids = [window.threadComputedData.timezone];

          calendarParams.constraintsData = _.groupBy(window.threadComputedData.constraints_data, function (data) {
              return data.attendee_email;
          });

          if(window.classification == "update_event") {
            calendarParams.pickEventCallback = function (data) {
              var duration = window.currentEventTile.event.end.diff(window.currentEventTile.event.start);

              var mStartDate = data.start.clone();
              var mEndDate = mStartDate.clone();
              mEndDate.add(duration, "ms");

              // DOn't update the currentEventTile.event, it should represent the original event not yet modified
              // To access the modified event, we need to read the values from the current event tile fields, by calling the currentEventTile.getEditedEvent() method
//              window.currentEventTile.event.start = mStartDate;
//              window.currentEventTile.event.end = mEndDate;
//              window.currentEventTile.redraw();

              window.currentEventTile.$selector.find(".start-date").val(mStartDate.format("YYYY-MM-DD"));
              window.currentEventTile.$selector.find(".start-hours").val(mStartDate.format("HH"));
              window.currentEventTile.$selector.find(".start-minutes").val(mStartDate.format("mm"));
              window.currentEventTile.$selector.find(".end-date").val(mEndDate.format("YYYY-MM-DD"));
              window.currentEventTile.$selector.find(".end-hours").val(mEndDate.format("HH"));
              window.currentEventTile.$selector.find(".end-minutes").val(mEndDate.format("mm"));

              window.currentEventTile.enterEditMode();
            };
          }

          calendarParams.default_calendar_login_username = window.threadComputedData.calendar_login_username;
          calendarParams.default_calendar_login_type = window.threadComputedData.calendar_login_type;

          window.currentCalendar = new Calendar($(".calendar-container"), calendarParams);
          $(".calendar-container").addClass("visible");
          if(window.classification != 'update_event') {
              $(".calendar-container").addClass("minimized");
          }
      };

      window.drawCalendarCallback = function(){
          window.activateCalendarWithParams({
              mode: "create_event",
              date_times: [],
              email: "<%= @message.messages_thread.account_email %>",
              duration: <%= @message.messages_thread.computed_data[:duration] || 60 %>
          });
          window.currentCalendar.redrawFullCalendar();
      };

      $(document).ready(function() {
          $("#show-calendar-button").click(function () {
              trackActionV2("Click_on_open_calendar", {
                  calendars_types: _.map(window.threadAccount.calendar_logins, function(cal) {return cal.type;})
              });
              $(".calendar-container").removeClass("minimized");
              window.currentCalendar.redrawFullCalendar();
          });
      });
  <% end %>

  function emailSender() {
      return <%== {name: @message.get_email_sender}.to_json %>;
  }

  $(function () {
    $(".left-column").scroll(function () {
      var $node = $(".classification-actions");
      var $that = $(this);

      if ($that.scrollTop() < 40) {
        $node.css({top: 40});
        $node.removeClass('bordered');
      }
      else {
        var currentScrollTop = $that.scrollTop();
        $node.css({top: currentScrollTop});
        $node.addClass('bordered');
      }
    });
  });
</script>

<div class="fixed-columns">


  <div class="left-column">

    <%= render partial: "common/classification_action_header", locals: {messages_thread: @messages_thread} %>

    <div class="classification-actions">
      <% if @display_calendar %>
          <div id="show-calendar-button" class="btn btn-sm btn-default in-classify"><%= I18n.t("actions.show_calendar") %></div>
      <% end %>
      <div id="back-button" class="btn btn-link" style="top: 0px; position: relative; left: -95%; padding: 0px;">< <%= I18n.t("common.back")%></div>
    </div>

    <% if @display_calendar %>
        <%= render template: "calendar/calendar" %>
    <% end %>

    <div class="julie-action-fantom"></div>

    <div class="messages-thread-emails">
      <%= render partial: "common/send_to_support", locals: {messages_thread: @messages_thread} %>

      <div class="messages-thread-subject">
        <%= @messages_thread.subject %>
      </div>

      <%= render 'messages/partials/list', locals: {type: :messages_classifying} %>
    </div>

    </div>
  </div>
</div>


