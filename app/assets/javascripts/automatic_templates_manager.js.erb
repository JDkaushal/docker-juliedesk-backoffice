var TemplateManager = function(params){
    this.categories = params.categories;

    this.menuButtonNode = params.menuButtonNode || $(".template-manager-menu-button");
    this.menuPanelWrapperNode = params.menuPanelWrapperNode || $(".template-manager-menu-wrapper");
    this.filterQueryInputNode = params.filterQueryInputNode || $("#template_manager_query_input");
    this.menuPanelNode = params.menuPanelNode || $(".template-manager-menu");
    this.subMenuPanelNode = params.subMenuPanelNode || $(".template-manager-sub-menu");
    this.menuPanelItemClass = params.menuPanelItemClass || "template-manager-menu-item";
    this.subMenuPanelClass = params.subMenuPanelClass || "template-manager-sub-menu";
    this.tagItemClass = params.tagItemClass || "template-manager-menu-tag";

    this.templates = [];
    this.currentSelectedTemplate = null;

    this.subMenuItems = {};

    this.skipDefaultItem = params.skipDefaultItem || false;

    this.onItemSelected = params.onItemSelected;

    this.templatesVariablesRegexps = [
      new RegExp('%{event_type}', 'g')
    ];

    this.templatesVariablesValues = [
        {value: window.getCurrentAppointment && window.getCurrentAppointment() && window.getCurrentAppointment().designation_in_email, localized: true}
    ];

    this.defaultTemplate = window.helpers.getQueryParams(window.location.search).default_template;

    this.menuPanelWrapperNode.hide();

    this.currentQuery = '';

    var host = "<%= ENV['JULIEDESK_APP_BASE_PATH'] %>";
    var accessKey = "<%= ENV['JULIEDESK_APP_API_KEY'] %>";

    var that = this;

    this.fetchTemplates = function() {
        $.ajax({
            url: host + "/api/v1/julie_templates",
            data: {categories: that.categories},
            type: "GET",
            contentType: "application/json",
            beforeSend: function (xhr) {
                xhr.setRequestHeader("Authorization", accessKey);
            },
            success: function (response) {
                var data = response.data;
                that.menuPanelNode.html("");
                that.menuPanelWrapperNode.hide();
                _(data).each(function (items, tag) {
                    // When tag is equal to "" it means that the related julie templates are not tagged at all
                    if(tag == '') {
                        _.each(items, function(item) {
                            $menuItem = $("<div>").addClass(that.menuPanelItemClass).html(item.title).data("template-en", item.template_en).data("template-fr", item.template_fr).data('is-tag', false).data('title', item.title);
                            that.templates.push($menuItem);
                            that.menuPanelNode.append($menuItem);
                        });
                    } else {
                        var $menuItem = $("<div>").addClass(that.menuPanelItemClass).addClass(that.tagItemClass).html(tag).data("is-tag", true).data('tag', tag);
                        //that.templates.push($menuItem);
                        that.menuPanelNode.append($menuItem);

                        that.subMenuItems[tag] = items

//                        _.each(items, function(item) {
//                            $menuItem = $("<div>").addClass(that.menuPanelItemClass).html(item.title).data("template-en", item.template_en).data("template-fr", item.template_fr).data('is-tag', false).data('title', item.title);
//                            that.templates.push($menuItem);
//                            that.subMenuPanelNode.append($menuItem);
//                        });
                    }


                });

                setTimeout(function() {
                  var templateSet = false;
                  if(that.defaultTemplate) {
                    var foundTemplate = _.find(that.templates, function(template) {
                      return template.text().toLowerCase() == that.defaultTemplate.toLowerCase();
                    });
                    if(foundTemplate) {
                      that.clickOnTemplateItem(foundTemplate);
                      templateSet = true;
                    }
                  }

                  if(!templateSet && !that.skipDefaultItem) {
                    that.clickOnTemplateItem(that.templates[0]);
                  }
                }, 500);
            }
        });
    };

    this.addItemsToSubMenu = function(tagNode) {
        var tag = tagNode.data('tag');
        tagNode.addClass('highlighted');

        that.subMenuPanelNode.empty();

      _.each(this.subMenuItems[tag], function(item) {
        var $menuItem = $("<div>").addClass(that.menuPanelItemClass).html(item.title).data('is-sub-menu-item', true).data('associated-tag', tag).data("template-en", item.template_en).data("template-fr", item.template_fr).data('is-tag', false).data('title', item.title);
        that.templates.push($menuItem);
        that.subMenuPanelNode.append($menuItem);
      });

      that.subMenuPanelNode.css('top', $(tagNode).position().top + 34);
      // SO the DOM will display the row entirely
      //that.subMenuPanelNode.css('left', -1000px);

      that.subMenuPanelNode.css('left', -($(that.subMenuPanelNode).width()));
      that.subMenuPanelNode.show();
    };

    this.openSubMenu = function() {
      that.subMenuPanelNode.show();
    };

    this.closeSubMenu = function() {
        that.subMenuPanelNode.empty();
        that.subMenuPanelNode.hide();

        $('.template-manager-menu-tag.highlighted').removeClass('highlighted');
    };

    this.onQueryInputKeyup = function() {
      that.updateFilterQuery();
      that.filterTemplates();
    };

    this.updateFilterQuery = function() {
      that.currentQuery = that.filterQueryInputNode.val();
    };

    this.filterTemplates = function() {
      _.each(that.templates, function(template) {
        var filtered = true;

        if(that.currentQuery && that.currentQuery != '') {
          filtered = template.text().toLowerCase().indexOf(that.currentQuery.toLowerCase()) > -1;
        }

        if(filtered) {
          template.show();
        } else {
          template.hide();
        }

      });
    };

    this.refreshCurrentSelectedTemplate = function(noTemplateSelectedCallback) {
        if(that.currentSelectedTemplate) {
            that.clickOnTemplateItem(that.currentSelectedTemplate);
        }else {
            noTemplateSelectedCallback();
        }
    };

    this.filterQueryInputNode.on('keyup', function() {
      that.onQueryInputKeyup();
    });

//    this.menuPanelWrapperNode.on("mouseenter", '.' + that.subMenuPanelNode, function() {
//        var currentItem = $(this);
//        that.openSubMenu();
//    });

    this.menuPanelWrapperNode.on("mouseenter", '.' + that.menuPanelItemClass, function() {
        var currentItem = $(this);

        if(currentItem.data('is-tag')) {
            that.addItemsToSubMenu(currentItem);

            _.each($('.template-manager-menu-tag.highlighted'), function(node) {
                var currentNode = $(node);
               if (!currentNode.is(currentItem)) {
                   currentNode.removeClass('highlighted');
               }
            });


        } else {
            if(!currentItem.data('is-sub-menu-item')) {
              that.closeSubMenu();
            }
        }
    });

    this.menuPanelWrapperNode.on("mouseleave", '.' + that.subMenuPanelClass, function() {
        var currentItem = $(this);
        that.closeSubMenu();
    });

    this.menuPanelWrapperNode.on("click", "." + that.menuPanelItemClass, function() {
        var currentItem = $(this);

        if(!currentItem.data('is-tag')) {
            trackActionV2('Click_on_template', {ux_element: 'backoffice', template_title: currentItem.text(), template_tag: currentItem.data('associated-tag')});
            that.clickOnTemplateItem(currentItem);
            //that.addItemsToSubMenu(currentItem.data('tag'));
        } else {
//            trackActionV2('Click_on_template', {ux_element: 'backoffice', template_title: currentItem.text()});
//            that.clickOnTemplateItem(currentItem);
        }
    });

    this.clickOnTemplateItem = function($item) {
        var template = '';

      window.usingTrustCircleTemplate = $item.data('title') == "Cercle de confiance - demande d'autorisation d'organisation";

        if(window.threadComputedData.locale == 'fr') {
            template = $item.data("template-fr");
        }else {
            template = $item.data("template-en");
        }

        template = that.replaceVariables(template);
        that.currentSelectedTemplate = $item;

        if(that.onItemSelected)
            that.onItemSelected($item, template);

        that.menuPanelWrapperNode.hide();
    };

    this.menuButtonNode.click(function() {
        that.menuPanelWrapperNode.toggle();
    });

    this.replaceVariables = function(template) {
        var currentValue;

        for(var i =0; i< that.templatesVariablesRegexps.length; i++) {
            currentValue = that.templatesVariablesValues[i];
            if(currentValue.value) {
                if(currentValue.localized) {
                    currentValue = currentValue.value[window.threadComputedData.locale]
                } else {
                    currentValue = currentValue.value;
                }

                template = template.replace(that.templatesVariablesRegexps[i], currentValue.toLowerCase());
            }

        }

        return template;
    };

    $('.menu-container').on('mouseenter', function(e) {
        $(this).focus();
    });

    $('.menu-container').on('focusout', function (e) {
        var $that = $(this);
        if($(e.relatedTarget).is($('#template_manager_query_input'))) {
            //$that.focus();
        } else {
            that.closeSubMenu();
            that.menuPanelWrapperNode.hide();
        }

    });
};