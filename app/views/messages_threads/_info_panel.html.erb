<%= javascript_include_tag 'angular_dependencies' %>
<%= javascript_include_tag 'classif_form_tracking' %>
<!-- For google Places and google Matrix Distance used to compute the travel time -->
<%= javascript_include_tag "https://maps.googleapis.com/maps/api/js?libraries=places&language=#{@messages_thread.computed_data[:locale]}&key=#{ENV['GOOGLE_JS_API_KEY']}"%>
<script>
    setCurrentLocale("<%= I18n.locale %>");

    <% @currentAttendees = [] %>
    <% attendees = messages_thread.computed_data[:attendees] || [] %>
    // Put the messages_thread contacts at the end of the array, so if we already saved it (i.e. the form for the contact has been filled) it will take precedence over the former when applying the select.first instruction
    <% possible_attendees = attendees.select{|a| a['email'].present? }.map(&:symbolize_keys) + messages_thread.contacts %>

    <% same_company_attendees = messages_thread.account.contacts_from_same_company %>
    <% possible_contacts_for_cache = messages_thread.possible_contacts_for_cache %>

    <% (possible_attendees + same_company_attendees).each{|co| co[:email] = "#{co[:email]}".downcase }.uniq { |co| co[:email] }.each do |contact| %>
        <% attendee = attendees.select { |att| att['email'] == contact[:email] }.first %>
        <% possible_attendee = possible_attendees.select { |att| att['email'] == contact[:email] }.first %>
        <% if attendee || possible_attendees.include?(contact) %>
            <% new_contact = contact %>

            <% if (attendee && attendee['isPresent'] != "false") || (messages_thread.computed_data[:appointment_nature].nil? && possible_attendee && possible_attendee['isPresent'] != "false") %>
                <% new_contact['isPresent'] = "true" %>
            <% end %>
            <%  @currentAttendees.push(new_contact) %>
        <% end %>
    <% end %>

    <%  @currentAttendees = @currentAttendees.push(possible_contacts_for_cache).flatten.uniq { |co| co[:email].downcase }  %>

    // Add the attendees without an email at the end, so they won't be removed by a uniq email operation (This would cause to remove every attendee without an email except the first)
    <%  @currentAttendees.push(attendees.select{|a| a['email'].blank? }).flatten!  %>

    window.currentAttendees = <%== @currentAttendees.to_json %>;
    window.currentJulieAlias = <%== @messages_thread.julie_alias.to_json %>;

    window.threadComputedData = <%== @messages_thread.computed_data.to_json %>;

    window.threadComputedDataPresentAttendees = _.filter(window.threadComputedData.attendees, function(att) {
      return att.isPresent == 'true';
    });
    // If the appointment_nature is not set, it means it is the first time we are filling the form
    window.formFirstPass = !window.threadComputedData.appointment_nature;

    window.threadAccount = <%== @messages_thread.account.to_json %>;

    window.threadId = <%= @messages_thread.id %>;

    window.otherAttendeesWithoutAccount = _.filter(window.threadComputedData.attendees, function (attendee) {
        return !attendee.account_email;
    });

    window.virtualAppointmentNatures = <%== MessagesThread.virtual_appointment_natures.to_json %>;
    window.julie_alias_emails = <%== @julie_emails.to_json %>;

    window.lastAppointmentType = '';

    window.allowedAttendeesEmails = [];

    var showCallInstructionsFormFor = ['call', 'confcall', 'visio'];

    var notesSpacingRe = new RegExp(/(?:__n){3,}/g);

    $(document).ready(function() {

      $( document ).tooltip();

        if(window.threadComputedData.locale)
            window.currentLocale = window.threadComputedData.locale;

        //if(window.messageInterpretations && window)

    //$(function () {
        if (window.leftColumnMessage) {
            $(".messages-thread-info-panel .message-container").html(window.leftColumnMessage).show();
        }

        $('.title-preferences-checkbox').click(function(e) {
            var currentTarget = e.currentTarget;
            var $currentTarget = $(currentTarget);
            var selectValue = $currentTarget.val();

            if(currentTarget.checked) {
                titlePreferencesSelection(selectValue);
            }else {
                e.preventDefault();
            }

            window.titlePreferenceOverridden = true;
        });

        $('#summary').keyup(function(e) {
            titlePreferencesSelection('custom');
            window.titlePreferenceOverridden = true;
        });

        $("#appointment_nature").change(function () {
            var currentAppointment = window.getCurrentAppointment();
            if(window.lastAppointmentType == '')
                window.lastAppointmentType = $("#appointment_nature").val();

            setAppointmentValues();

            if($(".linear-form-entry[data-entry-name='timezone']:hidden").length > 0 && $(".linear-form-entry[data-entry-name='appointmentType']:hidden").length == 0 && $("#appointment_nature").val()) {
                askNextLinearFormEntry();
            }
            redrawDifferentTimezoneWarner();

            refreshVirtualAppointmentsHelper();
            updateNotesCallingInfos();

            if(currentAppointment) {
                if(currentAppointment.appointment_kind_hash.is_virtual) {
                    $('#location_instructions_tracking_btn').attr('data-tracking-event', 'Click_on_validate_instruction');
                } else {
                    $('#location_instructions_tracking_btn').attr('data-tracking-event', 'Click_on_validate_location');
                }
            }

            if(window.currentEventTile && window.currentEventTile.getMode() == 'edit_only'){
                if(currentAppointment.appointment_kind_hash.is_virtual){
                    if($('#event-cancel-button').css('display') == 'block'){
                        $('.event-tile-panel .location-container input.location').hide();
                        $('.event-tile-container .create-event-meeting-rooms-container').hide();
                        $('#event_tile_location_selector').hide();
                    }

                    if($('#event_update_vm_ctrl').length == 0){

                        window.currentEventTile.displayCallingInfosForm();

                        // If we can see the edit button, it means we have not clicked it so the event is not editable => the form is disabled
                        if($('#event-edit-button').css('display') == 'block'){
                            $('#event_update_vm_ctrl').find('input').prop('disabled', true);
                            $('#event_update_vm_ctrl').find('select').prop('disabled', true);
                        }
                    }
                }else{
                    if($('#event-cancel-button').css('display') == 'block'){
                        // In case we hide it with some previous calling instructions
                        $('.event-tile-panel .location-container input.location').show();
                        $('.event-tile-container .create-event-meeting-rooms-container').show();
                        $('.event-tile-panel #calling-infos-missing').hide();
                        $('#event_tile_location_selector').show();

                        var meetingRoomNode = $('#meeting-rooms-manager');

                        if(meetingRoomNode.length > 0) {
                            meetingRoomNode.scope().scaleEventTile();
                        }
                    }
                    var eventUpdateNode = $('#event_update_virtual_meetings_helper');
                    if(eventUpdateNode.length > 0){
                        eventUpdateNode.remove();
                    }
                }
            }
            window.lastAppointmentType = $("#appointment_nature").val();
            refreshAttendeesMissingInformations();
            refreshDisplayedAttendeesInfos();
        });

        initAppointments();

        $(".validate-linear-form-entry-button").click(function() {
          var that = $(this);
          askNextLinearFormEntry();

          if(that.hasClass('validate-locale') && window.threadAccount.language_level == 'soutenu') {
            askNextLinearFormEntry();
          }
        });

        $(".client-current-time").html(moment.tz(window.threadAccount.default_timezone_id).format("DD/MM YYYY, HH:mm:ss"));

        redrawLinearForm();
        if (window.threadDataIsEditable) {
            $(".data select#appointment_nature").prop('disabled', true);

            $("#timezone").timezonePicker();
            $("#timezone").on("autocompletechange", function() {
                redrawDifferentTimezoneWarner();
            });

            <% if messages_thread.calendar_login && messages_thread.calendar_login['type'] != "GoogleLogin" %>
            $(".data input#private").prop('disabled', true);
            <% end %>
            $(".data textarea#notes").prop('disabled', true);
            $(".add-constraint-button").show();
        }
        else {
            $('.data input, .data textarea').prop('readOnly', true);
            $notes = $('.data textarea.constraints');
            if($notes.val() == '')
              $notes.parent().hide();
            else if($notes[0]){
              $notes.height($notes[0].scrollHeight);
            }

            $(".data select").prop('disabled', true);
            $(".data .input-like").addClass('disabled');

            $(".data-entry .add-attendee-container").hide();
            $(".linear-form-entry .validate-linear-form-entry-button").hide();
            $(".add-constraint-button").hide();
        }
        if (window.afterFormLoadedCallback) {
            window.afterFormLoadedCallback();
        }

        $("input[name='locale']").change(function () {
            window.setCurrentLocale($(this).val());
            updateNotesCallingInfos();
            reProcessTitle();
            updateAttendeesUsageNames();
        });

        $("body").on("change", "input#attendee", function() {
            reProcessTitle();
        });

        // Listen to the changes made in the attendees form (angular 2 way binding to the attendee list checkbox) to update the title also
        $("body").on("change", "input#attendee_presence", function() {
            reProcessTitle();
        });

        $("body").on("change", "input#attendee_name", function() {
            reProcessTitle();
        });

        $("body").on("change", "select#location_nature", function (e) {
            setAddressValues();
            updateCurrentEventNotes();
        });

        $('body').on('keyup', ".event-tile-container input.location", function(e){
            setAddressDetails('');
            updateCurrentEventNotes();
        });

        if($("#current_notes").length > 0) {
            $("#current_notes").height($("#current_notes")[0].scrollHeight);
        }

        $(".submit-classification").click(function () {
            var meetingRoomsManager = $('#meeting-rooms-manager').scope();

            if(meetingRoomsManager && meetingRoomsManager.usingMeetingRoom && meetingRoomsManager.noFittingRooms) {
              alert("Aucune salle de réunion ne correspond à ces filtres. Merci de modifier les filtres avant d'enregistrer.");
              return;
            }

            $(this).attr('disabled', true);

            if (window.submitClassification) {
                angular.element($('#attendeesCtrl')).scope().confirmAIOnPresentAttendees();

                $.ajax({
                    url: "/client_contacts/synchronize",
                    type: "POST",
                    data: {client_email: window.threadAccount.email, contacts: JSON.stringify(window.getInfoPanelAttendees())},
                    success: function (e) {
                        console.log('Contacts Synchronized');
                    },
                    error: function (e) {
                        console.log("Error: ", e);
                    }
                });
                window.submitClassification();
            }
            trackActionV2('Click_on_save_form', {first_time: !window.threadComputedData.appointment_nature, ux_element: 'form'});
        });

//        $("body").on("change", "input[type=checkbox]#attendee", function() {
//            processAppointmentType();
//        });

        $(".data #add-attendee-button").click(function (e) {
            var email = $(".data #add_attendee").val();
            $(".data #add_attendee").val("");
            var $contact = $("<div>").addClass("contact").data("email", email).data("name", "");
            $contact.append($("<input type='checkbox' checked>").val(email).attr('id', "attendee"));
            var $nameAndEmail = $("<div>").addClass("attendee-name-and-email");
            $nameAndEmail.append($("<input type='text'>").attr("id", "attendee_name").val("").attr("placeholder", "<%= I18n.t("info_box.full_name_placeholder") %>"));
            $nameAndEmail.append($("<div>").addClass("attendee-email").html(email));
            $contact.append($nameAndEmail);
            $(".data #contacts-data-list").append($contact);
            reProcessTitle();
            processAppointmentType();
        });

        <% if messages_thread.event_data[:event_id] %>

        var eventDoesNotExistAnymoreMessage = "<%= messages_thread.event_data[:event_from_invitation] ? 'info_panel.invitation_does_not_exist_anymore' : 'info_panel.event_does_not_exist_anymore'%>";

        var $eventDoesNotExist = $("<div>").addClass("event-does-not-exist");
        $eventDoesNotExist.append($("<div>").html(localize(eventDoesNotExistAnymoreMessage)));
        $eventDoesNotExist.append($("<a href='/messages_threads/<%= messages_thread.id %>/remove_event_link'>").addClass("btn btn-success btn-block").html(localize("info_panel.remove_link")));

        window.currentEventTile = new EventTile($(".messages-thread-info-panel .created-event-panel"), {
            timezoneId: window.threadComputedData.timezone,
            mode: "read_only",
            event: {},
            eventId: "<%= messages_thread.event_data[:event_id] %>",
            eventUrl: "<%= messages_thread.event_data[:event_url] %>",
            calendarId: "<%= messages_thread.event_data[:calendar_id] %>",
            accountEmail: window.threadAccount.email,
            // For backslahes to work in JS
            calendarLoginUsername: "<%= "#{@messages_thread.event_data[:calendar_login_username]}".gsub(/\\/, "\\\\\\\\") %>",
            locale: window.threadComputedData.locale,
            eventDoesNotExistSelector: $eventDoesNotExist,
            eventFromInvitation: "<%= messages_thread.event_data[:event_from_invitation] %>",
            eventFromInvitationOrganizer: "<%= messages_thread.event_data[:event_from_invitation_organizer] %>",
            uxElement: 'form',
            doneEditingCallback: function() {

            }
        });
        $(".messages-thread-info-panel .created-event-panel").show();
        window.currentEventTile.redraw();
        window.currentEventTile.fetchEvent(function(data) {
          var recipientManager = $('#recipients-manager').scope();
            window.currentEventTile.displayCallingInfosForm();
            window.currentEventData = data;
            window.currentEventTile.redraw();
            //_.map($('.attendees-container .attendees .attendee-email'), function(attendee) { return $(attendee).text().trim()})
            window.addAllowedAttendeesEmails(_.map(data.attendees, function(attendee) { return attendee.email;}));
            window.currentEventTile.initAttendeesAutomplete();
            if(recipientManager) {
              recipientManager.initTokenInputs();
            }

            if(window.afterEventFetched) {
                window.afterEventFetched();
            }
        });

        <% end %>

        <% if messages_thread.scheduling_status == MessagesThread::EVENTS_CREATED &&
        (
        (params[:controller] == "messages_threads" && params[:action] == "show") ||
        (params[:controller] == "review/messages_threads")
        )%>


            var alreadyCreatedEvents = <%== @messages_thread.created_events_data.to_json %>;
            _.each(alreadyCreatedEvents, function(eventData) {
                $(".messages-thread-info-panel .created-event-panel").append($("<div>").addClass("new-event-tile-container"));
                var eventTile = new EventTile($(".messages-thread-info-panel .created-event-panel").find(".new-event-tile-container").last(), {
                    timezoneId: window.threadComputedData.timezone,
                    mode: "read_only",
                    event: {},
                    eventId: eventData.id,
                    eventUrl: eventData.event_url,
                    calendarId: eventData.calendar_id,
                    accountEmail: window.threadAccount.email,
                    calendarLoginUsername: eventData.calendar_login_username,
                    locale: window.threadComputedData.locale,
                    uxElement: 'form'
                });
                eventTile.redraw();
                eventTile.fetchEvent(function(data) {
                    eventTile.redraw();
                });
            });

            $(".messages-thread-info-panel .created-event-panel").addClass("several-events").show();
        <% end %>


        initGooglePlacesAutoCompleteOnLocationField();
        initAllowedAttendeesEmails();
    });

    function extractEmails(text)
    {
      return text.match(/(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])/gi);
    };

    window.addAllowedAttendeesEmailsFromCurrentNotes = function(currentNotes) {
      var emails = extractEmails(currentNotes);

      if(emails) {
        emails = _.map(emails, function(email) { return email.toLowerCase(); });
        window.addAllowedAttendeesEmails(emails);
      }
    };

    window.addAllowedAttendeesEmails = function(emails) {
      window.allowedAttendeesEmails = window.allowedAttendeesEmails.concat(emails);
      window.allowedAttendeesEmails = _.uniq(window.allowedAttendeesEmails);
    };

    window.refreshAllowedAttendeesEmails = function() {
      window.initAllowedAttendeesEmails();
      var recipientsManager = $('#recipients-manager').scope();
      if(recipientsManager)
        recipientsManager.initTokenInputs();
    }

    // Compute the list of allowed attendees from their emails
    window.initAllowedAttendeesEmails = function() {
      var messageBodies = $.map($('#messages_container .email:not(".from-me") .body, .gmail_quote,blockquote, .email:not(".from-me") .ics-preview'), function(el, _) { return el.innerText }).join("\n");
      window.allowedAttendeesEmails = (window.threadComputedData.thread_recipients || [])
          // The thread main account email
          .concat(window.threadAccount.email)
          // The thread main account aliases
          .concat(window.threadAccount.email_aliases)
          // The emails present un the messages (they are represented as <a href="fdeschamps@chu-reims.fr">fdeschamps@chu-reims.fr</a> or <a href="mailto:fdeschamps@chu-reims.fr">fdeschamps@chu-reims.fr</a>
          // So we can look for them with Jquery using the regex function '*=' on the href attribute value
          //.concat(_.map($( "a[href*='@']" ), function(node){ return $(node).text()}))
          // Extract emails from emails bodies
          .concat(extractEmails(messageBodies) || [])
          .concat(extractEmails(window.threadComputedData.constraints || '') || [])
          // The attendees of the event if any
          //.concat(_.map($('.attendees-container .attendees .attendee-email'), function(attendee) { return $(attendee).text().trim()}))
          .concat(['hello@juliedesk.com']);

//      var clientsAccountsCurrentNotesNodes = $('.account-current-notes-container');
//      if(clientsAccountsCurrentNotesNodes.length > 0) {
//        var emails = extractEmails(clientsAccountsCurrentNotesNodes.text());
//        if(emails) {
//          window.allowedAttendeesEmails = window.allowedAttendeesEmails.concat(emails);
//        }
//      }

      window.allowedAttendeesEmails = _.map(window.allowedAttendeesEmails, function(email) { return email.toLowerCase().replace(/'/g, ""); });
      window.allowedAttendeesEmails = _.uniq(window.allowedAttendeesEmails);
    };

    window.isAuthorizedAttendee = function(attendeeEmail = '') {
      var allowedAttendeesEmails = window.allowedAttendeesEmails.map(function(email) {
        return email.toLowerCase()
      });
      return allowedAttendeesEmails.concat(window.julie_alias_emails).indexOf(attendeeEmail.toLowerCase()) > -1;
    };

    window.getAppointment = function(appointmentNature) {
      return $.grep(window.threadAccount.appointments,function(v) {
        return v.label == appointmentNature;
      })[0];
    };

    window.getCurrentAppointment = function() {
      return window.getAppointment($("select#appointment_nature").val());
    };
    window.getCurrentAddress = function() {
        var currentAppointment = window.getCurrentAppointment();
        if(!currentAppointment) {
            return null;
        }
        var address = _.find(currentAppointment.addresses_with_description, function(addressObject) {
            return addressObject.label == $("select#location_nature").val();
        });
        if(address) {
            if(address.address == "") {
                address.address = $("#location").val();
            }

            $.extend(address, getCurrentAddressObject());
            return address;
        }
        else if($("#location").val().length > 0) {
            return $("#location").val();
        }
        return null;
    };

    function bypassClientAgreementIfPossible() {
        if(window.acceptClientAgreement && window.threadAccount && emailSender) {
            var clientEmailAliases = window.threadAccount.email_aliases || [];
            clientEmailAliases.push(window.threadAccount.email);

            var senderEmail = emailSender();

            if(senderEmail) {
                senderEmail = senderEmail.name;

                if(clientEmailAliases.indexOf(senderEmail) > -1) {
                    window.acceptClientAgreement();
                }
            }
        }
    }


    function initGooglePlacesAutoCompleteOnLocationField() {
        var locationInput = $('#location');
        var locationCoordinatesInput = $('#location_coordinates');

        var options = {};

        // When we have a main address for the client and have geocoded it, we will ask google to suggest places in a 20kms radius around this address in priority
        if(window.threadAccount && window.threadAccount.main_address && window.threadAccount.main_address.latitude && window.threadAccount.main_address.longitude) {
          var referencePoint = new google.maps.LatLng(window.threadAccount.main_address.latitude, window.threadAccount.main_address.longitude);
          var circle = new google.maps.Circle({radius: 20000, center: referencePoint});

//          var defaultBounds = new google.maps.LatLngBounds();
//
//          defaultBounds.extend(new google.maps.LatLng(50.528372, 9.822633));
//          defaultBounds.extend(new google.maps.LatLng(41.501254, -6.036905));

          options.bounds = circle.getBounds();
        }

        var autocomplete = new google.maps.places.Autocomplete(locationInput[0], options);
        //var autocomplete = new google.maps.places.Autocomplete(locationInput[0]);

        if(window.threadComputedData) {
            locationCoordinatesInput.val(JSON.stringify(window.threadComputedData.location_coordinates || []));
        }

        autocomplete.addListener('place_changed', function() {
            var place = autocomplete.getPlace();
            var displayedLocation;

            if(place.types[0] == "street_address") {
                displayedLocation = place.formatted_address;
            }else {
                displayedLocation = place.name + ' - ' + place.formatted_address;
            }

            locationInput.val(displayedLocation);
            locationCoordinatesInput.val(JSON.stringify([place.geometry.location.lat(), place.geometry.location.lng()]));
        });
    }

    window.accountsAutocompleteSource = <%==
      @messages_thread.accounts_candidates.map{ |candidate_email| Account.create_for_autocomplete(candidate_email, {accounts_cache: local_assigns[:accounts_cache_light]})}.flatten.to_json
       # (local_assigns[:accounts_cache_light] || {}).map do |k, contact|
       #      [{
       #          email: contact['email'],
       #          name: contact['full_name'],
       #          company: "#{contact['company_hash'].try(:[], 'name')}"
       #      }] +
       #      (contact['email_aliases'] || []).map do |email_alias|
       #      {
       #          email: contact['email'],
       #          name: contact['full_name'],
       #          company: "#{contact['company_hash'].try(:[], 'name')}",
       #          email_alias: email_alias
       #      }
       #      end
       #  end.flatten.to_json

        # (local_assigns[:accounts_cache_light] || {}).map do |k, contact|
        #     [{
        #         email: contact['email'],
        #         name: contact['full_name'],
        #         company: "#{contact['company_hash'].try(:[], 'name')}"
        #     }] +
        #     (contact['email_aliases'] || []).map do |email_alias|
        #     {
        #         email: contact['email'],
        #         name: contact['full_name'],
        #         company: "#{contact['company_hash'].try(:[], 'name')}",
        #         email_alias: email_alias
        #     }
        #     end
        # end.flatten.to_json
    %>;

    window.allowedAccountsEmails = _.uniq(
        _.compact(
            _.flatten(
                _.map(window.accountsAutocompleteSource, function(account) { return [account.email, account.email_alias]; })
            )
        )
    );


    function refreshDisplayedAttendeesInfos() {
        var attendeesManager = angular.element($('#attendeesCtrl')).scope();
        attendeesManager.displayExtendedInfos();
        if(!attendeesManager.$$phase){
            attendeesManager.$apply();
        }
    }

    function refreshAttendeesMissingInformations() {
        var attendeesManager = angular.element($('#attendeesCtrl')).scope();
        attendeesManager.lookupAttendeesMissingInfos();
        if(!attendeesManager.$$phase){
            attendeesManager.$apply();
        }
//        if(!attendeesManager.$$phase){
//            attendeesManager.$apply(function(){
//                attendeesManager.lookupAttendeesMissingInfos();
//            });
//        }
    }

    // Used to forcefully update the notes when creating an event to add the selected virtual resource call instructions
    function forceUpdateNotesCallingInfos() {

      if(!window.threadDataIsEditable) {
        window.threadDataIsEditable = true;

        var currentAppointment = window.getCurrentAppointment();

        if(window.threadDataIsEditable){
          $('#notes').val('');

          angular.element($('#attendeesCtrl')).scope().updateNotes();
          var node = $('#virtual-meetings-helper');

          var vmHelper = angular.element(node).scope();

          if(vmHelper){
            if(currentAppointment && !currentAppointment.appointment_kind_hash.is_virtual) {
              vmHelper.setEventNotes();
            }else {
              if(vmHelper.configLoaded)
                vmHelper.setEventNotes();
              else
                refreshVirtualAppointmentsHelper();
            }
          }
        }

        if(currentAppointment && currentAppointment.appointment_kind_hash.is_virtual) {
          var meetingRoomsManager = $('#meeting-rooms-manager').scope();

          if(meetingRoomsManager) {
            meetingRoomsManager.setMeetingRoomInfosInNotes();
          }
        }

        var notes = $('#notes').val().trim().replace(/\n/g, '__n');
        $('#notes').val(notes.replace(notesSpacingRe, "__n__n").replace(/__n/g, "\n"));
        setNotes();

        if($('#event-cancel-button').css('display') == 'block')
          updateCurrentEventNotes();

        window.threadDataIsEditable = false;
      }
    }

    function updateNotesCallingInfos() {
        var currentAppointment = window.getCurrentAppointment();

        if(window.threadDataIsEditable){
            $('#notes').val('');

            angular.element($('#attendeesCtrl')).scope().updateNotes();
            var node = $('#virtual-meetings-helper');

            var vmHelper = angular.element(node).scope();

            if(vmHelper){
                if(currentAppointment && !currentAppointment.appointment_kind_hash.is_virtual) {
                    vmHelper.setEventNotes();
                }else {
                    if(vmHelper.configLoaded)
                        vmHelper.setEventNotes();
                    else
                        refreshVirtualAppointmentsHelper();
                }
            }
        }

        if(currentAppointment && currentAppointment.appointment_kind_hash.is_virtual) {
            var meetingRoomsManager = $('#meeting-rooms-manager').scope();

            if(meetingRoomsManager) {
                meetingRoomsManager.setMeetingRoomInfosInNotes();
            }
        }

        var notes = $('#notes').val().trim().replace(/\n/g, '__n');
        $('#notes').val(notes.replace(notesSpacingRe, "__n__n").replace(/__n/g, "\n"));
        setNotes();

        if($('#event-cancel-button').css('display') == 'block')
            updateCurrentEventNotes();
    }

    function updateCurrentEventNotes() {
        if(window.threadDataIsEditable && window.currentEventTile && window.currentEventTile.getMode() == 'edit_only') {
            //var vmHelper = angular.element($('#event_update_vm_ctrl')).scope();

            var currentEventNotesNode = $('.created-event-panel .notes');
            var currentEventNotes = currentEventNotesNode.val();
            var newEventDescription = '';
            //if(vmHelper){
                var otherNotesRegex = new RegExp(/- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -(.)* /g);
                var regExResult = otherNotesRegex.exec(currentEventNotes.replace(/\n/g,'__n'));
                if(regExResult != null){
                    newEventDescription = $('.classic-info-panel #notes').val() + "\n\n" + regExResult[0].replace(/__n/g,'\n');
                    currentEventNotesNode.val(newEventDescription);
                }else{
                    currentEventNotesNode.val($('.classic-info-panel #notes').val());
                }
            //}
        }
    }

    function newConstraintTile(data, expand, fromAI) {
        var possibleAttendees = window.presentAttendees();

        $(".messages-thread-info-panel .constraint-tiles-container").append($("<div>").addClass("constraint-tile-container"));
        new ConstraintTile($(".messages-thread-info-panel .constraint-tiles-container").find(".constraint-tile-container").last(), {
            possible_attendees: possibleAttendees,
            locale: "<%= I18n.locale %>",
            timezone: window.threadAccount.default_timezone_id,
            data: data,
            expand: expand,
            fromAI: fromAI,
            cloneCallback: function(data) {
                newConstraintTile(data, true);
            }
        });
    }

    function redrawDifferentTimezoneWarner() {
        $(".different-timezone-warner").hide();
        return;
        var appointment = $.grep(window.threadAccount.appointments, function (v) {
            return v.label == $("#appointment_nature").val();
        })[0];
        if(appointment.label != "call" && appointment.label != "skype" && appointment.label != "webex") {
            if($("#timezone").val() != window.threadAccount.default_timezone_id) {
                $(".different-timezone-warner").show();
            }
        }
    }

    function setTitleToThreadSubject() {
        // We are converting all html encoded characters back to their readable form + escaping any double quotes found in the title
        var newTitle = "<%== CGI.unescapeHTML((@messages_thread.subject || '').gsub(/(re\s?:)|(fwd\s?:)|(fw\s?:)|(tr\s?:)/i, '').strip).gsub('"', "\\\"") %>";
        $("input#summary").val(newTitle);
        if(window.currentEventTile && window.currentEventTile.getMode() == 'edit_only' && $('#event-cancel-button').css('display') == 'block')
            $('.event-tile-panel .title').val(newTitle);
    }

    function updateAttendeesUsageNames() {
        var attendessApp = angular.element($('#attendeesCtrl')).scope();

        attendessApp.updateAttendeesUsageName();
    }

    function reProcessTitle() {
        // We only update the title when the summary input is active and the "Names" title preference checkbox is checked (prevent the title to be overriden with the automatic one when the input is disabled)
        if($("input#summary").attr('disabled') == undefined && $('input[name="title_preferences[companies_and_names]"]').prop('checked')) {
            var appointment = $.grep(window.threadAccount.appointments, function (v) {
                return v.label == $("#appointment_nature").val();
            })[0];

            if (appointment) {
                var presentAttendees = _.filter(angular.element($('#attendeesCtrl')).scope().attendees.slice(), function (a) {
                    return a.isPresent;
                });

                var threadOwner = _.find(presentAttendees, function (a) {
                    return a.isThreadOwner;
                });

                var groupedPresentAttendees = _.groupBy(presentAttendees, function (a) {
                    return a.company;
                });

                var companies = Object.keys(groupedPresentAttendees);
                var attendeesDisplay = '';
                var threadOwnerCompanyAttendees = '';
                var noCompanyAttendees = '';
                var i = 0;

                if (companies.length == 1 && companies[0] != '') {
                    attendeesDisplay += companies[0];
                    var attendees = _.filter(groupedPresentAttendees[companies[0]], function (a) {
                        return !a.isAssistant;
                    });

                    var i, j = 0;

                    if (attendees.length > 0) {
                        attendeesDisplay += ' [';
                        _.each(attendees, function (a) {
                            // We display only the first 5 attendees
                            if (i <= 4) {
                                attendeesDisplay += a.displayNormalizedName();
                                // We append the slash until the last attendee we display
                                if (attendees.length >= 5 && i < 4)
                                    attendeesDisplay += ', ';
                                else if (attendees.length < 5 && i < attendees.length - 1)
                                    attendeesDisplay += ', ';
                                i++;
                            }
                            j++;
                        });
                        attendeesDisplay += ']';
                    }
                } else if (companies.length == 1 && companies[0] == '') {
                    var attendees = _.filter(groupedPresentAttendees[companies[0]], function (a) {
                        return !a.isAssistant;
                    });

                    noCompanyAttendees += _.map(attendees, function (a) {
                        return a.displayNormalizedName();
                    }).join(' | ');
                } else {
                    var realCompaniesCount = companies.length;
                    if (companies.indexOf("") > -1)
                        realCompaniesCount--;
                    if (window.threadAccount.company_hash && window.threadAccount.company_hash.name != '' && companies.indexOf(window.threadAccount.company_hash.name) > -1)
                        realCompaniesCount--;

                    _.each(companies, function (company) {
                        var attendees = _.filter(groupedPresentAttendees[company], function (a) {
                            return !a.isAssistant;
                        });

                        if (company == '') {

                            if (attendees != undefined && attendees.length > 0) {
                                noCompanyAttendees += _.map(attendees, function (a) {
                                    return a.displayNormalizedName();
                                }).join(' | ');
                            }
                        } else if (company == threadOwner.company) {
                            threadOwnerCompanyAttendees += company;
                            if (attendees.length == 1) {
                                threadOwnerCompanyAttendees += ' [' + attendees[0].displayNormalizedName() + ']';
                            }
                        } else {
                            i++;
                            if(attendees.length > 0){
                                attendeesDisplay += company;
                                if (attendees.length == 1) {
                                    attendeesDisplay += ' [' + attendees[0].displayNormalizedName() + ']';
                                }

                                if (i < realCompaniesCount)
                                    attendeesDisplay += ' | ';
                            }
                        }
                    });
                }

                if (attendeesDisplay == '' && noCompanyAttendees == '' && threadOwnerCompanyAttendees != '')
                    attendeesDisplay += threadOwnerCompanyAttendees;
                else if (attendeesDisplay == '' && noCompanyAttendees != '' && threadOwnerCompanyAttendees == '')
                    attendeesDisplay += noCompanyAttendees;
                else if (attendeesDisplay != '' && noCompanyAttendees == '' && threadOwnerCompanyAttendees != '')
                    attendeesDisplay += ' | ' + threadOwnerCompanyAttendees;
                else if (attendeesDisplay != '' && noCompanyAttendees != '' && threadOwnerCompanyAttendees == '')
                // We add the slash before here because in this particular case there is no threadOwnerCompany (should never happen) so the normal algorithm will not work properly in this case
                    attendeesDisplay += ' | ' + noCompanyAttendees;
                else if (attendeesDisplay != '' && noCompanyAttendees != '' && threadOwnerCompanyAttendees != '')
                    attendeesDisplay += ' | ' + noCompanyAttendees + ' | ' + threadOwnerCompanyAttendees;
                else if (attendeesDisplay == '' && noCompanyAttendees != '' && threadOwnerCompanyAttendees != '')
                    attendeesDisplay += noCompanyAttendees + ' | ' + threadOwnerCompanyAttendees;

                // If we only have one / in the title, we remplace it by a <>
                var slashMatches = attendeesDisplay.match(new RegExp(/\|/g));
                if (slashMatches && slashMatches.length == 1)
                    attendeesDisplay = attendeesDisplay.replace('|', '<>');

                var newTitle = appointment.title_in_calendar[$("input[name='locale']:checked").val()] + " " + attendeesDisplay;
                $("input#summary").val(newTitle);
                if(window.currentEventTile && window.currentEventTile.getMode() == 'edit_only' && $('#event-cancel-button').css('display') == 'block')
                    $('.event-tile-panel .title').val(newTitle);
            }
        }
    }

    function setAppointmentNatureAndChangeIfNeeded(appointmentNature) {
        var oldAppointmentNatture = $("select#appointment_nature").val();
        if(appointmentNature != oldAppointmentNatture) {
            $("select#appointment_nature").val(appointmentNature);
            $("select#appointment_nature").change();
        }
    }

    function processAppointmentType() {
        var possibleAppointmentsTypes = _.filter(window.threadAccount.appointments, function(appointment) {
            return appointment.appointment_kind_hash.family_kind == $("select#appointment_family_nature").val();
        });
        if(possibleAppointmentsTypes.length == 1) {
            setAppointmentNatureAndChangeIfNeeded(possibleAppointmentsTypes[0].kind);
        }
        else if(possibleAppointmentsTypes.length > 1) {

            var possibleAppointment = determineAppointmentType(possibleAppointmentsTypes);
            if(possibleAppointment) {
                setAppointmentNatureAndChangeIfNeeded(possibleAppointment.kind)
            }
        }
    }

    function determineAppointmentType(possibleAppointmentsTypes){
        var presentAttendees = window.getInfoPanelAttendeesWithoutAssistants();

        return _.find(possibleAppointmentsTypes, function(appointment) {
            var rule = appointment.appointment_kind_hash.rule;
            // We used presentAttendees.length - 1 because the rules seems 0-based in the attendees calculation
            return _.filter(rule.split("&"), function(rule_item) {
                        if(rule_item.indexOf("ATTENDEES") > -1) {
                            if(rule_item.split(">").length == 2) {
                                return presentAttendees.length - 1 > rule_item.split(">")[1];
                            }
                            else if (rule_item.split("=").length == 2) {
                                return presentAttendees.length - 1 == rule_item.split("=")[1];
                            }
                            else if (rule_item.split("<").length == 2) {
                                return presentAttendees.length - 1< rule_item.split("<")[1];
                            }
                            else {
                                return false;
                            }
                        }
                    }).length == rule.split("&").length;
        });
    }


    function initAppointments() {
        var $selectNatureNode = $("select#appointment_nature");
        var $selectFamilyNatureNode = $("select#appointment_family_nature");

//        $selectNatureNode.html("");
//        _.each(window.threadAccount.appointments, function(appointment) {
//            $selectNatureNode.append($("<option>").val(appointment.label).html(appointment.label));
//        });

//        _(_(_.map(window.threadAccount.appointments, function(appointment) {
//            return appointment.appointment_kind_hash.family_kind;
//        })).uniq()).each(function(familyKind) {
//            $("select#appointment_family_nature").append($("<option>").val(familyKind).html(familyKind));
//        });

        $selectFamilyNatureNode.change(function() {
            processAppointmentType();

            updateNotesCallingInfos();
            //refreshVirtualAppointmentsHelper();
        });

        $selectNatureNode.val(window.threadComputedData.appointment_nature);
        var currentAppointment = window.getCurrentAppointment();
        if(currentAppointment) {
            $selectFamilyNatureNode.val(currentAppointment.appointment_kind_hash.family_kind);
        }
        else {
            $selectFamilyNatureNode.val(null);
        }
        if (window.threadComputedData.appointment_nature) {
            initAddresses();
            setLocationOrNumberToCallPart();
            if (window.threadComputedData.location_nature) {
                $("select#location_nature").val(window.threadComputedData.location_nature);
                var address = _.find(window.threadAccount.addresses, function (addressObject) {
                    return addressObject.label == $("select#location_nature").val();
                });

                if (address && address.kind != 'ask_interlocuter') {
                    $("input#location").val(address.address);
                }
            }
        }
    }

    function refreshVirtualAppointmentsHelper(){
        var virtualMeetingsHelper = angular.element($('#virtual-meetings-helper')).scope();

        if(window.threadDataIsEditable && $.isEmptyObject(window.threadComputedData.call_instructions) && !window.currentEventTile
                || ($("select#appointment_nature").val() == 'skype' || $("select#appointment_nature").val() == 'webex' || $("select#appointment_nature").val() == 'hangout') && window.lastAppointmentType != ''
                || $("select#appointment_family_nature").val() == 'call' && window.lastAppointmentType != ''){
            if(virtualMeetingsHelper) virtualMeetingsHelper.loadDefaultConfig(true);
        }
    }

    function redrawLinearForm() {
        if(!window.threadComputedData.appointment_nature) {
            $(".linear-form-entry").hide();
        }
        else {
            $(".linear-form-entry .validate-linear-form-entry-button").hide();
        }
        if(window.threadDataIsEditable) {
            if(window.threadComputedData.appointment_nature) {
                $(".save-info-container").show();
            }
            else {
                $(".linear-form-entry:hidden:eq(0)").show();
            }
        }

    }

    function askNextLinearFormEntry() {
        $(".linear-form-entry:visible .validate-linear-form-entry-button").hide();
        if($(".linear-form-entry:hidden:not(.dont-show)").length ==0) {
            $(".save-info-container").show();
        }
        else {
            var currentHiddenDiv = $(".linear-form-entry:hidden:not(.dont-show):eq(0)").show();
          // When ai has found an appointment type
          if(currentHiddenDiv.hasClass('appointment-type-selects') && $('#appointment_family_nature').val()) {
            askNextLinearFormEntry();
          }

        }
        $(".messages-thread-info-panel").scrollTop($(".messages-thread-info-panel")[0].scrollHeight);
    }

    function initAddresses() {
        var appointment = $.grep(window.threadAccount.appointments, function (v) {
            return v.label == $("#appointment_nature").val();
        })[0];

        $("select#location_nature").html("");
        _.each(window.threadAccount.addresses, function(addressObject) {
            $("select#location_nature").append($("<option>").val(addressObject.label).html(addressObject.label));
        });
        $("select#location_nature").append($("<option>").val("Custom").html("Custom"));
        $("select#location_nature").val("Custom");
        if (appointment.default_address) {
            $("select#location_nature").val(appointment.default_address.label).trigger('change');
        }
    }

    function setAppointmentValues() {
        var appointment = $.grep(window.threadAccount.appointments, function (v) {
            return v.label == $("#appointment_nature").val();
        })[0];

        var $timezoneEntryName = $(".linear-form-entry[data-entry-name='timezone']").find(".data-entry-name");
        if(window.virtualAppointmentNatures.indexOf(appointment.label) > -1) {
            $timezoneEntryName.html("<%= I18n.t("info_box.timezone_for_virtual") %>");
        }
        else {
            $timezoneEntryName.html("<%= I18n.t("info_box.timezone_for_physical") %>");
        }

        $("input#duration").val(appointment.duration);
        reProcessTitle();
        initAddresses();


        setAddressValues();
        setNumberToCallValue();

        setLocationOrNumberToCallPart();
    }

    function setLocationOrNumberToCallPart() {
        $(".location-part-container").hide();
        $(".number-to-call-part-container").hide();
        $(".location-part-container").closest(".linear-form-entry").removeClass("dont-show");

        var appointment = getCurrentAppointment();
        if(appointment.appointment_kind_hash.is_virtual) {
            if( showCallInstructionsFormFor.indexOf(appointment.kind) > -1 ) {
                $(".number-to-call-part-container").show();
            }
            else {
                $(".location-part-container").closest(".linear-form-entry").addClass("dont-show");
            }
        }
        else {
            $(".location-part-container").show();
        }
    }

    function setNumberToCallValue() {
        var appointment = _.find(window.threadAccount.appointments, function (appointmentObject) {
            return appointmentObject.label == $("#appointment_nature").val();
        });

        if(appointment.default_number_to_call && appointment.default_number_to_call.length >0) {
            $("textarea#number_to_call").val(localize("email_templates.invites_sent.call_client_on", {client: window.threadAccount.usage_name, number_to_call: appointment.default_number_to_call, locale: $("input[name='locale']:checked").val()}));
        }
        else {
            $("textarea#number_to_call").val("");
        }
    }

    function getCurrentAddressObject() {
        return _.find(window.threadAccount.addresses, function (addressObject) {
            return addressObject.label == $("select#location_nature").val();
        });
    }

    function locationFieldIsSet() {
      return ($('input#location').val()).trim().length > 0;
    }

    function locationIsSettled() {
      if(isCurrentAppointmentVirtual())
        return !!window.threadComputedData.call_instructions.details || ['skype', 'hangout'].indexOf(window.getCurrentAppointment().kind) >= 1;

      return locationFieldIsSet();
    }

    function locationIsDefined() {
      if(isCurrentAppointmentVirtual()) {
        var callInstructionsDetails = window.threadComputedData.call_instructions.details;
        var callInstructionsTarget = window.threadComputedData.call_instructions.target;
        return (callInstructionsDetails && callInstructionsDetails != "") || callInstructionsTarget == "later" || ['skype', 'hangout'].indexOf(window.getCurrentAppointment().kind) >= 1;
      }
      else {
        return locationFieldIsSet();
      }
    }

    function shouldAskLocation() {
      return !locationIsDefined();
    }

    function missingContactInfo() {

    }

    function isCurrentAppointmentVirtual () {
      var currentAppointment = getCurrentAppointment();
      return currentAppointment && currentAppointment.appointment_kind_hash.is_virtual
    }

    function setAddressFromComputedData() {
      var address = window.threadComputedData.location;

        var locationInputs = $("input#location, input#event_location");

        if (address) {
            locationInputs.val(address);
            locatePlaceWithGoogle(address);
        }
        else {
            locationInputs.val("");
        }

        setNotes();
    }

    function setAddressValues() {
        var address = _.find(window.threadAccount.addresses, function (addressObject) {
            return addressObject.label == $("select#location_nature").val();
        });

        var locationInputs = $("input#location, input#event_location");

        if (address) {
            locationInputs.val(address.address);
            locatePlaceWithGoogle(address.address);
        }
        else {
            locationInputs.val("");
        }

        setNotes();
    }

    // Used to get geographic coordinates of the specified place (like when the operator select the client registered address from the location drop down
    function locatePlaceWithGoogle(address) {

        if (window.threadDataIsEditable) {
            if(!address) {
              $('#location_coordinates').val('[]');
              return;
            }

            var geocoder = new google.maps.Geocoder();

            geocoder.geocode( { 'address': address}, function(results, status) {
                var coordinates = [];
                if (status == google.maps.GeocoderStatus.OK) {
                    var result = results[0];
                    coordinates = [result.geometry.location.lat(), result.geometry.location.lng()]
                }

                $('#location_coordinates').val(JSON.stringify(coordinates));
            });
        }
    }

    function setNotes() {
        var address = _.find(window.threadAccount.addresses, function (addressObject) {
            return addressObject.label == $("select#location_nature").val();
        });

        var currentAppointment = window.getCurrentAppointment();

        if (address && currentAppointment && !currentAppointment.appointment_kind_hash.is_virtual) {
            var addressComplement = address.address_complement;
            if(addressComplement && addressComplement.length > 0) {
                setAddressDetails(addressComplement);
            }else{
                setAddressDetails('');
            }
        }else{
            setAddressDetails('');
        }
    }

    function setAddressDetails(addressDetails) {
        var addressDetailsReFr = new RegExp("-" + localize("events.notes.address_details_boundary", {locale: 'fr'}) + "-------------------.+?(?:----------------------------------------)");
        var addressDetailsReEn = new RegExp("-" + localize("events.notes.address_details_boundary", {locale: 'en'}) + "-------------------.+?(?:----------------------------------------)");
        var wrappedAddressDetails = '';
        var usedRegex = '';

        var notes = $("textarea#notes").val();
        var tmpNotes = notes.replace(/\n/g,'');

        var regexFrResult = addressDetailsReFr.exec(tmpNotes);
        var regexEnResult = addressDetailsReEn.exec(tmpNotes);

        if(addressDetails && addressDetails.length > 0) {
            wrappedAddressDetails += "-" + localize("events.notes.address_details_boundary", {locale: window.currentLocale}) + "-------------------";
            wrappedAddressDetails += '\n' + addressDetails;
            wrappedAddressDetails += "\n----------------------------------------";

            if(regexFrResult == null && regexEnResult == null){
                notes = wrappedAddressDetails + '\n\n' + notes;
            }else{
                usedRegex = regexFrResult != null ? addressDetailsReFr : addressDetailsReEn;
                notes = notes.replace(/\n/g,'__n').replace(usedRegex, wrappedAddressDetails).replace(/(__n){2,}/g, '\n\n').replace(/__n/g, "\n");
            }
        }else{
            if(regexFrResult != null || regexEnResult != null){
                usedRegex = regexFrResult != null ? addressDetailsReFr : addressDetailsReEn;
                notes = notes.replace(/\n/g,'__n').replace(usedRegex, '').replace(/(__n){2,}/g, '\n\n').replace(/__n/g, "\n");
            }
        }

        $("textarea#notes").val(notes.trim());

    }

    function titlePreferencesSelection(type) {
        var types = ['companies_and_names', 'email_subject', 'custom'];
        var currentCheckbox;

        _.each(types, function(t) {
            currentCheckbox = $('input[name="title_preferences[' + t + ']"]');
            if(currentCheckbox) {
                if(t == type) {
                    currentCheckbox.prop('checked', true);
                } else {
                    currentCheckbox.prop('checked', false);
                }
            }
        });

        switch(type) {

            case 'companies_and_names':
                reProcessTitle();
                break;
            case 'email_subject':
                setTitleToThreadSubject();
                break;
        }
    };

    window.getCallInstructions = function(){
        var instructions = '';
        if($('#virtual-meetings-helper').length > 0)
        {
            var virtualMeetingsHelper = angular.element($('#virtual-meetings-helper')).scope();
            instructions = virtualMeetingsHelper.currentConf;
            instructions.event_instructions = window.threadComputedData.call_instructions.event_instructions;
        }

        return instructions;
    };

    window.getInfoPanelAttendeesWithoutAssistants = function(){
        var contacts = angular.element($('#attendeesCtrl')).scope();

        return contacts.getAttendeesWithoutAssistant();
    };

    // This is used because in sendForm method, Jquery will try to serialize the Attendee Class (including its methods) which will result in an exception being thrown because it will try to serialize the instantiate method without any params
    window.getInfoPanelAttendeesForSendForm = function() {
      return _.map(window.getInfoPanelAttendees(), function(attendee) {
        return {
          accountEmail: attendee.accountEmail,
          guid: attendee.guid,
          email: attendee.email,
          firstName: attendee.firstName,
          lastName: attendee.lastName,
          name: attendee.name,
          usageName: attendee.computeUsageName(),
          gender: attendee.gender,
          isAssistant: attendee.isAssistant,
          assisted: attendee.assisted,
          assistedBy: attendee.assistedBy,
          company: attendee.company,
          timezone: attendee.timezone,
          landline: attendee.landline,
          mobile: attendee.mobile,
          skypeId: attendee.skypeId,
          confCallInstructions: attendee.confCallInstructions,
          isPresent: attendee.isPresent,
          isClient: attendee.isClient,
          isThreadOwner: attendee.isThreadOwner,
          needAIConfirmation: attendee.needAIConfirmation,
          aIHasBeenConfirmed: attendee.aIHasBeenConfirmed,
          companyUpdated: attendee.companyUpdated
        }
      })
    };

    window.getInfoPanelAttendees = function() {
        var contacts = angular.element($('#attendeesCtrl')).scope();
        var attendees = contacts.attendees.slice();
        // We save every contact on the thread even those who will not attend
      _.each(attendees, function(attendee) {
        attendee.companyUpdated = attendee.companyAI && attendee.companyAI != attendee.company;
      });

      return attendees;
    };

    window.presentAttendees = function() {
        return _.filter(window.getInfoPanelAttendees(), function(attendee) {
            return attendee.isPresent;
        });
    };

    window.getPresentAttendeesWithMissingInfos = function() {
        var scope = $('#attendeesCtrl').scope();
        var attendees = [];

        if(scope){
            attendees = scope.getAttendeesWithMissingInfos(scope.getAttendeesOnPresence(true));
        }

        return attendees;
    };
</script>

<%= render partial: "AI/partials/manager" %>
<%= render partial: "messages_threads/partials/angular_utilities" %>

<div class="messages-thread-info-panel scrollable">

  <div class="message-container"></div>

  <!--<div id="thread-header-other-entries-container">-->
    <!--<div class="time-slots-to-suggest-list-container" ng-controller="datesSuggestionsManager as datesSuggestionsMng">-->
      <!--<div class="time-slots-to-suggest-list">-->
        <!--<div class="time-slots-to-suggest-title">Dates sélectionnées</div>-->
        <!--<div class="time-slots-to-suggest-timezone">(Europe/Paris)</div>-->
        <!--<div class="btn btn-sm btn-block time-slot-to-suggest" ng-class="suggestion.isOutBound ? 'btn-danger' : 'btn-primary'" ng-repeat="suggestion in timeSlotsSuggestions">-->
          <!--{{suggestion.date}}-->
        <!--</div>-->
      <!--</div>-->
    <!--</div>-->
  <!--</div>-->

  <%= render "julie_actions/partials/dates_manager" %>

  <div id='selected-suggested-dates'></div>

  <%= render partial: "messages_threads/waiting_for_others_panel", locals: {message: @message} %>

  <%= render partial: "messages_threads/client_agreement_panel", locals: {messages_thread: messages_thread, classification: local_assigns[:classification]} %>

  <%= render partial: "messages_threads/attendees_are_noticed_panel", locals: {messages_thread: messages_thread, classification: local_assigns[:classification]} %>

  <div class="created-event-panel"></div>

  <%= render partial: "messages_threads/create_event_panel", locals: {messages_thread: messages_thread, julie_action: local_assigns[:julie_action]} %>


  <div class="only-locale-panel">
    <div class="data-entry">
      <div class="data-entry-name"><%= I18n.t("info_box.locale") %></div>
      <div class="semi-data-entry">
        <%= radio_button_tag :locale_only, "fr", (messages_thread.computed_data[:locale] != "en") %> <%= I18n.t("info_box.french") %>
      </div>
      <div class="semi-data-entry">
        <%= radio_button_tag :locale_only, "en", (messages_thread.computed_data[:locale] == "en") %> <%= I18n.t("info_box.english") %>
      </div>
      <br>
      <div class="locale-discrepancy-message"><span id="locale_discrepancy_sprite"></span><span id="locale_discrepancy_text"></span></div>
      <br>
      <button class="btn btn-block btn-success validate-locale-button" data-tracking-id="Click_on_validate_language_only"><%= I18n.t("common.validate") %></button>
    </div>
  </div>

  <div class="classic-info-panel">

    <%= render partial: "messages_threads/client_account_tiles" %>

    <% if @messages_thread.sent_to_admin %>
        <div class="to-founders-message-div">
          <%= (@messages_thread.operator_actions_groups.sort_by(&:created_at).select{|oag| oag.label == OperatorActionsGroup::LABEL_SEND_TO_SUPPORT}.last.try(:operator_actions) || []).select{|oa| oa.nature == OperatorAction::NATURE_SEND_TO_SUPPORT}.first.try(:message) %>
        </div>
    <% end %>


    <div class="data">
      <div class="data-entry linear-form-entry locale-selection">
        <div class="data-entry">
          <div class="data-entry-name"><%= I18n.t("info_box.ticket_notes") %></div>
          <%= text_area_tag :constraints, messages_thread.computed_data[:constraints],
                            class: "data-entry form-control constraints" %>
        </div>

        <div class="data-entry-name"><%= I18n.t("info_box.locale") %></div>
        <div class="semi-data-entry">
          <%= radio_button_tag :locale, "fr", (messages_thread.computed_data[:locale] != "en"), {class: 'locale-radio'} %> <%= I18n.t("info_box.french") %>
        </div>
        <div class="semi-data-entry">
          <%= radio_button_tag :locale, "en", (messages_thread.computed_data[:locale] == "en"), {class: 'locale-radio'} %> <%= I18n.t("info_box.english") %>
        </div>
        <div class="locale-discrepancy-message"><span id="locale_discrepancy_sprite"></span><span id="locale_discrepancy_text"></span></div>
        <div class="validate-linear-form-entry-button btn btn-success btn-sm validate-locale" data-tracking-event="Click_on_validate_language"><%= I18n.t("common.validate") %></div>
      </div>

      <div class="data-entry linear-form-entry language-level-selection">
        <div class="data-entry-name"><%= I18n.t("info_box.language_level.title") %></div>
        <div class="semi-data-entry">
          <%= radio_button_tag :language_level, "normal", (messages_thread.computed_data[:language_level] != 'soutenu'), {class: 'locale-radio', disabled: messages_thread.account.language_level == 'soutenu'} %> <%= I18n.t("info_box.language_level.normal") %>
        </div>
        <div class="semi-data-entry">
          <%= radio_button_tag :language_level, "soutenu", (messages_thread.computed_data[:language_level] == 'soutenu'), {class: 'locale-radio', disabled: messages_thread.account.language_level == 'soutenu'} %> <%= I18n.t("info_box.language_level.soutenu") %>
        </div>

        <div class="validate-linear-form-entry-button btn btn-success btn-sm" data-tracking-event="Click_on_select_language"><%= I18n.t("common.validate") %></div>
      </div>

      <div class="data-entry linear-form-entry appointment-type-selects" data-entry-name="appointmentType">
        <% messages_thread_account_appointments = @messages_thread.account.appointments %>
        <% selectOption = Struct.new(:id, :name)%>
        <% messages_thread_account_appointments_family_kinds = messages_thread_account_appointments.map{|app| app['appointment_kind_hash']['family_kind']}.uniq.map{|family_kind| selectOption.new(family_kind, family_kind) }.sort_by{|option| option.name} %>
        <% messages_thread_account_appointments_labels = messages_thread_account_appointments.map{|app| selectOption.new(app['label'], app['label']) } %>
        <div class="data-entry-name"><%= I18n.t("info_box.appointment_type") %></div>
        <%= select_tag :appointment_family_nature, options_from_collection_for_select(messages_thread_account_appointments_family_kinds, "id", "name"), class: "data-entry form-control" %>
        <div class="data-entry-name"><%= I18n.t("info_box.computed_appointment_type") %></div>
        <%= select_tag :appointment_nature, options_from_collection_for_select(messages_thread_account_appointments_labels, "id", "name"), class: "data-entry form-control" %>
      </div>

      <div class="data-entry linear-form-entry" data-entry-name="timezone">
        <div class="data-entry-name"><%= messages_thread.computed_data[:is_virtual_appointment] ? I18n.t("info_box.timezone_for_virtual") : I18n.t("info_box.timezone_for_physical") %></div>
        <%= text_field_tag :timezone, messages_thread.computed_data[:timezone], class: "data-entry form-control" %>
        <div class="validate-linear-form-entry-button btn btn-success btn-sm" data-tracking-event="Click_on_validate_appointment_type"><%= I18n.t("common.validate") %></div>

        <div class="different-timezone-warner">
          <div class="warning">
            <%= I18n.t("info_box.warning_different_timezones") %>
          </div>
          <div class="forbidden">
              <%= I18n.t("info_box.forbidden_different_timezones") %>
          </div>
        </div>
      </div>

      <%= render partial: "messages_threads/partials/attendees", locals: {messages_thread: messages_thread} %>

      <div class="data-entry linear-form-entry">
        <div class="data-entry-name"><%= I18n.t("info_box.time_constraints") %></div>
        <div class="constraint-tiles-container">

        </div>
        <div class="add-constraint-button btn btn-primary btn-sm btn-block">Add constraint</div>

        <div class="validate-linear-form-entry-button btn btn-success btn-sm" data-tracking-event="Click_on_validate_constraints"><%= I18n.t("common.validate") %></div>
      </div>

      <div class="data-entry linear-form-entry">
        <div class="data-entry-name"><%= I18n.t("info_box.summary") %></div>
        <%= text_field_tag :summary, messages_thread.computed_data[:summary], class: "data-entry form-control" %>
        <div class="title-preferences-checkboxes">
          <span>
            <%= check_box_tag 'title_preferences[companies_and_names]', 'companies_and_names', messages_thread.computed_data[:title_preference] == 'companies_and_names', {class: 'title-preferences-checkbox'} %>
            Names
          </span>

          <span>
            <%= check_box_tag 'title_preferences[email_subject]', 'email_subject', messages_thread.computed_data[:title_preference] == 'email_subject', {class: 'title-preferences-checkbox'} %>
            Subject
          </span>

          <span>
            <%= check_box_tag 'title_preferences[custom]', 'custom', messages_thread.computed_data[:title_preference] == 'custom', {class: 'title-preferences-checkbox'} %>
            Custom
          </span>
        </div>

        <div class="validate-linear-form-entry-button btn btn-success btn-sm" data-tracking-event="Click_on_validate_title"><%= I18n.t("common.validate") %></div>
      </div>

      <div class="data-entry linear-form-entry">
        <div class="data-entry-name"><%= I18n.t("info_box.duration") %></div>
        <%= text_field_tag :duration, messages_thread.computed_data[:duration], class: "data-entry form-control" %>
        <div class="validate-linear-form-entry-button btn btn-success btn-sm" data-tracking-event="Click_on_validate_duration"><%= I18n.t("common.validate") %></div>
      </div>

      <div class="data-entry linear-form-entry">
        <div class="ai-suggested-location-container"></div>

        <div class="location-part-container">
            <div class="data-entry-name"><%= I18n.t("info_box.location") %></div>
            <%= select_tag :location_nature, "", class: "data-entry form-control" %>
            <%= text_field_tag :location, messages_thread.computed_data[:location], class: "data-entry form-control" %>
            <%= hidden_field_tag :location_coordinates %>

            <%= render partial: "messages_threads/partials/restaurant_booking_manager", locals: {messages_thread: messages_thread} %>
        </div>

        <div class="number-to-call-part-container">
            <%= render partial: "messages_threads/partials/virtual_meetings_helper", locals: {messages_thread: messages_thread} %>
        </div>
            <%= render partial: "messages_threads/partials/meeting_rooms_manager", locals: {messages_thread: messages_thread} %>
        <div class="validate-linear-form-entry-button btn btn-success btn-sm" id="location_instructions_tracking_btn" data-tracking-event="Click_on_validate_location"><%= I18n.t("common.validate") %></div>
      </div>

      <div class="data-entry linear-form-entry">
        <div class="data-entry-name"><%= I18n.t("info_box.private_event") %></div>
        <div class="data-entry-value">
          <%= check_box_tag :private, "", messages_thread.computed_data[:private] %>
          <%= I18n.t("info_box.private_event") %>
        </div>
        <div class="validate-linear-form-entry-button btn btn-success btn-sm" data-tracking-event="Click_on_validate_private"><%= I18n.t("common.validate") %></div>
      </div>

      <div class="data-entry linear-form-entry">
        <div class="data-entry-name"><%= I18n.t("info_box.notes") %></div>
        <%= text_area_tag :notes, messages_thread.computed_data[:notes], class: "data-entry form-control" %>
        <%= text_area_tag :other_notes, messages_thread.computed_data[:other_notes], class: "data-entry form-control" %>
        <div class="validate-linear-form-entry-button btn btn-success btn-sm" data-tracking-event="Click_on_validate_notes"><%= I18n.t("common.validate") %></div>
      </div>

      <div class="save-info-container">
        <br>
        <br>
        <button class="btn btn-block btn-success submit-classification"><%= I18n.t("common.save") %></button>
        <div class="ai-thinking-loader">
          <span><%= image_tag 'ai_processing_loader.gif', {class: 'ai-thinking-gif'} %></span>
          <span class="ai-thinking-text">Jul.IA réfléchie</span>
        </div>
      </div>

    </div>
  </div>

  <div class="add-preference-panel">
      <div class="add-preference-data-entry">
        <div class="data-entry-name">Note a preference</div>
        <%= text_area_tag :preference_to_add, messages_thread.account.awaiting_current_notes %>
      </div>
    <button class="btn btn-block btn-success submit-add-preference"><%= I18n.t("common.save") %></button>
  </div>

</div>