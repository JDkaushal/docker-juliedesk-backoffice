<script>
    $(function () {
        var freeReplyDoneBtn = $(".free-reply-done-button");
        var nothingToDoBtn = $(".nothing-to-do-button");
        var finishBtn = $(".finish-buttons-finish-button");
        var finishCancelBtn = $(".finish-buttons-cancel-button");
        var newThreadStatusSelect = $(".new-thread-status-select");
        var oldThreadStatusSelect = $(".old-thread-status-select");
        var finishBtns = $(".finish-buttons");

        $(".new-thread-status-select, .old-thread-status-select").each(function () {
            var $selector = $(this);
            $selector.change(function () {
                setThreadStatusSelectColor($selector);
                finishBtn.prop("disabled", false);
            });
            setThreadStatusSelectColor($selector);
        });

        $("#archive-form").submit(function() {
            if($(".new-thread-status-select:visible").length > 0 && $(".new-thread-status-select:visible").val() == null) {
                alert("You must set a status");
                return false;
            }
            return true;
        });

        finishBtn.click(function() {
            var oldStatus = oldThreadStatusSelect.val();

            if(oldStatus == '')
                oldStatus = undefined;

            trackActionV2('Click_on_finish', {
                follow_up_date: $('#follow_up_reminder_date').val(),
                follow_up_edit: reminderHasBeenEdited(),
                new_status: newThreadStatusSelect.val(),
                old_status: oldStatus,
                ux_element: 'backoffice'
            });
        });

        freeReplyDoneBtn.click(function(e) {
            trackActionV2('Click_on_done', {ux_element: 'backoffice'});
        });

        if(window.lastEmailStatus == "from_me") {

            finishCancelBtn.hide();
            //$(".new-thread-status-label").hide();
            //$(".new-thread-status-select").hide();

            freeReplyDoneBtn.show();
            nothingToDoBtn.hide();

            freeReplyDoneBtn.click(function() {
                finishBtns.show();
            });
        }
        else if(window.lastEmailStatus == "from_me_free_reply") {
            freeReplyDoneBtn.show();
            nothingToDoBtn.hide();

            if(newThreadStatusSelect.val() == null) {
                finishBtn.prop("disabled", true);
            }

            freeReplyDoneBtn.click(function() {
                finishBtns.show();
            });
        }
        else {
            $(".old-thread-status-label").show();
            freeReplyDoneBtn.hide();
            nothingToDoBtn.show();

            if(newThreadStatusSelect.val() == null) {
                finishBtn.prop("disabled", true);
            }

            nothingToDoBtn.click(function() {
                finishBtns.show();
                trackActionV2('Click_on_nothing_to_do', {ux_element: 'backoffice'});
            });
        }
        finishCancelBtn.click(function() {
            finishBtns.hide();
        });
    });

    setThreadStatusSelectColor = function ($selector) {
        var color = getColorForThreadStatus($selector.val());
        if(!color) {
            color = "white";
        }
        $selector.css({backgroundColor: color});
    };

    getColorForThreadStatus = function (threadStatus) {
        return {
            scheduling_waiting_for_client: "rgba(219, 123, 4, 0.62)",
            scheduling_waiting_for_contact: "rgba(219, 123, 4, 0.62)",
            scheduled: "rgba(46, 192, 148, 0.55)",
            scheduling_aborted: "rgba(221, 0, 0, 0.42)",
            does_not_concern_client: "#ccc",
            events_creation: "#ccc",
            handled_by_client: "#ccc",
            other: "white"
        }[threadStatus];
    };
    window.lastEmailStatus = "<%= local_assigns[:messages_thread].last_email_status %>";

</script>
<div class="header jd-global-header full <%= ENV['SPECIFIC_TENANT'] ? "#{ENV['SPECIFIC_TENANT']}-skin" : nil %>">

  <%= link_to "JD", "/", class: "home-link" %>

  <%= audio_tag "ding.mp3", id: "tada-sound", preload: "auto" %>

  <span class="messages-thread-sumup"><%= local_assigns[:messages_thread].account_email %>
    - <%= local_assigns[:messages_thread].subject %></span>

  <%= render 'common/staging/configuration'  %>

  <div class="finish-buttons">
    <span class="old-thread-status-label">Old status:</span>

    <select class="old-thread-status-select" disabled>
      <option value="">No status</option>
      <% MessageClassification.all_thread_statuses.each do |thread_status| %>
          <option value="<%= thread_status %>" <%= (thread_status == local_assigns[:messages_thread].current_status)?"selected":"" %>><%= I18n.t("thread_statuses.#{thread_status}") %></option>
      <% end %>
    </select>

    <span class="new-thread-status-label">New status:</span>
    <%= form_tag archive_messages_thread_path, id: "archive-form" do %>
        <select value="" name="thread_status" class="new-thread-status-select">
          <option selected disabled>Please select a status...</option>
          <% MessageClassification.all_thread_statuses.each do |thread_status| %>
              <option value="<%= thread_status %>" <%= (thread_status == local_assigns[:messages_thread].suggested_current_status)?"selected":"" %>><%= I18n.t("thread_statuses.#{thread_status}") %></option>
          <% end %>
        </select>

        <%= render partial: 'common/messages_thread_reminder_widget', locals: {messages_thread: local_assigns[:messages_thread]} %>
        <%= hidden_field_tag :current_messages_ids, @messages_thread.messages.map{|m| m.server_message['id'] }.join(',') %>

        <%= submit_tag "Finish", 'disabled_with' => false, class: "finish-buttons-finish-button" %>
        <div class="finish-buttons-cancel-button">x</div>
    <% end %>
  </div>

  <div class="done-buttons">
    <div class="done-button send-to-support">Send to admin</div>
    <div class="done-button done free-reply-done-button">Done</div>
    <div class="done-button nothing-expected nothing-to-do-button">Nothing to do</div>
  </div>
</div>