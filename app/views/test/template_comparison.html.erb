<%= javascript_include_tag 'application' %>
<%= javascript_include_tag 'angular_dates_manager_appp'%>

<%= javascript_include_tag 'compare_texts'%>

<script>





  var getTemplateViaService = function(cleanContext, callback) {

    var dataForService = {
      client_names: cleanContext.client_names,
      dates: cleanContext.dates,
      timezones: cleanContext.timezones,
      default_timezone: cleanContext.default_timezone,
      locale: cleanContext.locale,
      is_virtual: cleanContext.is_virtual,
      attendees: cleanContext.attendees,
      appointment_in_email: cleanContext.appointment_title_in_email,
      location_in_email: cleanContext.address_in_email,
      should_ask_location: cleanContext.should_ask_location,
      missing_contact_info: cleanContext.missing_contact_info
    };

    $.ajax({
      type : "POST",
      url :  "http://template-generator.juliedesk.net/api/v1/templates/suggest_dates",
      //url :  "http://localhost:9393/api/v1/templates/suggest_dates",
      dataType: 'json',
      contentType: 'application/json',
      data : JSON.stringify(dataForService),
      success: function(response) {
        callback(response.data, dataForService);
      }
    });
  };

  var backofficeContextFromCleanContext = function(cleanContext) {
    window.threadComputedData = {
      timezone: cleanContext.timezones[0],
      is_virtual_appointment: cleanContext.is_virtual,
      locale: cleanContext.locale
    };
    window.timeSlotsToSuggest = cleanContext.dates;
    var datesSuggestionsManager = $('#dates-suggestion-manager').scope();

    datesSuggestionsManager.attendeesService.setup();
    angular.element("#attendeesCtrl").scope().getUsedTimezones = function() {
      return cleanContext.timezones;
    };


    //datesSuggestionsManager.allUsedTimezones = cleanContext.timezones;

    datesSuggestionsManager.setSuggestions();

    var timeSlotsToSuggest = datesSuggestionsManager.getTimeSlotsSuggestionsForTemplate();


    window.attendeesApp = angular.element($('#attendeesCtrl')).scope();

    var unassistedAttendees = [];
    var assistedAttendees = [];
    _.each(cleanContext.attendees, function(attendee) {
      if(attendee.assisted_by_name) {
        assistedAttendees.push(attendee.name);
      }
      else {
        unassistedAttendees.push(attendee.name);
      }
    });
    var data = {
      action: "suggest_dates",
      client_agreement: true,
      client: cleanContext.client_names.slice(0, 1),
      other_clients: cleanContext.client_names.slice(1, cleanContext.client_names.length),
      timeSlotsToSuggest: timeSlotsToSuggest,
      usedTimezones: datesSuggestionsManager.getUsedTimezones(),
      threadMainTimezone: cleanContext.timezones[0],
      timezoneId: cleanContext.timezones[0],
      defaultTimezoneId: cleanContext.default_timezone,
      appointment: {
        title_in_email: cleanContext.appointment_title_in_email,
        appointment_kind_hash: {
          is_virtual: cleanContext.is_virtual
        }
      },
      address: {
        address_in_template: cleanContext.address_in_email
      },
      assistedAttendees: assistedAttendees,
      unassistedAttendees: unassistedAttendees,
      locale: cleanContext.locale
    };

    //delete window.threadComputedData;
    //delete window.timeSlotsToSuggest;
    return data;
  };

  var allTemplateReady = function() {
    var [backofficeAnnotatedTemplate,serviceAnnotatedTemplate] = (compareTexts($(".backoffice-generated-template").html(), $(".service-generated-template").html()));
    $(".backoffice-generated-template").html(backofficeAnnotatedTemplate);
    $(".service-generated-template").html(serviceAnnotatedTemplate);
  };

  var templateReady = function(mode) {
    if(mode == 'backoffice') {
      if(window.serviceReady) {
        allTemplateReady();
      }
      else {
        window.backofficeReady = true;
      }
    }
    else if(mode == 'service') {
      if(window.backofficeReady) {
        allTemplateReady();
      }
      else {
        window.serviceReady = true;
      }
    }
  };

  var isolatedApp = angular.module("isolated-app", []);
  isolatedApp.controller("isolated-controller", ['$scope', function ($scope) {}]);
  angular.element(document).ready(function () {
    angular.bootstrap(document.getElementById("attendeesCtrl"),['isolated-app']);
  });


  var backofficeStuffToAppend = function(params) {
    var unassistedAttendees = [];
    var assistedAttendees = [];
    _.each(params.attendees, function(attendee) {
      if(attendee.assisted_by_name) {
        assistedAttendees.push(attendee.name);
      }
      else {
        unassistedAttendees.push(attendee.name);
      }
    });

    var result = "";

    if(( params.appointment_kind == 'call' || params.appointment_kind == 'skype' ) && !params.call_instructions_set){
      var messageParams = {
        action: 'send_call_instructions',
        callInstructions: {
          target: "",
          details: "",
          targetInfos: {
            name: ""
          },
          support: ""
        },
        locale: threadComputedData.locale,
        askCallInstructions: params.must_ask_call_instructions,
        askingEarly: true,
        assistedAttendees: assistedAttendees,
        unassistedAttendees: unassistedAttendees
      };

      if(messageParams.askCallInstructions) {
        result += "\n" + window.generateEmailTemplate(messageParams);
      }
    }

    if(params.is_first_date_suggestion && (params.appointment_kind == 'skype' || params.appointment_kind == 'call')) {
      var missingInfosMessage = "";/*attendeesMng.checkMissingInformations(
       {
       redundantCourtesy: true,
       sticky: true,
       askingEarly: true,
       ask_early_skype: params.appointment_kind == 'skype',
       ask_early_call: params.appointment_family_kind == 'call'
       });*/
      if(missingInfosMessage != ''){
        result += missingInfosMessage;
      }
    }
    return result;
  };

  var templateTesterApp = angular.module("templateTesterApp", []);
  templateTesterApp.controller("templateTesterController", ['$scope', '$http', function($scope, $http) {

    $scope.clients = [];
    $scope.attendees = [];
    $scope.dates = [];
    $scope.isVirtual = true;
    $scope.defaultTimezone = "Europe/Paris";
    $scope.timezones = [];
    $scope.locale = "en";
    $scope.missingContactInfo = null;
    $scope.locationInEmail = {
      en: "at the office",
      fr: "au bureau"
    };
    $scope.appointmentInEmail = {
      en: "a coffee",
      fr: "un cafÃ©"
    };

    $scope.addAttendee = function() {
      $scope.attendees.push({
        name: "Bill",
        assisted_by_name: "Amy"
      });
      $scope.refreshTemplates();
    };
    $scope.removeAttendee = function(index) {
      $scope.attendees.splice( index, 1 );
      $scope.refreshTemplates();
    };

    $scope.addClient = function() {
      $scope.clients.push({name: "John"});
      $scope.refreshTemplates();
    };
    $scope.removeClient = function(index) {
      if($scope.clients.length > 1) {
        $scope.clients.splice( index, 1 );
        $scope.refreshTemplates();
      }
    };
    $scope.addDate = function(index) {
      $scope.dates.push({date: "2016-01-01T12:00"});
      $scope.refreshTemplates();
    };
    $scope.removeDate = function(index) {
      if($scope.dates.length > 1) {
        $scope.dates.splice( index, 1 );
        $scope.refreshTemplates();
      }
    };

    $scope.addTimezone = function(index) {
      $scope.timezones.push({timezone: "Europe/Paris"});
      $scope.refreshTemplates();
    };
    $scope.removeTimezone = function(index) {
      if($scope.timezones.length > 1) {
        $scope.timezones.splice( index, 1 );
        $scope.refreshTemplates();
      }
    };

    $scope.cleanContext = function() {
      return {
        client_names: _.map($scope.clients, "name"),
        dates: _.map($scope.dates, function(dateHash) {
          return moment.tz(dateHash.date, "utc").format();
        }),
        timezones: _.map($scope.timezones, "timezone"),
        default_timezone: $scope.defaultTimezone,
        appointment_title_in_email: $scope.appointmentInEmail,
        is_virtual: $scope.isVirtual,
        address_in_email: $scope.locationInEmail,
        attendees: $scope.attendees,
        locale: $scope.locale,
        should_ask_location: $scope.shouldAskLocation,
        missing_contact_info: $scope.missingContactInfo
      };
    };

    // Watchers

    $scope.$watch("shouldAskLocation", function(oldValue, newValue) {
      $scope.refreshTemplates();
    });

    $scope.$watch("missingContactInfo", function(oldValue, newValue) {
      $scope.refreshTemplates();
    });

    $scope.$watch("isVirtual", function(oldValue, newValue) {
      $scope.refreshTemplates();
    });

    $scope.$watch("locale", function(oldValue, newValue) {
      $scope.refreshTemplates();
    });

    $scope.refreshTemplates = function() {
      var $template = $(".template");

      /*angular.element(document).ready(function () {
       var backofficeContext = backofficeContextFromCleanContext($scope.cleanContext());
       var backofficeGeneratedTemplate = window.generateEmailTemplate(backofficeContext);


       backofficeGeneratedTemplate += backofficeStuffToAppend({
       appointment_kind: "skype",
       appointment_family_kind: "call",
       is_first_date_suggestion: true,
       call_instructions_set: false,
       must_ask_call_instructions: true,
       attendees: $scope.cleanContext().attendees
       });


       $template.find(".backoffice-generated-template").html(backofficeGeneratedTemplate);

       templateReady('backoffice');
       });*/

      getTemplateViaService($scope.cleanContext(), function(serviceGeneratedTemplate, dataForService) {
        $template.find(".service-generated-template").html(serviceGeneratedTemplate);
        //$template.find(".template-context").html(JSON.stringify(dataForService, null, 2));

        templateReady('service');
      });
    };

    $scope.addClient();
    $scope.addAttendee();
    $scope.addDate();
    $scope.addTimezone();
  }]);
  angular.element(document).ready(function () {
    angular.bootstrap(document.getElementById("templateTesterContainer"),['templateTesterApp']);
  });

</script>


<style>
  span.error {
    background: #ffdca5;
  }
  body {
    width: 1200px;
    margin: 0 auto;
  }
  .template {
    background: #eee;
    padding: 20px;
    white-space: pre-wrap;
  }
  #template {
    white-space: pre-wrap;
    margin: 40px 0 0 0;
    padding: 20px;
    background: #eee;
    min-height: 100px;
    border-top: 1px solid #ddd;
  }
  .borderless>tbody>tr>td {
    border-top: none;
  }
  .buttons-bar {
    background: #eee;
    padding: 20px;
    text-align: right;
    border-top: 1px solid #ddd;
    margin: 0 0 40px 0;
  }
  td {
    width: 33%;
  }
</style>

<div id="templateTesterContainer" ng-controller="templateTesterController">

  <table class="table borderless">
    <tr>
      <td>
        <form>
          <label>Clients</label>
          <div class="client-name-container" ng-repeat="client in clients track by $index">
            <div class="form-group">
              <div class="input-group">
                <div class="input-group-addon">Name</div>
                <input ng-model="client.name" class="form-control" ng-change="refreshTemplates()">
                <div class="input-group-addon btn" ng-click="removeClient($index)"><span class="glyphicon glyphicon-remove"></span></div>
              </div>
            </div>


          </div>
          <br>
          <div class="btn btn-sm btn-primary" ng-click="addClient()">add client</div>

          <br>
          <br>

          <label>Attendees</label>
          <div ng-repeat="attendee in attendees track by $index">
            <div class="form-group">
              <div class="input-group">
                <div class="input-group-addon">Name</div>
                <input ng-model="attendee.name" class="form-control" ng-change="refreshTemplates()">
                <div class="input-group-addon">Assisted by</div>
                <input ng-model="attendee.assisted_by_name" class="form-control" ng-change="refreshTemplates()">
                <div class="input-group-addon btn" ng-click="removeAttendee($index)">
							<span class="glyphicon glyphicon-remove">
						</span>
                </div>
              </div>
            </div>


          </div>
          <br>
          <div class="btn btn-sm btn-primary" ng-click="addAttendee()">Add attendee</div>
        </form>
      </td>

      <td class="active">
        <div class="form-group">
          <label>Appointment designation</label>
          <form class="form-inline">
            <input ng-model="appointmentInEmail.en" class="form-control" ng-change="refreshTemplates()">
            <input ng-model="appointmentInEmail.fr" class="form-control" ng-change="refreshTemplates()">
          </form>
        </div>
        <div class="form-group">
          <label>Location designation</label>
          <form class="form-inline">
            <input ng-model="locationInEmail.en" class="form-control" ng-change="refreshTemplates()">
            <input ng-model="locationInEmail.fr" class="form-control" ng-change="refreshTemplates()">
          </form>
        </div>


        <div class="form-group">
          <div class="btn-group" data-toggle="buttons">
            <label class="btn btn-default" ng-class="isVirtual ? '' : 'active btn-success'">
              <input type="radio" ng-model="isVirtual" data-ng-value="false"> Physical
            </label>
            <label class="btn btn-default" ng-class="isVirtual ? 'active btn-success' : ''">
              <input type="radio" ng-model="isVirtual" data-ng-value="true"> Virtual
            </label>
          </div>
        </div>


        <div class="form-group">
          <div class="btn-group" data-toggle="buttons">
            <label class="btn btn-default" ng-class="shouldAskLocation ? 'active btn-success': ''">
              <input type="checkbox" ng-model="shouldAskLocation"> Should ask location
            </label>
          </div>
        </div>

        <div class="form-group">
          <div class="btn-group" data-toggle="buttons">
            <label class="btn btn-default" ng-class="missingContactInfo == 'landline_or_mobile' ? 'active btn-success' : ''">
              <input type="radio" ng-model="missingContactInfo" data-ng-value="'landline_or_mobile'"> Mobile or landline
            </label>
            <label class="btn btn-default" ng-class="missingContactInfo == 'mobile' ? 'active btn-success' : ''">
              <input type="radio" ng-model="missingContactInfo" data-ng-value="'mobile'"> Mobile
            </label>
            <label class="btn btn-default" ng-class="missingContactInfo == 'skype' ? 'active btn-success' : ''">
              <input type="radio" ng-model="missingContactInfo" data-ng-value="'skype'"> Skype
            </label>
            <label class="btn btn-default" ng-class="missingContactInfo == null ? 'active btn-success' : ''">
              <input type="radio" ng-model="missingContactInfo" data-ng-value="null"> None
            </label>
          </div>
        </div>

        <div class="form-group">
          <div class="btn-group" data-toggle="buttons">
            <label class="btn btn-default" ng-class="locale == 'en' ? 'active btn-success' : ''">
              <input type="radio" ng-model="locale" value="en"> EN
            </label>
            <label class="btn btn-default" ng-class="locale == 'fr' ? 'active btn-success' : ''">
              <input type="radio" ng-model="locale" value="fr"> FR
            </label>
          </div>
        </div>
      </td>

      <td>
        <form>
          <label>Dates</label>
          <div class="client-date-container" ng-repeat="date in dates track by $index">
            <div class="form-group">
              <div class="input-group">
                <input ng-model="date.date" class="form-control" ng-change="refreshTemplates()">
                <div class="input-group-addon btn" ng-click="removeDate($index)">
							<span class="glyphicon glyphicon-remove">
						</span>
                </div>
              </div>
            </div>


          </div>
          <div class="btn btn-sm btn-primary" ng-click="addDate()">add date</div>
        </form>

        <br>
        <br>

        <form>
          <label>Timezones</label>
          <div class="form-group">
            <div class="input-group">
              <span class="input-group-addon">Default</span>
              <input ng-model="defaultTimezone" class="form-control" ng-change="refreshTemplates()">
            </div>
          </div>

          <div class="client-date-container" ng-repeat="timezone in timezones track by $index">
            <div class="form-group">
              <div class="input-group">
                <input ng-model="timezone.timezone" class="form-control" ng-change="refreshTemplates()">
                <div class="input-group-addon btn" ng-click="removeTimezone($index)">
                  <span class="glyphicon glyphicon-remove"></span>
                </div>
              </div>
            </div>


          </div>
          <span class="btn btn-sm btn-primary" ng-click="addTimezone()">add timezone</span>
        </form>
      </td>
    </tr>
  </table>



</div>
<!--<h4>Backoffice template</h4>-->
<!--<div class="backoffice-generated-template"></div>-->
<!--<h4>Service template</h4>-->
<div class="template"><div class="service-generated-template"></div></div>

<div id="thread-header-other-entries-container">
  <div id="dates-suggestion-manager" class="time-slots-to-suggest-list-container" ng-controller="datesSuggestionsManager as datesSuggestionsMng" ng-show="displayDatesSuggestionManager"></div>
</div>

<div id="attendeesCtrl" ng-controller="isolated-controller"></div>