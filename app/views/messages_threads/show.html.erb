<script>
    window.processingMessageThreadId = <%= @messages_thread.id %>;

    window.activateCalendarWithParams = function (calendarParams) {
        calendarParams.height = $(".calendar-container").height();
        calendarParams.other_emails = window.otherAccountEmails;
        if(window.threadAccount) {
            calendarParams.default_timezone_id = window.threadAccount.default_timezone_id;
        }
        calendarParams.additional_timezone_ids = [window.threadComputedData.timezone];

        calendarParams.constraintsData = _.groupBy(window.threadComputedData.constraints_data, function (data) {
            return data.attendee_email;
        });

        calendarParams.default_calendar_login_username = window.threadComputedData.calendar_login_username;
        calendarParams.default_calendar_login_type = window.threadComputedData.calendar_login_type;

        window.currentCalendar = new Calendar($(".calendar-container"), calendarParams);
        $(".calendar-container").addClass("visible minimized");
    };

    window.messagesIdsHash = <%== Hash[@messages_thread.messages.map{|m|
         [m.id, m.server_message_id]
    }].to_json %>;

    window.attemptMergeToServerThreadId = function(serverThreadId, messagesThreadId) {
        var messageIdsToSplit = $(".email .checkbox-container input[type=checkbox]:checked").map(function () {
            return window.messagesIdsHash[$(this).val()];
        }).toArray();
        if(messageIdsToSplit.length == 0) {
            alert("Please select at least one message to merge into this thread");
        }
        else {
            if(confirm("This action is irreversible. Are you sure you want to merge?")) {
                $(".merging-global-spinner").show();
                $.post("<%= EmailServer::API_BASE_PATH %>/messages/merge?access_key=<%= EmailServer::API_ACCESS_KEY %>", {
                    message_ids: messageIdsToSplit,
                    messages_thread_id: serverThreadId
                }).success(function(response) {
                    $(".merging-global-spinner").hide();
                    if(_.size(window.messagesIdsHash) == messageIdsToSplit.length) {
                        $.post("/messages_threads/" + window.processingMessageThreadId + "/remove_data").success(function() {
                            window.location = "/messages_threads/" + messagesThreadId;
                        });
                    }
                    else {
                        window.location = window.location.href;
                    }

                }).error(function(response) {
                    alert("Error while merging thread");
                    $(".merging-global-spinner").hide();
                });
            }

            //alert("Attempting to merge messages: " + messageIdsToSplit + " to serverthread id: " + serverThreadId)
        }
    };

    function beginMerging(){
        $(".messages-thread-emails").addClass("merging");
        $(".messages-thread-emails .email").removeClass("extended");
        $(".merging-panel").addClass("merging");
        if($(".email .checkbox-container input[type=checkbox]").length < 2) {
            $(".email .checkbox-container input[type=checkbox]").prop('checked', true);
        }
        window.launchMergingFetch();
    };

    function beginSplitting(){
        $(".messages-thread-emails").addClass("splitting");
        $(".messages-thread-emails .email").removeClass("extended");
    };

    $(function () {

        if(window.threadAccount) {
            window.activateCalendarWithParams({
                mode: "read_only",
                date_times: [],
                email: "<%= @messages_thread.account_email %>",
                duration: <%= @messages_thread.computed_data[:duration] || 60 %>
            });

            $("#show-calendar-button").click(function () {
                $(".calendar-container").removeClass("minimized");
                window.currentCalendar.redrawFullCalendar();
            });
        }
        else {
            $("#show-calendar-button").hide();
        }

        window.startedAt = Date.now();

        window.processingMessageThreadId = <%= @messages_thread.id %>;

        <% if @messages_thread.locked_by_operator %>
            $(".lock-container .operator-name").html("<%= @messages_thread.locked_by_operator.name %>");
        <% end %>

        $(".split-thread-button").click(function () {
            <% if ENV['STAGING_APP'] %>
                if(confirm('You are in a STAGING APP, are you sure you want to continue? It will affect the current thread even in production')){
                    beginSplitting();
                }
            <% else %>
                beginSplitting();
            <% end %>
        });

        $(".merge-into-thread-button").click(function () {
            <% if ENV['STAGING_APP'] %>
                if(confirm('You are in a STAGING APP, are you sure you want to continue? It will affect the current thread even in production')){
                    beginMerging();
                }
            <% else %>
                beginMerging();
            <% end %>
        });

        $(".cancel-split-button").click(function () {
            $(".messages-thread-emails").removeClass("splitting");
        });

        $(".cancel-merge-button").click(function () {
            $(".messages-thread-emails").removeClass("merging");
            $(".merging-panel").removeClass("merging");
        });

        $(".actually-split-button").click(function () {
            var messageIdsToSplit = $(".email .checkbox-container input[type=checkbox]:checked").map(function () {
                return $(this).val();
            }).toArray();
            var $button = $(this);
            $button.attr('disabled', true);
            $.ajax({
                url: "<%= split_messages_thread_path(@messages_thread) %>",
                type: "post",
                data: {
                    message_ids: messageIdsToSplit
                },
                error: function (e) {
                    $button.removeAttr('disabled');
                },
                success: function (e) {
                    $button.removeAttr('disabled');
                    window.location = window.location;
                }
            });
        });
    });
</script>
<%= render partial: "common/thread_header", locals: {messages_thread: @messages_thread} %>
<div class="merging-global-spinner">Merging....</div>
<div class="fixed-columns">


  <div class="left-column">

    <div class="header jd-global-header"></div>

    <div class="calendar-in-thread-details-container">
        <%= render template: "calendar/calendar" %>
    </div>

    <div class="julie-action-fantom"></div>

    <div class="messages-thread-emails">
      <%= render partial: "common/send_to_support", locals: {messages_thread: @messages_thread} %>

      <% if @messages_thread.should_follow_up %>
          <br/>
          <div class="follow-up-instruction">Follow-up: <%= @messages_thread.follow_up_instruction %></div>
      <% end %>

      <div class="messages-thread-subject">
        <%= @messages_thread.subject %>
        <% (@messages_thread.server_thread['labels'] || []).each do |label| %>
            <span class="messages-thread-label"><%= label %></span>
        <% end %>
      </div>



      <div class="split-buttons-container">
        <div class="btn btn-default cancel-split-button"><%= I18n.t("common.cancel") %></div>
        <div class="btn btn-warning actually-split-button"><%= I18n.t("common.split") %></div>
      </div>

      <div class="merge-buttons-container">
        <div class="btn btn-default cancel-merge-button"><%= I18n.t("common.cancel") %></div>
      </div>

      <div class="thread-buttons">
          <div id="show-calendar-button" class="thread-button btn btn-sm btn-default"><%= I18n.t("actions.show_calendar") %></div>
          <% if session[:privilege] == Operator::PRIVILEGE_ADMIN ||
                  session[:privilege] == Operator::PRIVILEGE_SUPER_OPERATOR_LEVEL_1 ||
                  session[:privilege] == Operator::PRIVILEGE_SUPER_OPERATOR_LEVEL_2 %>
            <div class="merge-into-thread-button thread-button"><%= I18n.t("common.merge") %></div>
          <% end %>
          <div class="split-thread-button thread-button"><%= I18n.t("common.split") %></div>

          <% button_to I18n.t("common.archive"), archive_messages_thread_path(id: @messages_thread.id), class: "archive-button" %>
      </div>

      <% operator_actions_groups = @messages_thread.operator_actions_groups %>

      <% operator_actions_groups_without_emails = operator_actions_groups.select{|operator_actions_group|
        operator_actions_group.label == OperatorActionsGroup::LABEL_ARCHIVE ||
                !(operator_actions_group.target_type == JulieAction.to_s && operator_actions_group.target && operator_actions_group.target.server_message_id.present?)
      }
      %>
      <% items = (@messages_thread.messages + operator_actions_groups_without_emails).sort_by do |item|
        if item.class == Message
          item.received_at
        else
          item.initiated_at
        end
      end %>

      <% items.each do |item| %>
          <% if item.class == Message %>
              <% message = item %>
              <%= render partial: "messages_threads/email", locals: {
                      message: message,
                      timezone: @messages_thread.computed_data[:timezone],
                      actions_available: true,
                      expend: message.received_at == @messages_thread.messages.map(&:received_at).min,
                      last: message == items.select{|i| i.class == Message}.last,
                      no_account: @messages_thread.account_email.nil?,
                      operator_actions_groups: operator_actions_groups,
                      client_emails: @client_emails,
                      julie_emails: @julie_emails
                  } %>
          <% elsif item.class == OperatorActionsGroup %>
              <%= render partial: "messages_threads/fake_email", locals: {operator_actions_group: item} %>
          <% end %>
      <% end %>
    </div>

    <% unread_emails_count = @messages_thread.messages.select{|m| !m.server_message['read']}.length %>
    <% if unread_emails_count > 1 %>
        <div class="unread-emails">
          <%= I18n.t("show.x_unread_emails", count: unread_emails_count) %>
        </div>
    <% end %>

  </div>


</div>

<%= render partial: "messages_threads/merging_panel", locals: {messages_thread: @messages_thread} %>

<% if @messages_thread.account %>
    <%= render partial: "messages_threads/info_panel", locals: {
            messages_thread: @messages_thread,
            accounts_cache_light: @accounts_cache_light
        } %>
<% else %>
    <%= render partial: "messages_threads/info_panel_no_account", locals: {
                                                                        messages_thread: @messages_thread,
                                                                        accounts_cache_light: @accounts_cache_light
                                                                } %>
<% end %>
