<script>
    window.leftColumnMessage = "Create event";

    window.createdEvents = [];
    window.updatedEvents = [];
    window.deletedEvents = [];

    // Deactivated because window.currentHtmlMessage has 'token unexpected error'
    //window.currentHtmlMessage = '< @message.server_message['parsed_html'].gsub("\n", '').gsub("\r", '') %>';
    window.currentTicketInfos = {};

    var $container;

    window.afterReplyBoxInitCallback = function(){
        window.initializeEmailLanguageSelector(refreshReplyText);
        window.setReplyMessage("");
    };

    window.drawCalendarCallback = function(){
        window.activateCalendarWithParams({
            mode: "create_events",
            date_times: [],
            email: "<%= @message.messages_thread.account_email %>",
            duration: <%= @message.messages_thread.computed_data[:duration] || 60 %>,
            pickEventCallback: function(e) {

                var beingAddedEventTile =_.find(window.newEventEventTiles, function(eventTile) {
                    return eventTile.isEditing();
                });
                if(beingAddedEventTile) {

                }
                else {
                    $container.find(".new-event-tiles-container").prepend($("<div>").addClass("new-event-tile-container"));
                    beingAddedEventTile = generateNewEventEventTile($container.find(".new-event-tile-container:eq(0)"));
                    window.newEventEventTiles.push(beingAddedEventTile);
                    redrawNewEventEventTiles();
                }
                beingAddedEventTile.setStartAndEnd(e.start, e.end);
            }
        });

        $(".calendar-container").addClass("minimized");

        $container.html($("<div>").addClass("new-events-container"));
        var $ticketModuleNode = $('<div id="ticket_module"></div>').hide();

        $ticketModuleNode.append($('<span class="sprite"></span><span class="pre-button">train ticket ?</span><span class="btn ticket-parsing-btn">Extract ticket</span>'));

        $container.find(".new-events-container").append($ticketModuleNode);
        $container.find(".new-events-container").append($("<div>").addClass("btn btn-success create-new-event-tile-button").html("Create new event"));
        $container.find(".new-events-container").append($("<div>").addClass("new-event-tiles-container"));
        window.newEventEventTiles = [];

        var alreadyCreatedEvents = <%== @messages_thread.created_events_data.to_json %>;

        _.each(alreadyCreatedEvents, function(eventData) {
            $container.find(".new-event-tiles-container").append($("<div>").addClass("new-event-tile-container"));
            window.newEventEventTiles.push(generateNewEventEventTile($container.find(".new-event-tile-container").last(), {
                eventId: eventData.id,
                eventUrl: eventData.event_url,
                calendarId: eventData.calendar_id,
                calendarLoginUsername: eventData.calendar_login_username,
                minimized: true
            }));
        });

        $container.find(".create-new-event-tile-button").click(function() {
            $container.find(".new-event-tiles-container").prepend($("<div>").addClass("new-event-tile-container"));
            window.newEventEventTiles.push(generateNewEventEventTile($container.find(".new-event-tile-container:eq(0)")));
            redrawNewEventEventTiles();
        });

        $('.ticket-parsing-btn').click(function(e) {
            trackActionV2('Click_on_extract_ticket', {ux_element: 'backoffice'});
            $(this).attr('disabled', true);
            populateEventsWithTicketsData();
        });
    };

    function populateEventsWithTicketsData() {
        _.each(window.currentTicketInfos, function(ticketInfos) {
            $container.find(".new-event-tiles-container").append($("<div>").addClass("new-event-tile-container"));
            var titleFromTicket = generateTitleFromTicketInfos(ticketInfos);
            var locationFromTicket = generateLocationFromTicketInfos(ticketInfos);
            var startFromTicket = generateStartDateFromTicketInfos(ticketInfos);
            var endFromTicket = generateEndDateFromTicketInfos(ticketInfos);


            window.newEventEventTiles.push(generateNewEventEventTile($container.find(".new-event-tile-container").last(), {
                event: {
                    from_ticket: true,
                    from_ticket_details: {
                        title: titleFromTicket,
                        location: locationFromTicket,
                        start: startFromTicket,
                        end: endFromTicket
                    },
                    title: titleFromTicket,
                    location: locationFromTicket,
                    start: startFromTicket,
                    end: endFromTicket,
                    beingAdded: true,
                    calendar_login_username: window.threadComputedData.calendar_login_username,
                    calendar_login_type: window.threadComputedData.calendar_login_type
                }
            }));
        });
        redrawNewEventEventTiles();
    };

    function generateTitleFromTicketInfos(ticketInfos) {
        var stations = ticketInfos['gares'];
        var cities = ticketInfos['villes'];

        var originStation = stations[0];
        if(cities[0])
            originStation += ' (' + cities[0] + ')';

        var destinationStation = stations[1];
        if(cities[1])
            destinationStation += ' (' + cities[1] + ')';

        return originStation + ' => ' + destinationStation;
    };

    function generateLocationFromTicketInfos(ticketInfos) {
        var seat = 'Siège(s)';
        var train = 'Train';
        var reservation = 'Réservation';

        var seatParsed = ticketInfos['numero_de_place'];
        var trainParsed = ticketInfos['numero_de_voyage'];
        var reservationParsed = ticketInfos['numero_de_reservation'];

        if(seatParsed)
            seat += ' [' + seatParsed + ']';

        if(trainParsed)
            train += ' ' + trainParsed;

        if(reservationParsed)
            reservation += ' ' + reservationParsed;

        return [seat, train, reservation].join(' ; ');
    };

    function generateStartDateFromTicketInfos(ticketInfos) {
        var start = moment("Mercredi 2 Septembre").year(moment().year());

        var startTime = ticketInfos['horaires'][0];

        start.hour(startTime[0]).minute(startTime[1]);

        return start;
    };

    function generateEndDateFromTicketInfos(ticketInfos) {
        var end = moment("Mercredi 2 Septembre").year(moment().year());

        var endTime = ticketInfos['horaires'][1];

        end.hour(endTime[0]).minute(endTime[1]);

        return end;
    };

    function generateNewEventEventTile($selector, params) {
        if(!params) params = {};
        var event = params.event || {
            title: localize("events.new_event"),
            beingAdded: true,
            calendar_login_username: window.threadComputedData.calendar_login_username,
            calendar_login_type: window.threadComputedData.calendar_login_type
        };
        if(params.eventId) {
            event = {};
        }

        var eventTile = new EventTile($selector, {
            mode: "free_calendar",
            event: event,
            eventId: params.eventId,
            eventUrl: params.eventUrl,
            calendarId: params.calendarId,
            calendarLoginUsername: params.calendarLoginUsername,
            timezoneId: window.threadComputedData.timezone,
            accountEmail: window.threadAccount.email,
            minimizable: true,
            minimized: params.minimized,
            static: true,
            locale: window.threadComputedData.locale,
            uxElement: 'form',
            doneEditingCallback: function(response) {
                var eventTile = this;

                if(response.action != "cancel_event_creation" && !$(".calendar-container").hasClass("minimized")) {
                    window.currentCalendar.refreshEvents();
                }
                if(response.action == "cancel_event_creation" || response.action == "delete_event") {
                    window.newEventEventTiles.splice(window.newEventEventTiles.indexOf(eventTile), 1);
                    $(eventTile.$selector).remove();
                    redrawNewEventEventTiles();
                }
                if(response.action == "create_event") {
                    window.createdEvents.push(eventTile.event);
                    refreshReplyText();
                }
                if(response.action == "update_event") {
                    if(_.find(window.createdEvents, function(event) {
                        return event.id == eventTile.event.id;
                    }) !=  undefined) {
                        window.createdEvents = _.reject(window.createdEvents, function(event) {
                            return event.id == eventTile.event.id;
                        });
                        window.createdEvents.push(eventTile.event);
                    }
                    else {
                        window.updatedEvents.push(eventTile.event);
                    }
                    refreshReplyText();
                }
                if(response.action == "delete_event") {
                    if(_.find(window.createdEvents, function(event) {
                        return event.id == eventTile.eventId;
                    }) != undefined || _.find(window.updatedEvents, function(event) {
                        return event.id == eventTile.eventId;
                    }) != undefined) {
                        window.createdEvents = _.reject(window.createdEvents, function(event) {
                            return event.id == eventTile.eventId;
                        });
                        window.updatedEvents = _.reject(window.updatedEvents, function(event) {
                            return event.id == eventTile.eventId;
                        });
                    }
                    else {
                        window.deletedEvents.push(eventTile.event);
                    }
                    refreshReplyText();
                }

                if(response.action == "delete_event" || response.action == "create_event") {
                    $.ajax({
                        url: "/julie_actions/<%= @julie_action.id %>/update",
                        method: "post",
                        data: {
                            events: _.map(_.filter(window.newEventEventTiles, function(eventTileItem) {
                                return eventTileItem.eventId;
                            }), function(eventTileItem) {
                                return {
                                    id: eventTileItem.eventId,
                                    event_url: eventTileItem.eventUrl,
                                    calendar_id: eventTileItem.calendarId,
                                    calendar_login_username: eventTileItem.event.calendar_login_username,
                                    timezone_id: eventTileItem.timezoneId
                                };
                            }),
                            done: true,
                            processed_in: Date.now() - window.startedAt,
                            messages_thread_id: "<%= @messages_thread.id %>",
                            client_settings: window.getClientSettings()
                        }
                    });
                }
                window.showEditedEventInCalendar();
            },
            afterRedrawCallback: function() {
                redrawNewEventEventTiles();

                window.showEditedEventInCalendar();

            },
            afterEventFetchedCallback: function() {
                refreshReplyText();
            },
            afterNewEventEdited: function() {
                window.showEditedEventInCalendar();
            }
        });
        eventTile.redraw();
        if(params.eventId) {
            eventTile.fetchEvent(function() {
                eventTile.redraw();
            });
        }

        return eventTile;
    }

    window.showEditedEventInCalendar = function() {
        if($(".calendar-container").hasClass("minimized")) {
            return;
        }
        var beingAddedEventTile =_.find(window.newEventEventTiles, function(eventTile) {
            return eventTile.isEditing();
        });
        if(beingAddedEventTile) {
            var editedEvent = beingAddedEventTile.getEditedEvent();
            var eventData = window.currentCalendar.generateEventData(editedEvent);
            eventData.start = eventData.start.tz(window.currentCalendar.getCalendarTimezone()).format();
            eventData.end = eventData.end.tz(window.currentCalendar.getCalendarTimezone()).format();
            window.currentCalendar.goToDateTime(moment(editedEvent.start));
            window.currentCalendar.$selector.find('#calendar').fullCalendar('renderEvent', eventData, true);
            window.currentCalendar.addEvent(eventData);
        }
        else {
            window.currentCalendar.addEvent(null);
        }
    };

    function redrawNewEventEventTiles() {
        var $container = $("#thread-header-other-entries-container");

        if(_.filter(window.newEventEventTiles, function(eventTile){
            return eventTile.isEditing();
        }).length > 0) {
            $container.find(".new-events-container").find(".create-new-event-tile-button").hide();
        }
        else {
            $container.find(".new-events-container").find(".create-new-event-tile-button").show();
        }
    }

    function refreshReplyText() {
        var messageBuilder = $('#reply-area').scope();

        window.setReplyMessage(messageBuilder.generateReply({
            action: "create_event",
            createdEvents: window.createdEvents,
            updatedEvents: window.updatedEvents,
            deletedEvents: window.deletedEvents,
            locale: window.threadComputedData.locale
        }), "all");
    }

    window.clickReplyButton = function() {
        $.ajax({
            url: "/julie_actions/<%= @julie_action.id %>/update",
            method: "post",
            data: {
                events: _.map(_.filter(window.newEventEventTiles, function(eventTile) {
                    return eventTile.eventId;
                }), function(eventTile) {
                    return {
                        id: eventTile.eventId,
                        event_url: eventTile.eventUrl,
                        calendar_id: eventTile.calendarId,
                        calendar_login_username: eventTile.event.calendar_login_username,
                        timezone_id: eventTile.timezoneId
                    };
                }),
                text: $("textarea#reply-text").val(),
                generated_text: window.currentFullMessageWithFooter,
                to: window.currentRecipients().to,
                cc: window.currentRecipients().cc,
                done: true,
                processed_in: Date.now() - window.startedAt,
                messages_thread_id: "<%= @messages_thread.id %>",
                client_settings: window.getClientSettings()
            }
        });
        window.sendReply();
    };

    $(document).ready(function() {

        $container = $("#thread-header-other-entries-container");

// Deactivated because window.currentHtmlMessage has 'token unexpected error'
//        $.ajax({
//            url: "/api/v1/messages_threads/parse_ticket",
//            method: 'post',
//            data: {
//                html_message: window.currentHtmlMessage
//            },
//            beforeSend: function (xhr) {
//                xhr.setRequestHeader("Authorization", "<%= ENV['API_KEY'] %>");
//            },
//            success: function (response) {
//                if(response['Status'] == "Success") {
//                    $('#ticket_module').show();
//                    window.currentTicketInfos = response['Result'];
//                }
//                console.log(response);
//            },
//            error: function(response){
//                console.log(response);
//            }
//        })


    });
</script>