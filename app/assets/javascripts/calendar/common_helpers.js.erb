window.CommonHelpers = {};
window.CommonHelpers.localize = function(str, locale) {
    return str;
};

window.CommonHelpers.getLocale = function() {
    return "fr";
};
window.CommonHelpers.filterEvents = function(events) {
    return $.grep(events, function(event) {
        if(event.attendees) {
            var declined = false;
            $.each(event.attendees, function(k, attendee) {
                if(attendee.self && attendee.responseStatus == "declined") {
                    declined = true;
                    return false;
                }
            });
            if(declined) {
                return false;
            }
        }
        return true;
    });
};

window.CommonHelpers.externalRequest = function (request, callback, error_callback) {
    <% if Rails.env == 'production' %>
        var host = "<%= "https://juliedesk-app.herokuapp.com" %>";
    <% elsif Rails.env == 'staging' %>
        var host = "<%= "https://juliedesk-release.herokuapp.com" %>";
    <% else %>
        var host = "<%= ENV['CALENDAR_API_URL'] %>";
    <% end %>

    var access_key = "gho67FBDJKdbhfj890oPm56VUdfhq8";
    //console.log("Receiving request: ", request);
    if(request.action == "getJulieDeskPreferences") {
        $.ajax({
            url: host + "/api/v1/accounts/show?email=" + request.email + "&access_key=" + access_key,
            type: "GET",
            contentType: "application/json",
            error: function(e) {
                console.log("Error: ", e);
            },
            success: function(response) {
                //console.log(response);
                callback(response.data);
            }
        });
    }
    else if(request.action == "calendars"){
        $.ajax({
            url: host + "/api/v1/calendar_proxy/calendars_list?access_key=gho67FBDJKdbhfj890oPm56VUdfhq8",
            data: {
                email: request.email
            },
            success: function(data) {
                callback({
                    items: data.items,
                    email: request.email
                });
            }
        });
    }
    else if(request.action == "events") {
        $.ajax({
            url: host + "/api/v1/calendar_proxy/events_list?access_key=" + access_key,
            tryCount : 0,
            retryLimit : 20,
            data: {
                start: request.start,
                end: request.end,
                email: request.email,
                calendar_ids: request.calendar_ids
            },
            success: function(data) {
                if(data.status == "error" && data.code == "AccessExpired") {
                    alert("Office 365 access expired for account: " + request.email);
                }
                else {
                    callback({
                        items: CommonHelpers.filterEvents(data.items),
                        key: request.key
                    });
                }
            },
            error: function(xhr, textStatus, errorThrown) {
                console.log("Error");
                this.tryCount++;
                if (this.tryCount <= this.retryLimit) {
                    console.log("Retrying...");
                    $.ajax(this);
                    return;
                }
                console.log("Retried too many times");
            }
        });
    }
    else if(request.action == "create_event") {
        $.ajax({
            url: host + "/api/v1/calendar_proxy/event_create",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify({
                email: request.email,
                access_key: access_key,
                calendar_login_username: request.calendar_login_username,
                summary: request.summary,
                description: request.description,
                attendees: request.attendees,
                all_day: request.all_day,
                location: request.location,
                private: request.private,
                start: request.start,
                end: request.end,
                start_timezone: request.start_timezone,
                end_timezone: request.end_timezone,
                utc_offset: request.utc_offset,
                recurrence: request.recurrence,
                call_instructions: window.threadComputedData.call_instructions
            }),
            success: function(e) {
                if(e.status == "success") {
                    callback(e);
                }
                else {
                    error_callback(e);
                }
            },
            error: function(e) {
                error_callback(e);
            }
        });
    }
    else if(request.action == "update_event") {
        $.ajax({
            url: host + "/api/v1/calendar_proxy/event_update",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify({
                email: request.email,
                access_key: access_key,
                calendar_login_username: request.calendar_login_username,
                event_id: request.event_id,
                event_url: request.event_url,
                calendar_id: request.calendar_id,
                summary: request.summary,
                description: request.description,
                attendees: request.attendees,
                all_day: request.all_day,
                location: request.location,
                private: request.private,
                start: request.start,
                end: request.end,
                start_timezone: request.start_timezone,
                end_timezone: request.end_timezone,
                utc_offset: request.utc_offset,
                recurrence: request.recurrence,
                call_instructions: window.threadComputedData.call_instructions
            }),
            success: function(e) {
                callback(e);
            },
            error: function(e) {
                error_callback(e);
            }
        });
    }
    else if(request.action == "delete_event") {
        $.ajax({
            url: host + "/api/v1/calendar_proxy/event_delete",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify({
                email: request.email,
                access_key: access_key,
                calendar_login_username: request.calendar_login_username,
                event_id: request.event_id,
                event_url: request.event_url,
                calendar_id: request.calendar_id
            }),
            success: function(e) {
                callback(e);
            },
            error: function(e) {
                error_callback(e);
            }
        });
    }
    else if(request.action == "get_event") {
        $.ajax({
            url: host + "/api/v1/calendar_proxy/event_get",
            type: "GET",
            contentType: "application/json",
            data: {
                email: request.email,
                access_key: access_key,
                calendar_login_username: request.calendar_login_username,
                event_id: request.event_id,
                event_url: request.event_url,
                calendar_id: request.calendar_id
            },
            success: function(e) {
                callback(e);
            },
            error: function(e) {
                console.log(e);
                error_callback(e);
            }
        });
    }

    else if(request.action == "show_account") {
        $.ajax({
            url: host + "/api/v1/accounts/show/",
            type: "GET",
            contentType: "application/json",
            data: {
                access_key: access_key,
                email: request.email
            },
            success: function(e) {
                callback(e);
            },
            error: function(e) {
                console.log(e);
                error_callback(e);
            }
        });
    }
};


CommonHelpers.formatDateTimeRange = function(startDate, endDate, locale, timezone, allDay) {
    console.log(startDate, endDate, allDay, timezone);
    if(!locale) locale = "en";
    var mStartDate, mEndDate, today;
    var formattedStartDate, formattedEndDate;
    if(allDay) {
        mStartDate = moment(startDate).locale(locale);
        mEndDate = moment(endDate).locale(locale);
        mEndDate.add('d', -1);

        today = moment();

        formattedStartDate = (mStartDate.isSame(today, "day") ? (localize("dates.today") + " " + mStartDate.format("dddd D MMMM YYYY")) : mStartDate.format("dddd D MMMM YYYY"));
        formattedEndDate = (mEndDate.isSame(today, "day") ? (localize("dates.today") + " " + mEndDate.format("dddd D MMMM YYYY")) : mEndDate.format("dddd D MMMM YYYY"));

        if(mStartDate.format("YYYY-MM-DD") == mEndDate.format("YYYY-MM-DD")) {
            return formattedStartDate;
        }
        else {
            return formattedStartDate + " -<br>" + formattedEndDate;
        }
    }
    else {
        mStartDate = moment(startDate).tz(timezone).locale(locale);
        mEndDate = moment(endDate).tz(timezone).locale(locale);

        today = moment();

        formattedStartDate = (mStartDate.isSame(today, "day") ? (localize("dates.today") + " " + mStartDate.format("dddd D MMMM YYYY")) : mStartDate.format("dddd D MMMM YYYY"));
        formattedEndDate = (mEndDate.isSame(today, "day") ? (localize("dates.today") + " " + mEndDate.format("dddd D MMMM YYYY")) : mEndDate.format("dddd D MMMM YYYY"));

        if(mStartDate.format("YYYY-MM-DD") == mEndDate.format("YYYY-MM-DD")) {
            return formattedStartDate + "<br>" + mStartDate.format("HH:mm") + " - " + mEndDate.format("HH:mm") + "<br>(" + timezone.replace(/_/g, " ") + ")";
        }
        else {
            return formattedStartDate + mStartDate.format(" HH:mm") + " -<br>" + formattedEndDate + mEndDate.format(" HH:mm") + "<br>(" + timezone.replace(/_/g, " ") + ")";
        }
    }
};

CommonHelpers.formatDateTimeRangeInText = function(startDate, endDate, locale, timezone, allDay) {
    if(!locale) locale = "en";
    var mStartDate, mEndDate, today, tomorrow;

    var formattedStartDate, formattedEndDate;
    if(allDay) {
        mStartDate = moment(startDate).locale(locale);
        mEndDate = moment(endDate).locale(locale);
        mEndDate.add('d', -1);

        formattedStartDate = mStartDate.format(localize("email_templates.common.simplified_date_format"));
        formattedEndDate = mEndDate.format(localize("email_templates.common.simplified_date_format"));

        today = moment();
        tomorrow = today.clone().add(1, 'd');

        if(mStartDate.isSame(today, "day"))
            formattedStartDate = localize("dates.today") + ', ' + formattedStartDate;
        else if(mStartDate.isSame(tomorrow, "day"))
            formattedStartDate = localize("dates.tomorrow") + ', ' + formattedStartDate;

        if(mStartDate.format("YYYY-MM-DD") == mEndDate.format("YYYY-MM-DD")) {
            return formattedStartDate;
        }
        else {
            return formattedStartDate + " - " + formattedEndDate;
        }
    }
    else {
        mStartDate = moment(startDate).tz(timezone).locale(locale);
        mEndDate = moment(endDate).tz(timezone).locale(locale);

        formattedStartDate = mStartDate.format(localize("email_templates.common.simplified_date_format"));
        formattedEndDate = mEndDate.format(localize("email_templates.common.simplified_date_format"));

        today = moment().tz(timezone);
        tomorrow = today.clone().add(1, 'd');

        if(mStartDate.isSame(today, "day"))
            formattedStartDate = localize("dates.today") + ', ' + formattedStartDate;
        else if(mStartDate.isSame(tomorrow, "day"))
            formattedStartDate = localize("dates.tomorrow") + ', ' + formattedStartDate;

        if(mEndDate.isSame(today, "day"))
            formattedEndDate = localize("dates.today") + ', ' + formattedEndDate;
        else if(mEndDate.isSame(tomorrow, "day"))
            formattedEndDate = localize("dates.tomorrow") + ', ' + formattedEndDate;

        if(mStartDate.format("YYYY-MM-DD") == mEndDate.format("YYYY-MM-DD")) {
            return formattedStartDate + ", " + mStartDate.format("LT") + " - " + mEndDate.format("LT") + " (" + timezone.replace(/_/g, " ") + ")";
        }
        else {
            return formattedStartDate + " " + localize("email_templates.common.date_time_separator") + " " + mStartDate.format("LT") + " - " + formattedEndDate + " " + localize("email_templates.common.date_time_separator") + " " + mEndDate.format("LT") + " (" + timezone.replace(/_/g, " ") + ")";
        }
    }

};