<script>
    window.leftColumnMessage = "Create event";


    window.createdEvents = [];
    window.updatedEvents = [];
    window.deletedEvents = [];

    $(function() {
        window.setReplyMessage("");

        window.activateCalendarWithParams({
            mode: "create_events",
            date_times: [],
            email: "<%= @message.messages_thread.account_email %>",
            duration: <%= @message.messages_thread.computed_data[:duration] || 60 %>,
            pickEventCallback: function(e) {

                var beingAddedEventTile =_.find(window.newEventEventTiles, function(eventTile) {
                    return eventTile.isEditing();
                });
                if(beingAddedEventTile) {

                }
                else {
                    $container.find(".new-event-tiles-container").prepend($("<div>").addClass("new-event-tile-container"));
                    beingAddedEventTile = generateNewEventEventTile($container.find(".new-event-tile-container:eq(0)"));
                    window.newEventEventTiles.push(beingAddedEventTile);
                    redrawNewEventEventTiles();
                }
                beingAddedEventTile.setStartAndEnd(e.start, e.end);
            }
        });

        $(".calendar-container").addClass("minimized");
        var $container = $("#thread-header-other-entries-container");
        $container.html($("<div>").addClass("new-events-container"));
        $container.find(".new-events-container").append($("<div>").addClass("btn btn-success create-new-event-tile-button").html("Create new event"));
        $container.find(".new-events-container").append($("<div>").addClass("new-event-tiles-container"));
        window.newEventEventTiles = [];

        var alreadyCreatedEvents = <%== @messages_thread.created_events_data.to_json %>;

        _.each(alreadyCreatedEvents, function(eventData) {
            $container.find(".new-event-tiles-container").append($("<div>").addClass("new-event-tile-container"));
            window.newEventEventTiles.push(generateNewEventEventTile($container.find(".new-event-tile-container").last(), {
                eventId: eventData.id,
                eventUrl: eventData.event_url,
                calendarId: eventData.calendar_id,
                minimized: true
            }));
        });

        $container.find(".create-new-event-tile-button").click(function() {
            $container.find(".new-event-tiles-container").prepend($("<div>").addClass("new-event-tile-container"));
            window.newEventEventTiles.push(generateNewEventEventTile($container.find(".new-event-tile-container:eq(0)")));
            redrawNewEventEventTiles();
        });
    });

    function generateNewEventEventTile($selector, params) {
        if(!params) params = {};
        var event = {
            title: localize("events.new_event"),
            beingAdded: true
        };
        if(params.eventId) {
            event = {};
        }

        var eventTile = new EventTile($selector, {
            mode: "free_calendar",
            event: event,
            eventId: params.eventId,
            eventUrl: params.eventUrl,
            calendarId: params.calendarId,
            timezoneId: window.threadComputedData.timezone,
            accountEmail: window.threadAccount.email,
            minimizable: true,
            minimized: params.minimized,
            static: true,
            locale: window.threadComputedData.locale,
            fordibRecurringEvents: window.threadAccount.calendar_nature != "google",
            doneEditingCallback: function(response) {
                var eventTile = this;

                if(response.action != "cancel_event_creation" && !$(".calendar-container").hasClass("minimized")) {
                    window.currentCalendar.refreshEvents();
                }
                if(response.action == "cancel_event_creation" || response.action == "delete_event") {
                    window.newEventEventTiles.splice(window.newEventEventTiles.indexOf(eventTile), 1);
                    $(eventTile.$selector).remove();
                    redrawNewEventEventTiles();
                }
                if(response.action == "create_event") {
                    window.createdEvents.push(eventTile.event);
                    refreshReplyText();
                }
                if(response.action == "update_event") {
                    if(_.find(window.createdEvents, function(event) {
                        return event.id == eventTile.event.id;
                    }) !=  undefined) {
                        window.createdEvents = _.reject(window.createdEvents, function(event) {
                            return event.id == eventTile.event.id;
                        });
                        window.createdEvents.push(eventTile.event);
                    }
                    else {
                        window.updatedEvents.push(eventTile.event);
                    }
                    refreshReplyText();
                }
                if(response.action == "delete_event") {
                    if(_.find(window.createdEvents, function(event) {
                        return event.id == eventTile.eventId;
                    }) != undefined || _.find(window.updatedEvents, function(event) {
                        return event.id == eventTile.eventId;
                    }) != undefined) {
                        window.createdEvents = _.reject(window.createdEvents, function(event) {
                            return event.id == eventTile.eventId;
                        });
                        window.updatedEvents = _.reject(window.updatedEvents, function(event) {
                            return event.id == eventTile.eventId;
                        });
                    }
                    else {
                        window.deletedEvents.push(eventTile.event);
                    }
                    refreshReplyText();
                }

                if(response.action == "delete_event" || response.action == "create_event") {
                    $.ajax({
                        url: "/julie_actions/<%= @julie_action.id %>/update",
                        method: "post",
                        data: {
                            events: _.map(_.filter(window.newEventEventTiles, function(eventTileItem) {
                                return eventTileItem.eventId;
                            }), function(eventTileItem) {
                                return {
                                    id: eventTileItem.eventId,
                                    event_url: eventTileItem.eventUrl,
                                    calendar_id: eventTileItem.calendarId,
                                    timezone_id: eventTileItem.timezoneId
                                };
                            }),
                            done: true,
                            processed_in: Date.now() - window.startedAt
                        }
                    });
                }
                window.showEditedEventInCalendar();
            },
            afterRedrawCallback: function() {
                redrawNewEventEventTiles();

                window.showEditedEventInCalendar();

            },
            afterEventFetchedCallback: function() {
                refreshReplyText();
            },
            afterNewEventEdited: function() {
                window.showEditedEventInCalendar();
            }
        });
        eventTile.redraw();
        if(params.eventId) {
            eventTile.fetchEvent(function() {
                eventTile.redraw();
            });
        }

        return eventTile;
    }

    window.showEditedEventInCalendar = function() {
        if($(".calendar-container").hasClass("minimized")) {
            return;
        }
        var beingAddedEventTile =_.find(window.newEventEventTiles, function(eventTile) {
            return eventTile.isEditing();
        });
        if(beingAddedEventTile) {
            var editedEvent = beingAddedEventTile.getEditedEvent();
            var eventData = window.currentCalendar.generateEventData(editedEvent);
            eventData.start = eventData.start.tz(window.currentCalendar.getCalendarTimezone()).format();
            eventData.end = eventData.end.tz(window.currentCalendar.getCalendarTimezone()).format();
            window.currentCalendar.goToDateTime(moment(editedEvent.start));
            window.currentCalendar.$selector.find('#calendar').fullCalendar('renderEvent', eventData, true);
            window.currentCalendar.addEvent(eventData);
        }
        else {
            window.currentCalendar.addEvent(null);
        }
    }

    function redrawNewEventEventTiles() {
        var $container = $("#thread-header-other-entries-container");

        if(_.filter(window.newEventEventTiles, function(eventTile){
            return eventTile.isEditing();
        }).length > 0) {
            $container.find(".new-events-container").find(".create-new-event-tile-button").hide();
        }
        else {
            $container.find(".new-events-container").find(".create-new-event-tile-button").show();
        }
    }

    function refreshReplyText() {
        window.setReplyMessage(window.generateEmailTemplate({
            action: "create_event",
            createdEvents: window.createdEvents,
            updatedEvents: window.updatedEvents,
            deletedEvents: window.deletedEvents,
            locale: window.threadComputedData.locale
        }), "all");
    }

    window.clickReplyButton = function() {
        $.ajax({
            url: "/julie_actions/<%= @julie_action.id %>/update",
            method: "post",
            data: {
                events: _.map(_.filter(window.newEventEventTiles, function(eventTile) {
                    return eventTile.eventId;
                }), function(eventTile) {
                    return {
                        id: eventTile.eventId,
                        event_url: eventTile.eventUrl,
                        calendar_id: eventTile.calendarId,
                        timezone_id: eventTile.timezoneId
                    };
                }),
                text: $("textarea#reply-text").val(),
                to: window.currentRecipients().to,
                cc: window.currentRecipients().cc,
                done: true,
                processed_in: Date.now() - window.startedAt
            }
        });
        window.sendReply();
    }
</script>