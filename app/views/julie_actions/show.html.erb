<% if @messages_thread.account %>
    <%= render partial: "messages_threads/info_panel", locals: {
                                                             messages_thread: @messages_thread,
                                                             julie_action: @julie_action,
                                                             accounts_cache_light: @accounts_cache_light
                                                     } %>
<% else %>
    <%= render partial: "messages_threads/info_panel_no_account", locals: {messages_thread: @messages_thread} %>
<% end %>

<% if JulieAction.available_actions.include? @julie_action.action_nature %>
    <%= render partial: @julie_action.action_nature, locals: {julie_action: @julie_action, messages_thread: @messages_thread} %>
<% end %>

<script>
    window.currentFullMessageWithFooter = "";
    window.processingMessageThreadId = <%= @messages_thread.id %>;

    window.timeSlotsToSuggest = [];
    window.timeSlotToCreate = null;
    window.selectedEvents = [];
    window.forceCancelEventIds = [];
    window.julieAlias = <%== @messages_thread.julie_alias.to_json %>;
    window.julieAliases = <%== @messages_thread.julie_aliases.to_json %>;
    window.isResponseToClient = <%= @is_discussion_client_julie_only %>;
    window.startedAt = Date.now();

    window.julie_action_nature = '<%= @julie_action.action_nature %>';
    window.julie_action_id = '<%= @julie_action.id %>';

    window.classification = "<%= @message_classification.classification %>";
    window.locationHasBeenChanged = <%= @message_classification.location_changed || false %>;

    window.actionDeletedEvent = false;

    window.activateCalendarWithParams = function (calendarParams) {
        calendarParams.height = $(".calendar-container").height();
        calendarParams.other_emails = window.otherAccountEmails;

        if(window.threadComputedData && window.threadComputedData.timezone) {
            calendarParams.default_timezone_id = window.threadComputedData.timezone;
            calendarParams.additional_timezone_ids = [window.threadAccount.default_timezone_id];
        } else {
            if(window.threadAccount) {
                calendarParams.default_timezone_id = window.threadAccount.default_timezone_id;
            }
            calendarParams.additional_timezone_ids = [window.threadComputedData.timezone];
        }

        calendarParams.constraintsData = _.groupBy(window.threadComputedData.constraints_data, function (data) {
            return data.attendee_email;
        });

        calendarParams.default_calendar_login_username = window.threadComputedData.calendar_login_username;
        calendarParams.default_calendar_login_type = window.threadComputedData.calendar_login_type;

        window.currentCalendar = new Calendar($(".calendar-container"), calendarParams);
        $(".calendar-container").addClass("visible");
    };

    window.getClientSettings = function() {
        var result = {};

        if(window.threadAccount) {
            result['auto_follow_up'] = window.threadAccount.auto_follow_up_enabled;
        }

        return result;
    };

    /*elsif @julie_action.action_nature == JulieAction::JD_ACTION_POSTPONE_EVENT
    window.afterEventFetched = function () {
        // Add attendees as recipients if not present already
        var toRecipients = _.map($("#recipients-to-input").tokenInput("get"), function (elt) {
            return elt.name;
        });
        var ccRecipients = _.map($("#recipients-cc-input").tokenInput("get"), function (elt) {
            return elt.name;
        });

        _.each(window.currentEventData.attendees, function (attendee) {
            if (toRecipients.indexOf(attendee.email) == -1 && ccRecipients.indexOf(attendee.email) == -1) {
                $("#recipients-to-input").tokenInput("add", {name: attendee.email});
            }
        });

        $("input#quote_message").removeAttr("checked");
        window.currentCalendar.addForbiddenEvents([
            {
                title: "TO POSTPONE",
                start: window.currentEventData.start.dateTime,
                end: window.currentEventData.end.dateTime
            }
        ]);
        redrawReplyText();
    };
*/

    <% initial_recipients = @message.initial_recipients(only_reply_all: @julie_action.message_classification.classification != MessageClassification::ASK_DATE_SUGGESTIONS) %>

    <% if @julie_action.action_nature == JulieAction::JD_ACTION_FORWARD_TO_SUPPORT
        initial_recipients[:cc] << 'hello@juliedesk.com'
    end %>

    function emailSender() {
        return <%== {name: @message.get_email_sender}.to_json %>;
    }
    function initialToRecipients() {
        return <%== initial_recipients[:to].map{|c| {name: c}}.to_json %>;
    }
    function initialCcRecipients() {
        return <%== initial_recipients[:cc].map{|c| {name: c}}.to_json %>;
    }
    function clientRecipient() {
        return {name: "<%= initial_recipients[:client] %>"};
    }
    function possibleRecipients() {
        return <%== initial_recipients[:possible].map{|c| {name: c}}.to_json %>;
    }

    window.currentRecipients = function () {
        return {
            to: $.map($("#recipients-to-input").tokenInput("get"), function (elt) {
                return elt.name;
            }),
            cc: $.map($("#recipients-cc-input").tokenInput("get"), function (elt) {
                return elt.name;
            })
        };
    };

    function initTokenInputs() {

//        trackEvent("Julie_action_is_open", {
//            distinct_id: "<%= session[:operator_id]%>-<%= @messages_thread.id %>",
//            thread_id: <%= @messages_thread.id %>,
//            thread_messages_count: <%= @messages_thread.messages.length %>,
//            bo_message_id: <%= @julie_action.message_classification.message_id %>,
//            action_nature: "<%= @julie_action.message_classification.classification %>"
//        });
//
//        if (window.tokenInputsInitialized) {
//            return;
//        }
//        window.tokenInputsInitialized = true;
//        $("#recipients-to-input").tokenInput(
//                possibleRecipients(),
//                {
//                    searchDelay: 0,
//                    enableFreeInput: true,
//                    hintText: '',
//                    noResultsText: '',
//                    searchingText: '',
//                    animateDropdown: false,
//                    prePopulate: initialToRecipients(),
//                    preventDuplicates: true,
//                    theme: 'facebook',
//                    onAdd: function (item) {
//                        toRecipientAdded(item);
//                    },
//                    onDelete: function (item) {
//                        toRecipientDeleted(item);
//                    }
//                });
//        $("#recipients-cc-input").tokenInput(
//                possibleRecipients(),
//                {
//                    searchDelay: 0,
//                    enableFreeInput: true,
//                    hintText: '',
//                    noResultsText: '',
//                    searchingText: '',
//                    animateDropdown: false,
//                    prePopulate: initialCcRecipients(),
//                    preventDuplicates: true,
//                    theme: 'facebook',
//                    onAdd: function (item) {
//                        ccRecipientAdded(item);
//                    },
//                    onDelete: function (item) {
//                        ccRecipientDeleted(item);
//                    }
//
//                });
    }

    function toRecipientAdded(item) {
        setQuoteMessageCheckboxState();
    }

    function toRecipientDeleted(item) {
        setQuoteMessageCheckboxState();
    }

    function ccRecipientAdded(item) {
        setQuoteMessageCheckboxState();
    }

    function ccRecipientDeleted(item) {
        setQuoteMessageCheckboxState();
    }

    function setQuoteMessageCheckboxState(){

        if(window.julie_action_nature != "forward_to_support") {
            var toRecipients = $("#recipients-to-input").tokenInput("get");
            var ccRecipients = $("#recipients-cc-input").tokenInput("get");
            var state = true;

            if(window.isResponseToClient){
                // If there are more than 1 recipients (means one or more were added
                // Or if one or more cc recipients are presents (means one or more were added)
                // Or if the client email is not present in the to recipient list

                var clientAllEmails = (window.threadAccount.email_aliases || []).concat(window.threadAccount.email);

                // If the operator then add a recipient (either To or Cc), we uncheck the quote message checkbox, because
                // the previous message is obviously containing informations only destined to Julie or the client
                if (toRecipients.length > 1 || ccRecipients.filter(function(item) {
                            return item.name != "support@juliedesk.com" && item.name != "hello@juliedesk.com";
                        }).length > 0 || toRecipients.filter(function (item) {
                            return (clientAllEmails.indexOf(item.name) > -1);
                        }).length == 0)
                {
                    state = false;
                }
            }

            $('#quote_message').prop('checked', state);
            return state;
        }

    }

    $(function () {
        initTokenInputs();
        $("#show-calendar-button").click(function () {
            trackActionV2("Click_on_open_calendar", {
                calendars_types: _.map(window.threadAccount.calendar_logins, function(cal) {return cal.type;})
            });

            $(".calendar-container").removeClass("minimized");
            window.currentCalendar.redrawFullCalendar();
            if (window.newEventEventTiles && window.showEditedEventInCalendar) {
                window.showEditedEventInCalendar();
            }
        });
        $("body").on("click", ".time-slots-to-suggest-list-container .time-slot-to-suggest", function (e) {
            var dateTime = $(this).data("date-time");
            $(".calendar-container").removeClass("minimized");
            window.currentCalendar.goToDateTime(dateTime);
        });

        $(".left-column").scroll(function () {
            if ($(this).scrollTop() < 40) {
                $(".julie-action-title").css({top: 40});
            }
            else {
                $(".julie-action-title").css({top: $(this).scrollTop()});
            }
        });

        $("select#julie-alias-select").change(function() {
            window.julieAlias = _.find(window.julieAliases, function(julieAlias) {
               return julieAlias.email == $("select#julie-alias-select").val();
            });
            window.setSignatureAndFooter();
        });

        $("#reply-button").click(function () {
            var trackingData = {ux_element: 'email'};

            if(window.threadComputedData && window.threadComputedData.locale) {
                trackingData.locale = window.threadComputedData.locale;
            }

            trackActionV2('Click_on_send_email', trackingData);
            $("#reply-button").prop('disabled', true);
            if(window.clickReplyButton) {
                window.clickReplyButton();
            }
            else {
                $.ajax({
                    url: "/julie_actions/<%= @julie_action.id %>/update",
                    method: "post",
                    data: {
                        text: $("textarea#reply-text").val(),
                        generated_text: window.currentFullMessageWithFooter,
                        to: window.currentRecipients().to,
                        cc: window.currentRecipients().cc,
                        done: true,
                        processed_in: Date.now() - window.startedAt,
                        messages_thread_id: "<%= @messages_thread.id %>",
                        client_settings: window.getClientSettings(),
                        date_times: window.timeSlotsToSuggest || [],
                        timezone: $('#dates_suggestion_timezone').val()
                    }
                });
                window.sendReply();
            }
        });

        $("#forward-button").click(function () {
            trackActionV2('Click_on_send_email', {ux_element: 'backoffice'});

            $("#forward-button").prop('disabled', true);
            if(window.clickForwardButton) {
                window.clickForwardButton();
            }
            else {
                $.ajax({
                    url: "/julie_actions/<%= @julie_action.id %>/update",
                    method: "post",
                    data: {
                        text: $("textarea#reply-text").val(),
                        generated_text: window.currentFullMessageWithFooter,
                        to: window.currentRecipients().to,
                        cc: window.currentRecipients().cc,
                        done: true,
                        processed_in: Date.now() - window.startedAt,
                        messages_thread_id: "<%= @messages_thread.id %>",
                        client_settings: window.getClientSettings()
                    }
                });
                window.sendReply({forward: true});
            }
        });

        $(".reply-to-all-button").click(function() {
            window.setReplyRecipients("all");
        });

        $(".reply-to-client-button").click(function() {
            window.setReplyRecipients("only_client");
        });

        window.deleteEventBeforeReply = function (callback) {
            if(window.currentEventTile) {
                window.currentEventTile.doneEditingCallback = function() {
                    window.actionDeletedEvent = true;
                    $(".messages-thread-info-panel .created-event-panel").hide();
                    callback();
                };
                window.currentEventTile.deleteEvent();
            }
        };

        window.redrawTimeSlotsToSuggestContainer = function (params) {
            params = params || {};

            var suggestedDateScope = $("#dates-suggestion-manager").scope();
            suggestedDateScope.setSuggestions(params.forceDisplayManager);
        };

        window.sendReply = function (replyParams) {
            $(".reply-box #callback-message").html("<%= I18n.t("common.sending")%>");

            var forward = false;
            if(replyParams && replyParams.forward) {
                forward =  true;
            }

            var subject = "<%== "Re: #{@message.server_message['subject']}".gsub(/(Re: )+/i, "Re: ").gsub("\"", "\\\"") %>";
            if(forward) {
                subject = "<%== "Fw: #{@message.server_message['subject']}".gsub(/(Fw: )+/i, "Fw: ").gsub("\"", "\\\"") %>";
            }
            $.ajax({
                url: "/messages/<%= @julie_action.message_classification.message_id %>/reply",
                method: "post",
                data: {
                    subject: subject,
                    text: $("textarea#reply-text").val(),
                    html_signature: $("#reply-text-signature").html(),
                    from: $("select#julie-alias-select").val(),
                    to: window.currentRecipients().to,
                    cc: window.currentRecipients().cc,
                    quote_message: $("input#quote_message:checked").length > 0,
                    julie_action_id: "<%= @julie_action.id %>",
                    forward: forward
                },
                success: function (e) {
                    $(".reply-box #callback-message").html("<%= I18n.t("common.sent")%>");
                    $("#reply-button").removeProp('disabled');
                    window.location = "<%= messages_thread_path(@messages_thread, scroll_to_bottom: true) %>"
                },
                error: function (e) {
                    console.log("error", e);
                    $("#reply-button").removeProp('disabled');
                    $(".reply-box #callback-message").html("Error: " + e.responseJSON.message);
                }
            });
        };

    });

    window.setReplyRecipients = function(recipients, otherRecipients) {
        var replyBox = angular.element($('#recipients-manager')).scope();
        if(replyBox && replyBox.initiated)
            replyBox.setReplyRecipients(recipients, otherRecipients);
    };

    window.processSignature = function(signature) {
        if(signature) {
            if(window.threadAccount) {
                signature = signature.replace("%USER_NAME%", window.threadAccount.full_name);
                signature = signature.replace("%USER_EMAIL%", window.threadAccount.email);
                if(window.threadAccount.is_pro) {
                    signature = signature.replace(/%REMOVE_IF_PRO%([\s\S]*)%REMOVE_IF_PRO%/m, "");
                }
                else {
                    signature = signature.replace(/%REMOVE_IF_PRO%/g, "");
                }
            } else {
                signature = signature.replace(/%REMOVE_IF_PRO%/g, "");
            }
        }
        return signature;
    };

    window.setReplyMessage = function (message, recipients, otherRecipients) {

        window.setReplyRecipients(recipients, otherRecipients);
        setCurrentLocale(window.threadComputedData.locale);

        var shouldSayHi = !window.threadComputedData.last_message_sent_at || moment().diff(moment(window.threadComputedData.last_message_sent_at), 'hours') > 12;
        var fullMessage = "";

        var recipientsTos = $('#recipients-to-input').tokenInput('get');

        if(shouldSayHi) {
            if(recipientsTos.length == 1) {
                var attendeesApp = $('#attendeesCtrl').scope();

                if(attendeesApp) {
                    var attendee = attendeesApp.getAttendeeByEmail(recipientsTos[0].name);
                    if(attendee && attendee.usageName)
                        fullMessage += localize("email_templates.common.hello_named", {name: attendee.usageName});
                    else
                        fullMessage += localize("email_templates.common.hello_only");
                } else {
                    fullMessage += localize("email_templates.common.hello_only");
                }
            }
            else {
                fullMessage += localize("email_templates.common.hello_all");
            }
        } else {
            if(recipientsTos.length == 1) {
                var attendeesApp = $('#attendeesCtrl').scope();
                if(attendeesApp) {
                    var attendee = attendeesApp.getAttendeeByEmail(recipientsTos[0].name);
                    if (attendee && attendee.usageName)
                        fullMessage += localize("email_templates.common.interlocutor_name", {name: attendee.usageName});
                }
            }
        }
        fullMessage += message;

        window.currentFullMessage = fullMessage;

        setCurrentLocale("<%= I18n.locale %>");

        window.setSignatureAndFooter();
    };
    window.setSignatureAndFooter = function() {
        setCurrentLocale(window.threadComputedData.locale);
        var signature = window.julieAlias.signature_en;
        var footer = window.julieAlias.footer_en;

        if(getCurrentLocale() == "fr") {
            signature = window.julieAlias.signature_fr;
            footer = window.julieAlias.footer_fr;
        }
        signature = window.processSignature(signature);

        $("textarea#reply-text").val(window.currentFullMessage + footer);
        $("textarea#reply-text").elastic();
        $("div#reply-text-signature").html(signature);

        window.currentFullMessageWithFooter = window.currentFullMessage + footer;

        setCurrentLocale("<%= I18n.locale %>");
    };
</script>

<div class="fixed-columns">
  <div class="left-column">

    <%= render partial: "common/classification_action_header", locals: {messages_thread: @messages_thread} %>

    <div class="julie-action-title">
      <span class="title"><%= I18n.t("common.to_do") %> <%= I18n.t("actions.#{@julie_action.action_nature}.todo") %></span>

      <div id="show-calendar-button" class="btn btn-sm btn-default"><%= I18n.t("actions.show_calendar") %></div>
    </div>

    <%= render template: "calendar/calendar" %>


    <div class="julie-action-fantom"></div>

    <div class="messages-thread-emails">
      <%= render partial: "common/send_to_support", locals: {messages_thread: @messages_thread} %>

      <div class="messages-thread-subject">
        <%= @messages_thread.subject %>
      </div>

      <%= render 'messages/partials/list', locals: {type: :julie_action_show} %>

    </div>


  </div>
</div>


