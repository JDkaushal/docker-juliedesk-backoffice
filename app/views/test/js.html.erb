<script src="https://rawgit.com/WePopp/chrono/master/chrono.min.js"></script>
<script>
    var allInputTests = window.tests;
    var currentTestCategory = "";
    var currentTestIndex = 0;

    window.onerror = function(message, file, lineNumber) {
        processTestsRecap();
        $(".test.global").addClass("incorrect");
        $(".test.global .test-details").html(message + ", " + file + ", " + lineNumber);
        return false;
    };

    function processTest(test, $container, callback) {
        var $test = $("<a href='?test=" + [currentTestCategory, currentTestIndex].join(",") + "'>").addClass("test");
        $test.append($("<div>").addClass("test-name").html("Test #" + currentTestIndex + ": " + test.name));
        $test.append($("<div>").addClass("test-should").html("Should: " + test.should));

        var testResultAsync = test.test_result_async;
        if (!testResultAsync) {
            testResultAsync = function (callback) {
                callback(test.test_result());
            };
        }
        try {

            testResultAsync(function (testResult) {
                var expectedResult = test.expected_result;
                if (testResult instanceof Array || testResult instanceof Object) {
                    testResult = JSON.stringify(testResult);
                }
                if (expectedResult instanceof Array || expectedResult instanceof Object) {
                    expectedResult = JSON.stringify(expectedResult);
                }
                if (testResult == expectedResult) {
                    $test.append($("<div>").addClass("test-result").html("Passed"));
                }
                else {
                    $test.append($("<div>").addClass("test-result").html("Failed"));
                    $test.append($("<div>").addClass("test-details").html(testResult + "<br>Different from expected: <br>" + expectedResult));
                    //$test.append($("<div>").html("<br><br>DIFF: " + diffBetweenString(testResult, expectedResult)));
                    $test.addClass("incorrect");
                }

                $container.append($test);

                callback();
            });
        }
        catch(err) {
            $test.append($("<div>").addClass("test-result").html("Failed"));
            $test.append($("<div>").addClass("test-details").html(err.message));
            $test.addClass("incorrect");
            $container.append($test);
            callback();
        }
    }

    function processTestsRecap() {
        var $container = $("#test-js");

        var $test = $("<div>").addClass("test global");
        var testCount = $(".test:not(.global-category)").length;
        var incorrectTestCount = $(".test:not(.global-category).incorrect").length;
        $test.append($("<div>").addClass("test-category-name").html("All tests"));
        if (incorrectTestCount == 0) {
            $test.append($("<div>").addClass("test-result").html(testCount + " passed"));
        }
        else {
            $test.append($("<div>").addClass("test-result").html(incorrectTestCount + "/" + testCount + " failed"));
            $test.addClass("incorrect");
        }
        $test.append($("<div>").addClass("test-details"));
        $container.prepend($test);
    }

    function processNextTest(allTests, testIndex, $container, callback) {
        if (testIndex >= allTests.length) {
            callback();
        }
        else {
            currentTestIndex = testIndex;
            processTest(allTests[testIndex], $container, function () {
                processNextTest(allTests, testIndex + 1, $container, callback);
            });
        }
    }

    function processNextTestCategory(testCategoryIndex) {
        if (testCategoryIndex >= _.keys(allInputTests).length) {
            processTestsRecap();
        }
        else {


            var $testCategory = $("<div>").addClass("test-category");
            currentTestCategory = _.keys(allInputTests)[testCategoryIndex];
            $("#test-js").append($testCategory);
            processNextTest(allInputTests[currentTestCategory], 0, $(".test-category").last(), function() {
                var $testCategory = $(".test-category").last();
                var $test = $("<div>").addClass("test global-category");
                $test.append($("<a>").addClass("test-category-name").attr("href", "?test=" + currentTestCategory).html(currentTestCategory));

                var testInCategoryCount = $testCategory.find(".test").length;
                var failedTestsInCategoryCount = $testCategory.find(".test.incorrect").length;
                if(failedTestsInCategoryCount == 0) {
                    $test.append($("<div>").addClass("test-result").html(testInCategoryCount + " passed"));
                }
                else {
                    $test.append($("<div>").addClass("test-result").html(failedTestsInCategoryCount + "/" + testInCategoryCount + " failed"));
                    $test.addClass("incorrect");
                }
                $testCategory.prepend($test);
                processNextTestCategory(testCategoryIndex + 1);
            });
        }
    }

    $(function () {
        <% if params[:test] %>
            var keys=<%== params[:test].split(",").to_json %>;
            currentTestCategory = keys[0];
            if(keys.length == 2) {
                currentTestIndex = parseInt(keys[1], 10);
                processTest(allInputTests[currentTestCategory][currentTestIndex], $("#test-js"), function() {});
            }
            else if(keys.length==1) {
                allInputTests = {};
                allInputTests[currentTestCategory] = window.tests[currentTestCategory];

                processNextTestCategory(0);
            }
        <% else %>
            processNextTestCategory(0);
        <% end %>
    });


    function diffBetweenString(stringA, stringB) {
        var i = 0;
        while (stringA.substr(0, i) == stringB.substr(0, i) && (i < stringA.length || i < stringB.length)) {
            i += 1;
        }
        if (i == stringA.length && i == stringB.length) {
            return "";
        }
        else {
            return "'" + stringA.substr(i - 1, stringA.length) + "' || '" + stringB.substr(i - 1, stringB.length) + "'";
        }
    }
    window.a = function () {
        return "go";
    }
</script>

<style>
    #test-js {
        margin: 20px auto;
        width: 800px;
    }

    .test-category {
        margin: 60px 0 120px 0;
        position: relative;
    }
    .test-category-name {
        padding: 10px;
        font-size: 20px;
        display: inline-block;
        text-decoration: none !important;
        color: white !important;
    }
    .test-title {
        display: block;
        text-decoration: none !important;
        width: 100%;
        height: 40px;
        padding: 10px;
        text-align: center;
        border-bottom: 1px solid #ccc;
        background-color: #fafafa;
        line-height: 20px;
        font-size: 20px;
        color: #444;
        font-weight: 100;
    }

    .test {
        border-bottom: 1px solid #ccc;
        padding: 5px 20px;
        border-right: 1px solid #ccc;
        border-left: 1px solid #ccc;
        display: block;
        text-decoration: none !important;
        color: #000;
        position: relative;
        font-weight: 200;
    }

    .test.global {
        border: none;
        background: #00CC7F;
        color: white;
        font-weight: 100;
    }

    .test.global-category {
        background: #00CC7F;
        color: white;
        border: none;
        font-weight: 100;
    }

    .test.incorrect {
        background: #FF6245;
        color: white;
    }

    .test .test-result {
        position: absolute;
        top: 10px;
        right: 10px;
        font-size: 18px;
        line-height: 35px;
    }
    .test .test-details {
        word-break: break-all;
    }

    #mock-panel {
        position: fixed;
        top: 0;
        left: 0;
        width: 10px;
        height: 10px;
        overflow: hidden;
    }

</style>

<a href="/test/js" class="test-title">JulieDesk BackOffice - Javascript tests</a>


<div id="test-js">

</div>