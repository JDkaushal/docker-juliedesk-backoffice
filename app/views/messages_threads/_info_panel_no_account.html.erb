<%= javascript_include_tag 'angular_dependencies' %>
<script>
    window.threadId = <%= @messages_thread.id %>;
    window.threadComputedData = <%== @messages_thread.computed_data.to_json %>;
    window.otherAccountEmails = _.filter(window.otherAccountEmails, function (email) {
        return email && email != "<%= @messages_thread.account_email %>";
    });

    window.accountAssociationMergingPossible = <%= @messages_thread.account_association_merging_possible %>;

    window.virtualAppointmentNatures = <%== MessagesThread.virtual_appointment_natures.to_json %>;

    window.allowedAttendeesEmails = [];
    window.julie_alias_emails = <%== @julie_emails.to_json %>;

    function extractEmails(text) {
      return text.match(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9._-]+)/gi);
    };

    window.isAuthorizedAttendee = function(attendeeEmail) {
      var allowedAttendees = window.threadComputedData.attendees.map(function(attendee) { return attendee.email })
          .concat(extractEmails($('#messages_container .email .body').text()) || [])
          .concat(window.threadComputedData.thread_recipients)
          .concat(['hello@juliedesk.com'])
          .filter(function(email) { return email; })
          .map(function(email) { return email.toLowerCase() });

      return  allowedAttendees.indexOf(attendeeEmail.toLowerCase()) > -1;
    };
    window.accountsAutocompleteSource = <%==
      @messages_thread.accounts_candidates.map{ |candidate_email| Account.create_for_autocomplete(candidate_email, {accounts_cache: local_assigns[:accounts_cache_light]})}.flatten.to_json
    %>;

    <% if @messages_thread.account_association_merging_possible %>
      window.allowedAccountsEmails = <%== @messages_thread.accounts_candidates %>;

    <% else %>
      window.allowedAccountsEmails = _.uniq(
          _.compact(
              _.flatten(
                  _.map(window.accountsAutocompleteSource, function(account) { return [account.email, account.email_alias]; })
              )
          )
      );
    <% end %>

  $(function() {
    $( document ).tooltip();

    initAllowedAttendeesEmails();
  });


    function extractEmails(text)
    {
      return text.match(/(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])/gi);
    };

    function allowedAttendeesAreComputed() {
      return window.threadComputedData.allowed_attendees && window.threadComputedData.allowed_attendees.length > 0;
    }

    window.addAllowedAttendeesEmailsFromCurrentNotes = function(currentNotes) {
      var emails = extractEmails(currentNotes);

      if(emails) {
        emails = _.map(emails, function(email) { return email.toLowerCase(); });
        window.addAllowedAttendeesEmails(emails);
      }
    };

    window.addAllowedAttendeesEmails = function(emails) {
      window.allowedAttendeesEmails = window.allowedAttendeesEmails.concat(emails);
      window.allowedAttendeesEmails = _.uniq(window.allowedAttendeesEmails);
    };

    window.refreshAllowedAttendeesEmails = function() {
      window.initAllowedAttendeesEmails();
      var recipientsManager = $('#recipients-manager').scope();
      if(recipientsManager)
        recipientsManager.initTokenInputs();
    };

    // Compute the list of allowed attendees from their emails
    window.initAllowedAttendeesEmails = function() {

      if(allowedAttendeesAreComputed()) {
        window.allowedAttendeesEmails = window.threadComputedData.allowed_attendees.concat(['hello@juliedesk.com']);
      } else {
        var extendedMessages = $('.email.extended');
        var notFromMeMessages = $('.email:not(".from-me")');
        // We extend every emails before computing the allowed attendees because el.innerText does not return the same formatting for the text in both cases
        notFromMeMessages.addClass('extended');

        var messageBodies = $.map($('#messages_container .email:not(".from-me") .body, .gmail_quote,blockquote, .email:not(".from-me") .ics-preview'), function(el, _) { return el.innerText }).join("\n");
        window.allowedAttendeesEmails = (window.threadComputedData.thread_recipients || [])
          // The thread main account email

          // The emails present un the messages (they are represented as <a href="fdeschamps@chu-reims.fr">fdeschamps@chu-reims.fr</a> or <a href="mailto:fdeschamps@chu-reims.fr">fdeschamps@chu-reims.fr</a>
          // So we can look for them with Jquery using the regex function '*=' on the href attribute value
          //.concat(_.map($( "a[href*='@']" ), function(node){ return $(node).text()}))
          // Extract emails from emails bodies
          .concat(extractEmails(messageBodies) || [])
          .concat(extractEmails(window.threadComputedData.constraints || '') || [])
          // The attendees of the event if any
          //.concat(_.map($('.attendees-container .attendees .attendee-email'), function(attendee) { return $(attendee).text().trim()}))
          .concat(['hello@juliedesk.com']);

        notFromMeMessages.removeClass('extended');
        extendedMessages.addClass('extended');

        window.allowedAttendeesEmails = _.map(window.allowedAttendeesEmails, function(email) { return email.toLowerCase().replace(/'/g, ""); });
        window.allowedAttendeesEmails = _.uniq(window.allowedAttendeesEmails);
      }
    };

    window.isAuthorizedAttendee = function(attendeeEmail = '') {
      return window.allowedAttendeesEmails
              .concat(window.julie_alias_emails)
              .filter(function(email) { return email; })
              .indexOf(attendeeEmail.toLowerCase()) > -1;
    };
</script>

<div class="messages-thread-info-panel">
  <div class="message-container no-account-page"><%= controller_name == "julie_actions" ? "Demandez plus d'infos sur le client" : "Associez le thread Ã  un client" %></div>

  <div id="thread-header-other-entries-container"></div>


  <div class="classic-info-panel">
    <%= render 'messages_threads/partials/no_account_tile' %>
  </div>
</div>