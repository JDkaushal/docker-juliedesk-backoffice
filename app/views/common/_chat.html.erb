<script>
    var connectedMembers = [];
    var newMessageInChat = false;
    var flashingTitle = false;
    var currentSender;

    var myName = "<%= session[:user_name] %>";

    <% if Rails.env.production? && ENV['PUSHER_APP_ID'] %>
        var pusher = new Pusher('<%= Pusher.key %>');
    <% elsif ENV['RED_SOCK_URL'] %>
        var redsock = new RedSock("<%= ENV['RED_SOCK_URL'] %>", {
            member_id: "<%= session[:operator_id] %>",
            member_name: "<%= session[:user_name] %>",
            member_email: "<%= session[:user_username] %>"
        });
    <% end %>
//    function getMembersOnThread(threadId) {
//        pusher.channel('presence-thread-' + window.processingMessageThreadId);
//    }
    $(function () {

        <% if Rails.env.production? && ENV['PUSHER_APP_ID'] %>
            var presenceChannel = pusher.subscribe('presence-global');
            presenceChannel.bind('pusher:subscription_succeeded', function (members) {
                connectedMembers = members.members;
                redrawConnectedMembers();
            });
            presenceChannel.bind('pusher:member_removed', function (member) {
                delete connectedMembers[member.id];
                redrawConnectedMembers()
            });
            presenceChannel.bind('pusher:member_added', function (member) {
                connectedMembers[member.id] = member.info;
                redrawConnectedMembers();
            });


            var channel = pusher.subscribe('private-global-chat');
            channel.bind('client-chat-message', function (data) {
                newMessage();
                appendMessage({
                    message: data.message,
                    sender: data.sender
                });
            });
            channel.bind('locks-changed', function (data) {
                if(window.redrawLocksStatuses) {
                    window.redrawLocksStatuses(data.locks_statuses);
                }
            });
            channel.bind('archive', function(data) {
                if(window.archiveMessageThread) {
                    window.archiveMessageThread(data.message_thread_id);
                }
            });
            channel.bind('new-email', function (data) {
                if($("audio#tada-sound").length > 0 && $(".sound-activator.activated").length > 0) {
                    $("audio#tada-sound")[0].play();
                }

                $(".header .global-todo-count").animate({
                    opacity: 0,
                    top: 20
                }, 300, function() {
                    $(".header .global-todo-count").html(data.messages_threads_count).css({
                        top: -20
                    }).animate({
                                opacity: 1,
                                top: 0
                            }, 300);
                });

                if(window.processingMessageThreadId && data.updated_messages_thread_ids.indexOf(window.processingMessageThreadId) > -1) {
                    alert("A new email has been received in this thread. Reload the page to see it.");
                }

                if(window.newEmailCallback) {
                    window.newEmailCallback();
                }
            });

            if(window.processingMessageThreadId) {
                var threadChannel = pusher.subscribe('presence-thread-' + window.processingMessageThreadId);

                threadChannel.bind('pusher:subscription_succeeded', function(members) {
    //                console.log("Locked Ok");
                });
                threadChannel.bind('pusher:subscription_error', function(status) {
                    $(".lock-container .unlock-btn").attr("href", "/messages_threads/" + window.processingMessageThreadId + "/unlock");
                    $(".lock-container").fadeIn(200);
                });


                var channel = pusher.subscribe("private-thread-" + processingMessageThreadId);
                channel.bind('client-merged', function(message) {
                  alert("You are on a thread that has just been merged by " + message.sender +".\nPlease reload this page.");
                });
            }


            $("#chat_input").keyup(function (e) {
                if (e.which == 13) {
                    var message = $("#chat_input").val();
                    channel.trigger('client-chat-message', {
                        message: message,
                        sender: myName
                    });
                    appendMessage({
                        message: message,
                        sender: myName
                    });
                    $("#chat_input").val("");
                }
            });
        <% elsif ENV['RED_SOCK_URL'] %>
            redsock.bindMessage('presence-global', 'redsock:members_changed', function(data) {
                connectedMembers = data;
                console.log(connectedMembers);
                redrawConnectedMembers();
            });
            redsock.subscribeToChannel('presence-global');

            redsock.subscribeToChannel('private-global-chat');
            redsock.bindMessage('private-global-chat', 'client-chat-message', function (data) {
                newMessage();
                appendMessage({
                    message: data.message,
                    sender: data.sender
                });
            });
            redsock.bindMessage('private-global-chat', 'locks-changed', function (data) {
                if(window.redrawLocksStatuses) {
                    window.redrawLocksStatuses(data.locks_statuses);
                }
            });
            redsock.bindMessage('private-global-chat', 'archive', function(data) {
                if(window.archiveMessageThread) {
                    window.archiveMessageThread(data.message_thread_id);
                }
            });
            redsock.bindMessage('private-global-chat', 'new-email', function (data) {
                if($("audio#tada-sound").length > 0 && $(".sound-activator.activated").length > 0) {
                    $("audio#tada-sound")[0].play();
                }

                $(".header .global-todo-count").animate({
                    opacity: 0,
                    top: 20
                }, 300, function() {
                    $(".header .global-todo-count").html(data.messages_threads_count).css({
                        top: -20
                    }).animate({
                        opacity: 1,
                        top: 0
                    }, 300);
                });

                if(window.processingMessageThreadId && data.updated_messages_thread_ids.indexOf(window.processingMessageThreadId) > -1) {
                    alert("A new email has been received in this thread. Reload the page to see it.");
                }

                if(window.newEmailCallback) {
                    window.newEmailCallback();
                }
            });

            if(window.processingMessageThreadId) {
                redsock.bindMessage('presence-thread-' + window.processingMessageThreadId, "subscription_success", function(members) {
                    // console.log("Locked Ok");
                });
                redsock.bindMessage('presence-thread-' + window.processingMessageThreadId, "subscription_failed", function(status) {
                    $(".lock-container .unlock-btn").attr("href", "/messages_threads/" + window.processingMessageThreadId + "/unlock");
                    $(".lock-container").fadeIn(200);
                });

                redsock.subscribeToChannel('presence-thread-' + window.processingMessageThreadId, {
                    maxConnections: 1
                });

                var threadChannel = 'thread-' + window.processingMessageThreadId;
                redsock.subscribeToChannel(threadChannel);
                redsock.bindMessage(threadChannel, 'merged', function(message) {
                  alert("You are on a thread that has just been merged by " + message.sender +".\nPlease reload this page.");
                });
            }


            $("#chat_input").keyup(function (e) {
                if (e.which == 13) {
                    var message = $("#chat_input").val();
                    redsock.sendMessage('private-global-chat', 'client-chat-message', {
                        message: message,
                        sender: myName
                    });
                    appendMessage({
                        message: message,
                        sender: myName
                    });
                    $("#chat_input").val("");
                }
            });
        <% end %>

        $("#chat_input").focus(function(e) {
            newMessageInChat = false;
            redrawConnectedMembers();
        });


        $("#chat-container .connected-members").click(function(e) {
            if($("#chat-container").hasClass("minimized")) {
                $("#chat-container").removeClass("minimized");
                $("#chat-container #chat_input").focus();
            }
            else {
                $("#chat-container").addClass("minimized");
            }
        });

        _.each(getCookieMessages(), function(messageData) {
           appendMessage({
               message: messageData.message,
               sender: messageData.sender,
               only_append: true
           })
        });
    });

    function registerInCookie() {
    }

    function getCookieMessages() {
        var messagesJson = $.cookie("chat-messages");
        if(messagesJson) {
            var messages = JSON.parse(messagesJson);
            messages = _.filter(messages, function(messageData) {
                var oneMinuteAgo = moment();
                oneMinuteAgo.add("m", -5);
                return messageData.date && moment(messageData.date) > oneMinuteAgo;
            });
            $.cookie("chat-messages", JSON.stringify(messages));
            return messages;
        }
        else {
            return [];
        }
    }

    function appendMessage(params) {
        if(!params.only_append) {
            var cookieMessages = getCookieMessages();
            cookieMessages.push({
                message: params.message,
                sender: params.sender,
                date: moment().tz("UTC").format()
            });
            $.cookie("chat-messages", JSON.stringify(cookieMessages));
        }


        var sender = params.sender;
        if(params.sender == myName) {
            sender = "Me";
        }
        var $message = $("<div>").addClass("message");
        if(currentSender != params.sender) {
            $message.append($("<span>").addClass("sender").html(sender + ": "));
            currentSender = params.sender;
        }
        else {
            $message.append($("<span>").addClass("tab"));
        }

        $message.append($("<span>").html(params.message));
        $("#chat-container .messages").append($message);
        $("#chat-container .messages").scrollTop($("#chat-container .messages")[0].scrollHeight);
        if(!params.only_append) {
            $("#chat-container").removeClass("minimized");
        }
    }

    function redrawConnectedMembers() {
        $connectedMembersDiv = $("#chat-container .connected-members");

        $connectedMembersDiv.removeClass("new-message");
        if(newMessageInChat) {
            $connectedMembersDiv.addClass("new-message");
        }
        var connectedMemberNames = [];
        for(var memberId in connectedMembers) {
            connectedMemberNames.push(connectedMembers[memberId].name);
        }
        $connectedMembersDiv.html(connectedMemberNames.join(", "));
    }

    function newMessage() {
        newMessageInChat = true;
        redrawConnectedMembers();
        flashTitle();
    }

    function flashTitle(continuing) {
        if(flashingTitle && !continuing) {
            return;
        }
        flashingTitle = true;
        var windowTitle = document.title;
        document.title = "(1) - " + windowTitle;
        setTimeout(function() {
            document.title = windowTitle;
            if(newMessageInChat) {
                setTimeout(function() {
                    flashTitle(true);
                }, 1000);
            }
            else {
                flashingTitle = false;
            }
        }, 500);
    }

</script>
<div id="chat-container" class="minimized">
  <div class="connected-members"></div>
  <div class="messages"></div>

  <%= text_field_tag :chat_input, "" %>

</div>

<div class="lock-container">
  This thread is being processed by <span class="operator-name">another operator</span>
  <br>
  <br>
  <a href="/">Back to home</a>
  <br>
  <br>
  <%= link_to "", class:"unlock-btn btn btn-warning btn-lg" do %>
      <span class="operator-name">I know This operator</span> is not present - Unlock
  <% end %>
</div>