
<script>
    window.leftColumnMessage = "Suggest dates";
    var isPostpone = <%= (messages_thread.event_data[:event_id].present?)?"true":"false" %>;

    var previousAppointment = $.grep(window.threadAccount.appointments,function(v) {
      return v.label == "<%= @messages_thread.event_data[:appointment_nature] %>";
    })[0];

    window.drawCalendarCallback = function(){
        window.activateCalendarWithParams({
          mode: "suggest_dates",
          date_times: <%== @messages_thread.suggested_date_times.select{|dt| dt['date']}.map{|dt| dt['date']}.map{|date|
          {
              mode: "already_suggested",
              date: date
          }}.to_json %>,
          compute_meeting_rooms_via_backend: true,
          email: window.threadAccount.email,
          duration: window.threadComputedData.duration
        });
    };

    window.afterReplyBoxInitCallback = function() {
        window.setReplyMessage("");
        window.initializeEmailLanguageSelector(suggestDatesSetReplyMessage);

        if(window.threadComputedData.client_agreement) {
            if(isPostpone) {
                $(".julie-action-title .title").html(localize("actions.to_do.suggest_dates.postpone"));
                window.afterEventFetched = function() {
                    window.otherEmails = [];
                    if(!window.threadComputedData.attendees_are_noticed) {
                        $("input#quote_message").removeAttr("checked");
                        $("input#include-email-in-notes").removeAttr("checked");
                    }
                    suggestDatesSetReplyMessage();
                }
            }
            else {
                $(".julie-action-title .title").html(localize("actions.to_do.suggest_dates.new_appointment"));
            }

            window.addEventListener("message", function (event) {
                if (event.data.message == "drawExternalEventsList") {
                    window.timeSlotsToSuggest = event.data.date_times;
                    window.redrawTimeSlotsToSuggestContainer();
                    suggestDatesSetReplyMessage();

                    // Scroll top on the right column to the dates propostion area
                    $('.messages-thread-info-panel').animate({
                        scrollTop: 0
                    });

                }
            });
        }
        else {
            $(".calendar-container").addClass("minimized");
            $("#show-calendar-button").hide();
            $(".julie-action-title .title").html(localize("actions.to_do.ask_agreement"));

            var messageBuilder = $('#reply-area').scope();

            // Dont generate template via Service for now here, as isPostpone is false
            window.setReplyMessage(
                messageBuilder.generateReply({
                  action: "suggest_dates",
                  client_agreement: false,
                  isPostpone: isPostpone,
                  locale: window.threadComputedData.locale
                }),
                "only_client"
            );
        }
    };

    var otherClients = function(){
        return _.filter(window.getInfoPanelAttendees(), function(attendee) {
            return attendee.isPresent && attendee.isClient && !attendee.isThreadOwner;
        });
    };

    var attendees = function(){
        return _.filter(window.getInfoPanelAttendees(), function(attendee) {
            return attendee.isPresent && !attendee.isClient;
        });
    };

    var suggestDatesSetReplyMessage = function() {
      var message = '';
      var messageBuilder = $('#reply-area').scope();
      var threadComputedData = window.threadComputedData;
      var datesSuggestionsManager = $('#dates-suggestion-manager').scope();
      var attendeesMng = $('#attendeesCtrl').scope();


      if(window.featuresHelper.isFeatureActive("template_generation_v2_for_suggest_dates") && !isPostpone) {

        var clientNames = [window.threadAccount.usage_name];
        _.each(otherClients(), function(attendee) {
          var usageName = attendee.computeUsageName();
          if(usageName){
            clientNames.push(window.helpers.capitalize(usageName));
          }
        });

        var attendeesForService = [];
        _.each(attendees(), function(attendee) {
          var usageName = attendee.computeUsageName();
          if (usageName && !attendee.isAssistant) {
            var assistedByName = null;
            var isCurrentlyAssisted = attendee.assisted && attendee.assistedBy;
            if(isCurrentlyAssisted) {
              isCurrentlyAssisted = _.some(attendees(), function(attendeeObject) {
                return attendeeObject.guid == attendee.assistedBy.guid
              });
            }

            if(isCurrentlyAssisted) {
              assistedByName = attendee.assistedBy.displayName;
            }
            attendeesForService.push({
              name: window.helpers.capitalize(usageName),
              assisted_by_name: assistedByName,
              email: attendee.email
            });
          }
        });

        var locationInEmail = {};
        if(window.getCurrentAddress() && window.getCurrentAddress().address_in_template) {
          locationInEmail = {
            en: window.getCurrentAddress().address_in_template.en,
            fr: window.getCurrentAddress().address_in_template.fr
          }
        }

        var serviceParams = {
          template: "suggest_dates",
          client_names: clientNames,
          dates: window.timeSlotsToSuggest,
          timezones: datesSuggestionsManager.getUsedTimezones(),
          default_timezone: window.threadAccount.default_timezone_id,
          locale: threadComputedData.locale,
          is_virtual: window.getCurrentAppointment().appointment_kind_hash.is_virtual,
          attendees: attendeesForService,
          appointment_type: window.getCurrentAppointment().kind,
          appointment_in_email: {
            en: window.getCurrentAppointment().title_in_email.en,
            fr: window.getCurrentAppointment().title_in_email.fr
          },
          designation_in_email: window.getCurrentAppointment().designation_in_email,

          location_in_email: locationInEmail,
          should_ask_location: window.shouldAskLocation(),
          missing_contact_info: attendeesMng.missingContactInfo(),
          linked_attendees: attendeesMng.getLinkedAttendees(),
          julie_aliases: window.getRecipientsJulieAliases()
        };

        TemplateServiceManager.getInstance().generateTemplate(serviceParams).then(function(generatedTemplate) {
          if(typeof(generatedTemplate) == "object") {
            window.setReplyMessage(generatedTemplate["text"], "all", window.otherEmails);
            window.annotatedReply = generatedTemplate["annotated_text"];
          }
          else {
            window.setReplyMessage(generatedTemplate, "all", window.otherEmails);
          }
        });

//        window.generateEmailTemplateViaService(, function(generatedTemplate) {
//          if(typeof(generatedTemplate) == 'object') {
//            window.setReplyMessage(generatedTemplate["text"], "all", window.otherEmails);
//            window.annotatedReply = generatedTemplate["annotated_text"];
//          }
//          else {
//            window.setReplyMessage(generatedTemplate, "all", window.otherEmails);
//          }
//        });
      }
      else {
        message += messageBuilder.generateReply({
          action: "suggest_dates",
          client_agreement: true,
          isPostpone: isPostpone,
          attendeesAreNoticed: window.threadComputedData.attendees_are_noticed,
          previousAppointment: previousAppointment,
          currentEventData: window.currentEventData,
          locale: threadComputedData.locale,
          appointment: window.getCurrentAppointment(),
          address: window.getCurrentAddress(),
          timeSlotsToSuggest: datesSuggestionsManager.getTimeSlotsSuggestionsForTemplate(),
          //timeSlotsToSuggest: window.timeSlotsToSuggest,
          usedTimezones: datesSuggestionsManager.getUsedTimezones(),
          threadMainTimezone: threadComputedData.timezone,
          client: window.threadAccount.usage_name,
          other_clients: _.map(otherClients(), function(attendee) {
            return attendee.computeUsageName();
          }),
          attendees: _.map(attendees(), function(attendee) {
            return attendee.computeUsageName();
          }),
          timezoneId: threadComputedData.timezone,
          defaultTimezoneId: window.threadAccount.default_timezone_id,
          callInstructions: threadComputedData.call_instructions
        });

        var currentAppointment = window.getCurrentAppointment();
        var firstDateSuggestion = <%= @first_date_suggestion %>;
        var currentAppointmentKind = currentAppointment.appointment_kind_hash.family_kind;

        if(( currentAppointmentKind == 'call' || currentAppointmentKind == 'skype' ) && !threadComputedData.call_instructions.details){
          var messageParams = {
            action: 'send_call_instructions',
            callInstructions: threadComputedData.call_instructions,
            locale: threadComputedData.locale,
            askCallInstructions: attendeesMng.mustAskCallInstructions(currentAppointmentKind),
            askingEarly: true
          };

          if(messageParams.askCallInstructions) {
            message += "\n";
            message += messageBuilder.generateReply(messageParams);
          }
        }

        if(firstDateSuggestion && currentAppointment && (currentAppointmentKind == 'skype' || currentAppointmentKind == 'call')) {
          var missingInfosMessage = attendeesMng.checkMissingInformations({redundantCourtesy: true, sticky: true, askingEarly: true, ask_early_skype: currentAppointment.kind == 'skype', ask_early_call: currentAppointment.appointment_kind_hash.family_kind == 'call'});
          if(missingInfosMessage != ''){
            message += missingInfosMessage;
          }
        }
        window.setReplyMessage(message, "all", window.otherEmails);
      }
    };

    var suggestDateReplyFunction = function() {
        $.ajax({
            url: "/julie_actions/<%= @julie_action.id %>/update",
            method: "post",
            data: {
                text: $("textarea#reply-text").val(),
                generated_text: window.currentFullMessageWithFooter,
                timezone: $('#dates_suggestion_timezone').val(),
                to: window.currentRecipients().to,
                cc: window.currentRecipients().cc,
                date_times: window.timeSlotsToSuggest,
                deleted_event: window.actionDeletedEvent,
                done: true,
                processed_in: Date.now() - window.startedAt,
                messages_thread_id: "<%= @messages_thread.id %>",
                client_settings: window.getClientSettings(),
                annotated_reply: window.annotatedReply
            }
        });
        window.sendReply();
    };

    window.clickReplyButton = function() {
      var datesSuggestionManager = $('#dates-suggestion-manager').scope();

      if(isPostpone) {
          window.deleteEventBeforeReply(function() {
            datesSuggestionManager.trackSuggestedDates();
            suggestDateReplyFunction();
          });
      }
      else {
        datesSuggestionManager.trackSuggestedDates();
        suggestDateReplyFunction()
      }
    };

</script>