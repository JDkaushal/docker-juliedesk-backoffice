<script>
    $(function () {
        redrawThreadList(<%== @messages_thread.as_json(include: [:messages], methods: [:received_at, :account]).to_json %>);
    });
    function redrawThreadList(threadsData) {
        $(".messages-threads-container").html("");
        var $toProcessLaterContainer = $("<div>").addClass("to-process-later-container");
        $toProcessLaterContainer.append($("<div>").addClass("to-process-later-category-title").html("<%= I18n.t("index.to_process_later") %>"));

        $(".nothing-to-do").hide();
        $(".messages-threads-container").show();
        if(threadsData.length == 0) {
            $(".nothing-to-do").show();
            $(".messages-threads-container").hide();
        }
        $(".header .global-todo-count").html(threadsData.length);
        for (var i in threadsData) {
            var threadData = threadsData[i];
            var $messageThreadContainer = $("<a>").attr("href", "/messages_threads/" + threadData.id).addClass("messages-thread-item");

            var $accountEmail = $("<div>").addClass("account-email");
            var accountName = "<%= I18n.t("info_box.no_account_found") %>";
            if(threadData.account) {
                accountName = threadData.account.full_name;
            }

            var messagesCount = threadData.messages.length;
            var accountEmailString = accountName;
            if (messagesCount > 1) accountEmailString = accountEmailString + " (" + messagesCount + ")";
            $accountEmail.html(accountEmailString);
            $messageThreadContainer.append($accountEmail);

            var $subjectAndSnippet = $("<div>").addClass("subject-and-snippet");
            $subjectAndSnippet.append($("<div>").addClass("subject").html(threadData.subject));
            $subjectAndSnippet.append($("<div>").addClass("snippet").html(" - " + threadData.snippet));
            $messageThreadContainer.append($subjectAndSnippet);

            var $receivedAt = $("<div>").addClass("received-at").data("date", moment(threadData.received_at).format());
            $messageThreadContainer.append($receivedAt);

            if(threadData.delegated_to_founders) {
                $messageThreadContainer.append($("<div>").addClass("delegated-to-founders").html("founders"));
            }


            if(shouldProcessLater(threadData)) {
                $toProcessLaterContainer.append($messageThreadContainer);
            }
            else {
                $(".messages-threads-container").append($messageThreadContainer);
            }
        }
        if($toProcessLaterContainer.find(".messages-thread-item").length > 0) {
            $(".messages-threads-container").append($toProcessLaterContainer);
        }
        redrawDates();
    }

    function shouldProcessLater(threadData) {
        if(threadData.account && threadData.account.company_hash) {
            var workingHours = threadData.account.company_hash.working_hours;
            var timezone = threadData.account.company_hash.timezone;
            var mNow = moment.tz(timezone);
            var day = mNow.format("ddd").toLowerCase();
            if(workingHours[day]) {
                var currentWorkingHoursItem = _.find(workingHours[day], function(workingHoursItem) {
                    var start = parseInt(workingHoursItem[0]);
                    var end = parseInt(workingHoursItem[1]);
                    var mStart = mNow.clone().set("h", start/100).set("m", start%100).set("s", 0);
                    var mEnd = mNow.clone().set("h", end/100).set("m", end%100).set("s", 0);
                    console.log(mStart.format(), mEnd.format());
                    return mNow >= mStart && mNow <= mEnd;
                });
                return currentWorkingHoursItem == undefined;
            }
            else {
                return true;
            }
        }
        else {
            return false;
        }
    }

    function redrawDates() {
        $(".received-at").each(function () {
            var date = $(this).data("date");
            $(this).html(moment(date).locale("<%= I18n.locale %>").fromNow());
        });
    }

    function refreshInbox(forceRefresh) {
        $(".spinner").css({display: "block"});
        $(".refresh-inbox-button").attr("disabled", true);

        var url ="<%= messages_threads_path %>";
        if (forceRefresh) {
            url = "<%= index_with_import_messages_threads_path %>";
        }
        $.ajax({
            url: url,
            type: "get",
            dataType: "json",
            success: function (e) {
                redrawThreadList(e.data);
                $(".spinner").hide();
                $(".refresh-inbox-button").removeAttr("disabled");
            },
            error: function(e) {
                $(".spinner").hide();
                console.log(e);
                $(".refresh-inbox-button").removeAttr("disabled");
                alert("There was an error.");
            }
        });
    }

    window.newEmailCallback = function() {
        refreshInbox(false);
    };


    $(function () {
        setInterval(function () {
            redrawDates();
        }, 3000);

        $(".refresh-inbox-button").click(function () {
            refreshInbox(true);
        });
    });
</script>

<% count = MessagesThread.items_to_classify_count %>

<div class="fixed-columns full">
  <div class="left-column">

    <%= render partial: "common/header" %>



    <div class="messages-threads-page">
      <div class="refresh-container">
        <button class="btn btn-success refresh-inbox-button"><%= I18n.t("common.refresh") %></button>
        <%= image_tag "ajax-loader.gif", class: "spinner" %>
      </div>

      <div class="messages-threads-container"></div>

      <div class="nothing-to-do">
        <%= image_tag "smiley.png" %>
        <div><%= I18n.t("index.nothing_to_do") %></div>
      </div>
    </div>
  </div>
</div>