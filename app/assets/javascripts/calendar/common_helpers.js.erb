window.CommonHelpers = {};
window.CommonHelpers.localize = function(str, locale) {
    return str;
};

window.CommonHelpers.getLocale = function() {
    return "fr";
};
window.CommonHelpers.filterEvents = function(events) {
    return $.grep(events, function(event) {
        if(event.attendees) {
            var declined = false;
            $.each(event.attendees, function(k, attendee) {
                if(attendee.self && attendee.responseStatus == "declined") {
                    declined = true;
                    return false;
                }
            });
            if(declined) {
                return false;
            }
        }
        return true;
    });
};

// Staging Utility methods *******************************

function isStagingEnv(){
    var stagingEnvNode;

    var stagingMode = false;
    stagingEnvNode = $('#staging_mode');

    if(stagingEnvNode.length > 0){
        stagingMode = stagingEnvNode.val();
    }

    return stagingMode;
};

function getStagingCalendarLoginEmail(){
    var stagingCalendarLoginEmailNode;

    var stagingCalendarLoginEmail = '';

    stagingCalendarLoginEmailNode = $('#staging_calendar_login_email');

    if(stagingCalendarLoginEmailNode.length > 0){
        stagingCalendarLoginEmail = stagingCalendarLoginEmailNode.val();
    }

    return stagingCalendarLoginEmail;
}

function getStagingTargetEmail(){
    var stagingTargetEmailNode;

    var stagingTargetEmail = '';

    stagingTargetEmailNode = $('#staging_target_email');

    if(stagingTargetEmailNode.length > 0){
        stagingTargetEmail = stagingTargetEmailNode.val();
    }

    return stagingTargetEmail;
};

function getStagingEventApiEndpoint(){
    var stagingEventApiEndpointNode;

    var stagingEventApiEndpoint = '';

    stagingEventApiEndpointNode = $('#staging_event_api_endpoint');

    if(stagingEventApiEndpointNode.length > 0){
        stagingEventApiEndpoint = stagingEventApiEndpointNode.val();
    }

    return stagingEventApiEndpoint;
};

function saveAttendeesStaging(event_id, attendees){
    $.ajax({
        url: "/staging/save_attendees",
        type: "POST",
        contentType: "application/json",
        data: JSON.stringify({
            event_id: event_id,
            attendees: attendees
        }),
        success: function(e) {
            console.log(e);
            if(!e.success){
                alert('error saving attendees in staging mode');
            }
        },
        error: function(e) {
            console.log(e);
            alert('error saving attendees in staging mode');
        }
    });
};

window.CommonHelpers.replaceCurrentCalendarAccountStaging = function(){
    window.threadComputedData.default_calendar_login_type = 'GoogleLogin';
    window.threadComputedData.default_calendar_login_username = getStagingTargetEmail();
};
// ***************************************************************

window.CommonHelpers.externalRequest = function (request, callback, error_callback) {
    var host = '';

    var staging_mode = isStagingEnv();
    if(staging_mode){
        console.log('STAGING');
        host = getStagingEventApiEndpoint();
        var email = getStagingTargetEmail();
        var calendarLoginEmail = getStagingCalendarLoginEmail();
        console.log('host',host);
        console.log(request);

        if(request.hasOwnProperty('email') && request.action != "show_account" && request.action != "getJulieDeskPreferences"){
            request['email'] = email;
        }

        if(request.hasOwnProperty('calendar_login_username')){
            request['calendar_login_username'] = calendarLoginEmail;
        }

//        if(request.hasOwnProperty('calendar_login_username') && request.action != "get_event" && request.action != "update_event"){
//            request['calendar_login_username'] = calendarLoginEmail;
//        }

        if(request.action == "create_event" || request.action == "update_event"){
            var realAttendees = request.attendees;
            request.attendees = [];
        }
    }
    else{
        host = "<%= ENV['JULIEDESK_APP_BASE_PATH'] %>";
    }


    var access_key = "<%= ENV['JULIEDESK_APP_API_KEY'] %>";

    //console.log("Receiving request: ", request);
    if(request.action == "getJulieDeskPreferences") {
        $.ajax({
            url: host + "/api/v1/accounts/show?email=" + request.email,
            type: "GET",
            beforeSend: function(xhr){
                xhr.setRequestHeader("Authorization", access_key);
            },
            contentType: "application/json",
            error: function(e) {
                console.log("Error: ", e);
            },
            success: function(response) {
                //console.log(response);
                callback(response.data);
            }
        });
    }
    else if(request.action == "calendars"){
        $.ajax({
            url: host + "/api/v1/calendar_proxy/calendars_list",
            data: {
                email: request.email
            },
            beforeSend: function(xhr){
                xhr.setRequestHeader("Authorization", access_key);
            },
            success: function(data) {
                callback({
                  items: data.items,
                  email: request.email,
                  statuses: data.statuses
                });
            }
        });
    }
    else if(request.action == "deploy_constraints"){
        $.ajax({
            url: host + "/api/v1/calendar_proxy/deploy_constraints",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify({
                constraints_data: request.constraints_data,
                start: request.start,
                end: request.end
            }),
            beforeSend: function(xhr){
                xhr.setRequestHeader("Authorization", access_key);
            },
            success: function(data) {
                callback({
                    data: data.data
                });
            }
        });
    }
    else if(request.action == "events") {
        $.ajax({
            url: host + "/api/v1/calendar_proxy/events_list",
            // We need to use a post request here because when there are many meeting rooms the request entity becomes too large
            type: "POST",
            tryCount : 0,
            retryLimit : 5,
            data: {
              start: request.start,
              end: request.end,
              email: request.email,
              calendar_ids: request.calendar_ids,
              as_at_date: request.as_at_date,
              // This attribute allows us to complement the default calendars to show of a user with others calendars
              // (Used primarily with the meeting rooms)
              // As opposed to the calendar_ids attribute that will override them
              meeting_rooms_to_show: request.meeting_rooms_to_show,
              // Virtual resources bound to a User via its company, we fetch the events on the associated calendars and return them so we can compute them
              // and display the duration that are busy on every single one
              virtual_resources_to_show: request.virtual_resources_to_show,
              parallelize: true,
              linked_attendees: request.linked_attendees
            },
            beforeSend: function(xhr){
                xhr.setRequestHeader("Authorization", access_key);
                if(request.trackingId) {
                  xhr.setRequestHeader("X-JD-REQUEST-TRACKING-ID", request.trackingId);
                }
            },
            success: function(data) {
                if(data.status == "error" && data.code == "AccessExpired") {
                    alert("Office 365 access expired for account: " + request.email);
                }
                else {
                    callback({
                        items: CommonHelpers.filterEvents(data.items),
                        key: request.key
                    });
                }
            },
            error: function(xhr, textStatus, errorThrown) {
                console.log("Error");
                this.tryCount++;
                if (this.tryCount <= this.retryLimit) {
                    console.log("Retrying...");
                    $.ajax(this);
                    return;
                }
                console.log("Retried too many times");
            }
        });
    }
    else if(request.action == "create_event") {
      var createEvent = function() {
        $.ajax({
          url: host + "/api/v1/calendar_proxy/event_create",
          type: "POST",
          contentType: "application/json",
          beforeSend: function(xhr){
            xhr.setRequestHeader("Authorization", access_key);
          },
          data: JSON.stringify({
            email: request.email,
            calendar_login_username: request.calendar_login_username,
            summary: request.summary,
            description: request.description,
            attendees: request.attendees,
            all_day: request.all_day,
            location: request.location,
            private: request.private,
            start: request.start,
            end: request.end,
            start_timezone: request.start_timezone,
            end_timezone: request.end_timezone,
            utc_offset: request.utc_offset,
            recurrence: request.recurrence,
            call_instructions: window.threadComputedData.call_instructions,
            meeting_room: request.meeting_room,
            virtual_resource_id: request.virtual_resource_id,
            messages_thread_id: window.threadId
          }),
          success: function(e) {
            if(e.status == "success") {
              if(staging_mode){
                saveAttendeesStaging(e.data.event_id, realAttendees);
                if(window.threadComputedData.using_restaurant_booking && request.location && window.classification != 'unknown') {
                  $('#restaurant-booking-manager').scope().sendAdminEmail({
                    type: 'booking',
                    user_email: window.threadAccount.email,
                    booking_date: request.start,
                    // the attendees count is set by the restaurant-booking-manager app
                    location: request.location,
                    thread_id: window.processingMessageThreadId
                  }, callback(e));
                } else {
                  callback(e);
                }
              }else{
                // We send the restaurant booking email to the admins only when using the functionnality and
                // when a location is actually set
                if(window.threadComputedData.using_restaurant_booking && request.location && window.classification != 'unknown') {
                  $('#restaurant-booking-manager').scope().sendAdminEmail({
                    type: 'booking',
                    user_email: window.threadAccount.email,
                    booking_date: request.start,
                    // the attendees count is set by the restaurant-booking-manager app
                    location: request.location,
                    thread_id: window.processingMessageThreadId
                  }, callback(e));
                } else {
                  callback(e);
                }
              }
            }
            else {
              error_callback(e);
            }
          },
          error: function(e) {
            error_callback(e);
          }
        });
      }

        var clientAttendees = window.currentAttendees
            .filter(function(attendee) { return attendee["isClient"] == "true" && attendee["isPresent"] == "true" })
            .map(function(attendee) { return attendee.account_email });

        if(clientAttendees.length > 0) {
          $.ajax({
            url: host + "/api/v1/calendar_proxy/last_change",
            type: "POST",
            contentType: "application/json",
            beforeSend: function (xhr) {
              xhr.setRequestHeader("Authorization", access_key);
            },
            data: JSON.stringify({client_emails: clientAttendees}),
            success: function (e) {
              var lastCalendarChanges = e.data ? moment(e.data) : null;
              var lastOperatorSync = window.lastEventSync ? moment(window.lastEventSync) : null;
              if (lastCalendarChanges && lastOperatorSync && lastCalendarChanges > lastOperatorSync)
                alert("L'événement n'a pas été créé car le calendrier d'un des clients ne semble plus à jour, veuillez recharger la page et reprendre votre vérification des disponibilités.");
              else
                createEvent();
            }
          });
        }
        else
          createEvent();
    }
    else if(request.action == "update_event") {
        if(staging_mode){
            saveAttendeesStaging(request.event_id, realAttendees);
        }

        if(window.currentEventTile) {
            var oldEvent = window.currentEventTile.event;
        }

        $.ajax({
            url: host + "/api/v1/calendar_proxy/event_update",
            type: "POST",
            contentType: "application/json",
            beforeSend: function(xhr){
                xhr.setRequestHeader("Authorization", access_key);
            },
            data: JSON.stringify({
                email: request.email,
                calendar_login_username: request.calendar_login_username,
                event_id: request.event_id,
                event_url: request.event_url,
                calendar_id: request.calendar_id,
                summary: request.summary,
                description: request.description,
                attendees: request.attendees,
                all_day: request.all_day,
                location: request.location,
                private: request.private,
                busy: request.busy,
                start: request.start,
                end: request.end,
                start_timezone: request.start_timezone,
                end_timezone: request.end_timezone,
                utc_offset: request.utc_offset,
                recurrence: request.recurrence,
                // We use occurrences with IcloudLogin when updating the recurring event so we don't loose the exceptions if any
                occurrences: request.occurrences,
                saving_occurrence: request.saving_occurrence,
                original_start: request.original_start,
                original_end: request.original_end,
                original_summary: request.original_summary,
                original_location: request.original_location,
                recurring_event: request.recurringEvent,
                deleting_occurrence: request.deletingOccurrence,
                call_instructions: window.threadComputedData.call_instructions,
                meeting_room: request.meeting_room,
                virtual_resource_id: request.virtual_resource_id
            }),
            success: function(e) {
                var restaurantBookingManager = $('#restaurant-booking-manager').scope();

                // We check if we are editing the correct event (not updating a busy/free event)
                if(restaurantBookingManager.getUsingRestaurantBooking()) {
                  if(oldEvent.id == request.event_id) {
                    if(request.location) {
                        if(window.threadComputedData.restaurant_booking_details.restaurant == '') {
                            restaurantBookingManager.sendAdminEmail({
                                type: 'booking',
                                user_email: window.threadAccount.email,
                                booking_date: request.start,
                                // the attendees count is set by the restaurant-booking-manager app
                                location: request.location,
                                thread_id: window.processingMessageThreadId
                            }, callback(e));
                        } else if(window.threadComputedData.restaurant_booking_details.restaurant != request.location) {
                            restaurantBookingManager.sendAdminEmail({
                                type: 'cancellation',
                                user_email: window.threadAccount.email,
                                booking_date: oldEvent.start.format(),
                                location: window.threadComputedData.restaurant_booking_details.restaurant,
                                thread_id: window.processingMessageThreadId
                            }, restaurantBookingManager.sendAdminEmail({
                                type: 'booking',
                                user_email: window.threadAccount.email,
                                booking_date: request.start,
                                // the attendees count is set by the restaurant-booking-manager app
                                location: request.location,
                                thread_id: window.processingMessageThreadId
                            }, callback(e)));
                        } else if(oldEvent.start.format() != request.start) {
                            restaurantBookingManager.sendAdminEmail({
                                type: 'postpone',
                                user_email: window.threadAccount.email,
                                old_booking_date: oldEvent.start.format(),
                                booking_date: request.start,
                                // the attendees count is set by the restaurant-booking-manager app
                                location: request.location,
                                thread_id: window.processingMessageThreadId
                            }, callback(e));
                        } else {
                          callback(e);
                        }
                    } else {
                        if(window.threadComputedData.restaurant_booking_details.restaurant) {
                            restaurantBookingManager.sendAdminEmail({
                                type: 'cancellation',
                                user_email: window.threadAccount.email,
                                booking_date: request.start,
                                location: window.threadComputedData.restaurant_booking_details.restaurant,
                                thread_id: window.processingMessageThreadId
                            }, callback(e));
                        } else {
                          callback(e);
                        }
                    }
                  } else {
                    callback(e);
                  }
                } else {
                  // When uncheking the restaurant booking functionnality after having booked a restaurant
                  if(window.threadComputedData.using_restaurant_booking && window.threadComputedData.restaurant_booking_details.restaurant) {
                    restaurantBookingManager.sendAdminEmail({
                      type: 'cancellation',
                      user_email: window.threadAccount.email,
                      booking_date: request.start,
                      location: window.threadComputedData.restaurant_booking_details.restaurant,
                      thread_id: window.processingMessageThreadId
                    }, callback(e));
                  } else {
                    callback(e);
                  }
                }
            },
            error: function(e) {
                error_callback(e);
            }
        });
    }
    else if(request.action == "delete_event") {
        if(window.currentEventTile) {
            var oldEvent = window.currentEventTile.event;
        }
        $.ajax({
            url: host + "/api/v1/calendar_proxy/event_delete",
            type: "POST",
            contentType: "application/json",
            beforeSend: function(xhr){
                xhr.setRequestHeader("Authorization", access_key);
            },
            data: JSON.stringify({
                email: request.email,
                calendar_login_username: request.calendar_login_username,
                event_id: request.event_id,
                event_url: request.event_url,
                calendar_id: request.calendar_id,
                instance_id: request.instance_id
            }),
            success: function(e) {

                var restaurantBookingManager = $('#restaurant-booking-manager').scope();

                if(restaurantBookingManager && restaurantBookingManager.getUsingRestaurantBooking() && oldEvent.id == request.event_id) {
                  if(window.threadComputedData.restaurant_booking_details.restaurant) {
                    restaurantBookingManager.sendAdminEmail({
                      type: 'cancellation',
                      user_email: window.threadAccount.email,
                      booking_date: oldEvent.start.format(),
                      location: window.threadComputedData.restaurant_booking_details.restaurant,
                      thread_id: window.processingMessageThreadId
                    }, callback(e));
                  }
                } else {
                  // When uncheking the restaurant booking functionality then deleting the event
                  if(window.threadComputedData.using_restaurant_booking && window.threadComputedData.restaurant_booking_details.restaurant) {
                    restaurantBookingManager.sendAdminEmail({
                      type: 'cancellation',
                      user_email: window.threadAccount.email,
                      booking_date: oldEvent.start.format(),
                      location: window.threadComputedData.restaurant_booking_details.restaurant,
                      thread_id: window.processingMessageThreadId
                    }, callback(e));
                  } else {
                    callback(e);
                  }
                }
            },
            error: function(e) {
                error_callback(e);
            }
        });
    }
    else if(request.action == "get_event") {
        $.ajax({
            url: host + "/api/v1/calendar_proxy/event_get",
            type: "GET",
            contentType: "application/json",
            beforeSend: function(xhr){
                xhr.setRequestHeader("Authorization", access_key);
            },
            data: {
                email: request.email,
                calendar_login_username: request.calendar_login_username,
                event_id: request.event_id,
                event_url: request.event_url,
                calendar_id: request.calendar_id,
                fetching_recurring_master: request.fetching_recurring_master
            },
            success: function(e) {
                if(staging_mode){
                    var getEventResponse = e;
                    $.ajax({
                        url: "/staging/get_attendees",
                        type: "GET",
                        contentType: "application/json",
                        data: {
                            event_id: request.event_id
                        },
                        success: function(e) {
                            console.log(e);
                            getEventResponse.data['attendees'] = e.data;
                            console.log(getEventResponse);
                            if(e.success) {
                                callback(getEventResponse);
                            }else{
                                alert('error getting attendees in staging mode');
                            }
                        },
                        error: function(e) {
                            console.log(e);
                            alert('error getting attendees in staging mode');
                        }
                    });
                    console.log('get_event', e);
                }
                else{
                    callback(e);
                }
            },
            error: function(e) {
                console.log(e);
                error_callback(e);
            }
        });
    }

    else if(request.action == "show_account") {
        $.ajax({
            url: host + "/api/v1/accounts/show/",
            type: "GET",
            contentType: "application/json",
            beforeSend: function(xhr){
                xhr.setRequestHeader("Authorization", access_key);
            },
            data: {
                email: request.email
            },
            success: function(e) {
                callback(e);
            },
            error: function(e) {
                console.log(e);
                error_callback(e);
            }
        });
    }
};


CommonHelpers.formatDateTimeRange = function(startDate, endDate, locale, timezone, allDay) {
    if(!locale) locale = "en";
    var mStartDate, mEndDate, today;
    var formattedStartDate, formattedEndDate;
    if(allDay) {
        // startDate et endDate are momentJs objects so we use the string used to
        mStartDate = moment(startDate._i).locale(locale);
        mEndDate = moment(endDate._i).locale(locale);
        if(mEndDate > mStartDate)
          mEndDate.add(-1, 'd');

        today = moment();

        formattedStartDate = (mStartDate.isSame(today, "day") ? (localize("dates.today") + " " + mStartDate.format("dddd D MMMM YYYY")) : mStartDate.format("dddd D MMMM YYYY"));
        formattedEndDate = (mEndDate.isSame(today, "day") ? (localize("dates.today") + " " + mEndDate.format("dddd D MMMM YYYY")) : mEndDate.format("dddd D MMMM YYYY"));

        if(mStartDate.format("YYYY-MM-DD") == mEndDate.format("YYYY-MM-DD")) {
            return formattedStartDate;
        }
        else {
            return formattedStartDate + " -<br>" + formattedEndDate;
        }
    }
    else {
        mStartDate = moment(startDate).tz(timezone).locale(locale);
        mEndDate = moment(endDate).tz(timezone).locale(locale);

        today = moment();

        formattedStartDate = (mStartDate.isSame(today, "day") ? (localize("dates.today") + " " + mStartDate.format("dddd D MMMM YYYY")) : mStartDate.format("dddd D MMMM YYYY"));
        formattedEndDate = (mEndDate.isSame(today, "day") ? (localize("dates.today") + " " + mEndDate.format("dddd D MMMM YYYY")) : mEndDate.format("dddd D MMMM YYYY"));

        if(mStartDate.format("YYYY-MM-DD") == mEndDate.format("YYYY-MM-DD")) {
            return formattedStartDate + "<br>" + mStartDate.format("HH:mm") + " - " + mEndDate.format("HH:mm") + "<br>(" + timezone.replace(/_/g, " ") + ")";
        }
        else {
            return formattedStartDate + mStartDate.format(" HH:mm") + " -<br>" + formattedEndDate + mEndDate.format(" HH:mm") + "<br>(" + timezone.replace(/_/g, " ") + ")";
        }
    }
};

CommonHelpers.formatDateTimeRangeInText = function(startDate, endDate, locale, timezone, allDay) {
    if(!locale) locale = "en";
    var mStartDate, mEndDate, today, tomorrow;

    var formattedStartDate, formattedEndDate;
    if(allDay) {
        mStartDate = moment(startDate).utc().locale(locale);
        mEndDate = moment(endDate).utc().locale(locale);
        mEndDate.add(-1, 'd');

        formattedStartDate = mStartDate.format(localize("email_templates.common.simplified_date_format"));
        formattedEndDate = mEndDate.format(localize("email_templates.common.simplified_date_format"));

        today = moment();
        tomorrow = today.clone().add(1, 'd');

        if(mStartDate.isSame(today, "day"))
            formattedStartDate = localize("dates.today") + ', ' + formattedStartDate;
        else if(mStartDate.isSame(tomorrow, "day"))
            formattedStartDate = localize("dates.tomorrow") + ', ' + formattedStartDate;

        if(mStartDate.format("YYYY-MM-DD") == mEndDate.format("YYYY-MM-DD")) {
            return formattedStartDate;
        }
        else {
            return formattedStartDate + " - " + formattedEndDate;
        }
    }
    else {
        mStartDate = moment(startDate).tz(timezone).locale(locale);
        mEndDate = moment(endDate).tz(timezone).locale(locale);

        formattedStartDate = mStartDate.format(localize("email_templates.common.simplified_date_format"));
        formattedEndDate = mEndDate.format(localize("email_templates.common.simplified_date_format"));

        today = moment().tz(timezone);
        tomorrow = today.clone().add(1, 'd');

        if(mStartDate.isSame(today, "day"))
            formattedStartDate = localize("dates.today") + ', ' + formattedStartDate;
        else if(mStartDate.isSame(tomorrow, "day"))
            formattedStartDate = localize("dates.tomorrow") + ', ' + formattedStartDate;

        if(mEndDate.isSame(today, "day"))
            formattedEndDate = localize("dates.today") + ', ' + formattedEndDate;
        else if(mEndDate.isSame(tomorrow, "day"))
            formattedEndDate = localize("dates.tomorrow") + ', ' + formattedEndDate;

        if(mStartDate.format("YYYY-MM-DD") == mEndDate.format("YYYY-MM-DD")) {
            return formattedStartDate + ", " + mStartDate.format(localize("email_templates.common.full_time_format")) + " - " + mEndDate.format(localize("email_templates.common.full_time_format")) + " (" + timezone.replace(/_/g, " ") + ")";
        }
        else {
            return formattedStartDate + " " + localize("email_templates.common.date_time_separator") + " " + mStartDate.format(localize("email_templates.common.full_time_format")) + " - " + formattedEndDate + " " + localize("email_templates.common.date_time_separator") + " " + mEndDate.format(localize("email_templates.common.full_time_format")) + " (" + timezone.replace(/_/g, " ") + ")";
        }
    }

};