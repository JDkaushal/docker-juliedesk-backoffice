<script>
    var app = angular.module("backofficeApp", []);
    app.controller("MessagesThreadsListCtrl", function($scope, $http, $sce) {

        $("body").on("click", ".messages-thread-item", function(e) {
            var target = $(this).attr("href");
            var messagesThreadId = $(this).data("id");
            var messagesThread = _.find($scope.messagesThreads, function(thread) {
                return thread.id == messagesThreadId
            });
            e.preventDefault();
            trackEvent("Click_on_thread", {
                distinct_id: "<%= session[:operator_id]%>-" + messagesThread.id,
                thread_id: messagesThread.id,
                thread_messages_count: messagesThread.messages.length
            }, function() {
                window.location = target;
            });
        });

        var serverTimestamp = <%= Time.now.to_i %>;
        var localTimestamp = parseInt(moment().format("X"));

        $scope.showWrongClock = serverTimestamp > localTimestamp + 5 * 60 || serverTimestamp < localTimestamp - 5 * 60;
        $scope.isAdmin = <%= (session[:privilege] == "admin")?"true":"false" %>;
        $scope.refreshInbox = function(forceRefresh) {
            $scope.loading = true;
            $(".refresh-inbox-button").attr("disabled", true);

            var url ="<%= messages_threads_path(format: "json") %>";
            if (forceRefresh) {
                url = "<%= index_with_import_messages_threads_path(format: "json") %>";
            }
            $http.get(url)
                    .success(function(e) {
                        $scope.loading = false;
                        $scope.messagesThreads = e.data;
                        $(".header .global-todo-count").html($scope.messagesThreads.length);
                    })
                    .error(function(e) {
                        $scope.loading = false;
                        if(e != null) {
                            console.log(e);
                            alert("There was an error.");
                        }
                    });
        };

        $scope.formatDate = function(messageThread) {
            var dates = _.map(_.filter(messageThread.messages, function(message) {
                return !message.archived;
            }), function(message) {
                return moment(message.received_at);
            });
            if(dates.length > 0) {
                return moment(_.min(dates)).locale("<%= I18n.locale %>").fromNow();
            }
            else {
                dates = _.map(messageThread.messages, function(message) {
                    return moment(message.received_at);
                });
                if(dates.length > 0) {
                    return moment(_.max(dates)).locale("<%= I18n.locale %>").fromNow();
                }
                else {
                    return "";
                }
            }
        };

        $scope.toProcessLaterMessagesThreads = function() {
            return _.filter($scope.messagesThreads, function(messagesThread) {
               return !$scope.shouldFollowUp(messagesThread) && $scope.shouldProcessLater(messagesThread);
            });
        };

        $scope.toProcessNowMessagesThreads = function() {
            return _.filter($scope.messagesThreads, function(messagesThread) {
                return !$scope.shouldFollowUp(messagesThread) && !$scope.shouldProcessLater(messagesThread);
            });
        };

        $scope.toFollowUpMessagesThreads = function() {
          return _.filter($scope.messagesThreads, function(messagesThread) {
            return $scope.shouldFollowUp(messagesThread);
          })
        };

        $scope.shouldFollowUp = function(messagesThread) {
          return (messagesThread.should_follow_up && !messagesThread.in_inbox) ||
              ((new RegExp("RÃ©capitulatif hebdomadaire de la semaine du")).test(messagesThread.subject)) ||
              ((new RegExp("weekly recap")).test(messagesThread.subject));
        };

        $scope.lockedMessagesThreads = function() {
            return _.filter($scope.messagesThreads, function(messagesThread) {
                return messagesThread.locked_by_operator_id != undefined;
            });
        };

        $scope.unlockedMessagesThreads = function() {
            return _.filter($scope.messagesThreads, function(messagesThread) {
                return messagesThread.locked_by_operator_id == undefined;
            });
        };

        $scope.messagesThreadToProcess = function() {
            var possibleMessagesThreads = $scope.unlockedMessagesThreads();

            possibleMessagesThreads = _.sortBy(possibleMessagesThreads, function(messagesThread) {
                return messagesThread.date;
            });
            if(possibleMessagesThreads.length > 0) {
                return possibleMessagesThreads[possibleMessagesThreads.length - 1];
            }
            else {
                return null;
            }
        };

        $scope.labelInRow = function(messagesThread) {
            if(messagesThread.delegated_to_founders) {
                return "founders";
            }
            else {
                if(messagesThread.delegated_to_support) {
                    return "support";
                }
                else {
                    if(messagesThread.account) {
                        if(messagesThread.account.office_365_refresh_token_expired) {
                            return "tkn expird";
                        }
                        else {
                            if(messagesThread.account.only_admin_can_process) {
                                return "admin only";
                            }
                            else {
                                if(messagesThread.account.only_support_can_process) {
                                    return "VIP";
                                }
                                else {
                                    return null;
                                }
                            }
                        }
                    }
                    else {
                        return "support only";
                    }
                }
            }
        };

        $scope.shouldProcessLater = function(messagesThread) {
            if(messagesThread.account && messagesThread.account.company_hash) {
                var workingHours = messagesThread.account.company_hash.working_hours;
                var timezone = messagesThread.account.company_hash.timezone;
                var mNow = moment.tz(timezone);
                var day = mNow.format("ddd").toLowerCase();
                if(workingHours[day]) {
                    var currentWorkingHoursItem = _.find(workingHours[day], function(workingHoursItem) {
                        var start = parseInt(workingHoursItem[0]);
                        var end = parseInt(workingHoursItem[1]);
                        var mStart = mNow.clone().set("h", start/100).set("m", start%100).set("s", 0);
                        var mEnd = mNow.clone().set("h", end/100).set("m", end%100).set("s", 0);
                        //console.log(mStart.format(), mEnd.format());
                        return mNow >= mStart && mNow <= mEnd;
                    });
                    if(currentWorkingHoursItem == undefined) {
                        return true;
                    }
                }
                else {
                    return true;
                }
            }

            return false;
        };

        window.newEmailCallback = function() {
            $scope.refreshInbox(false);
            $scope.$apply();
        };

        window.redrawLocksStatuses = function(lockStatuses) {
            $scope.messagesThreads = _.each($scope.messagesThreads, function(messagesThread) {
                messagesThread.locked_by_operator_id = null;
                _.each(lockStatuses, function(lockStatus) {
                    if(lockStatus.messages_thread_id == messagesThread.id) {
                        messagesThread.locked_by_operator_id = 1;
                        messagesThread.locked_by_operator_name = lockStatus.operator_name;
                    }
                });
            });

            $scope.$apply();
        };

        window.archiveMessageThread = function(messageThreadId) {
            $scope.messagesThreads = _.filter($scope.messagesThreads, function(messagesThread) {
                return messagesThread.id !=  messageThreadId;
            });
            $scope.$apply();
        };

        $scope.refreshInbox(false);
    });
</script>

<div class="fixed-columns full">
  <div class="left-column">

    <%= render partial: "common/header" %>




    <div class="messages-threads-page" ng-app="backofficeApp" ng-controller="MessagesThreadsListCtrl">
      <div class="wrong-clock" ng-show="showWrongClock">
        Your system time is not correct. Please fix it.<br>
        Please visit <a href="http://time.is/" target="_blank">http://time.is/</a> to get the correct time,<br>
        and <a href="/">reload the backoffice</a>.
      </div>

      <div class="refresh-container">
        <button class="btn btn-default btn-sm refresh-inbox-button" ng-click="refreshInbox(true)" ng-disabled="loading"><%= I18n.t("common.refresh") %></button>
        <%= image_tag "ajax-loader.gif", class: "spinner", "ng-show" => "loading" %>
      </div>


      <div class="action-to-do-container" ng-show="toProcessNowMessagesThreads().length == 0 && !loading">
          <div class="nothing-to-do">
            <div class="smiley"></div>
            <div><%= I18n.t("index.nothing_to_do") %></div>
          </div>
      </div>


      <div ng-show="toProcessNowMessagesThreads().length > 0">
        <div class="messages-threads-container bordered">
          <div ng-repeat="messagesThread in toProcessNowMessagesThreads()">
            <%= render "row_in_list" %>
          </div>
        </div>
      </div>

      <div ng-show="isAdmin && toProcessLaterMessagesThreads().length > 0">
        <div class="category-title"><%= I18n.t("index.to_process_later") %></div>
        <div class="messages-threads-container bordered">
          <div ng-repeat="messagesThread in toProcessLaterMessagesThreads()">
            <%= render "row_in_list" %>
          </div>
        </div>
      </div>

      <div ng-show="toFollowUpMessagesThreads().length > 0">
        <div class="category-title"><%= I18n.t("index.to_follow_up") %></div>
        <div class="messages-threads-container bordered">
          <div ng-repeat="messagesThread in toFollowUpMessagesThreads()">
            <%= render "row_in_list" %>
          </div>
        </div>
      </div>

      <%= render partial: "common/footer" %>
    </div>
  </div>
</div>