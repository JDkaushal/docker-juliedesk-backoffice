<script>

    var app = angular.module("mergingApp", ['ngTagsInput']);
    app.config(function(tagsInputConfigProvider) {
        tagsInputConfigProvider.setDefaults('tagsInput', {
            placeholder: ''
        });
    });

    app.controller("mergingPanelController", function($scope, $http, $sce) {
        $scope.queryTags = <%== @messages_thread.messages.map{ |message|
            ApplicationHelper.find_addresses(message.server_message['from']).addresses.map(&:address)
        }.flatten.uniq.map{|email|
        {
            text: email
        }
        }.to_json %>;
        $scope.offset = 0;
        $scope.limit = 5;
        $scope.currentThreadId = <%= @messages_thread.id %>;

        $scope.loadTags = function(query) {
            var possibleEmails =  <%== (@messages_thread.messages.map{ |message|
            ApplicationHelper.find_addresses(message.server_message['from']).addresses.map(&:address) +
            ApplicationHelper.find_addresses(message.server_message['to'] || "").addresses.map(&:address) +
            ApplicationHelper.find_addresses(message.server_message['cc'] || "").addresses.map(&:address)
        }.flatten + [@messages_thread.account_email]).compact.uniq.to_json %>;
            return _.filter(possibleEmails, function(email) {
                return email.indexOf(query) > - 1;
            });
        };

        $scope.fetch = function() {
            $scope.loading = true;

            var query = _.map($scope.queryTags, function(tag) {
                return tag.text
            }).join("%20");

            var url = "<%= EmailServer::API_BASE_PATH %>/messages_threads?query=" + query + "&offset=" + $scope.offset + "&limit=" + $scope.limit;
                    $http({
                        method: "GET",
                        url: url,
                        headers: {
                            'Authorization': "<%= ENV['EMAIL_SERVER_API_KEY'] %>"
                        }
                    })
                    .success(function(e) {
                        $scope.messagesThreadsTotalCount = e.total_count;

                        var serverThreadidsUrlPart = _.map(e.data, function(serverThread) {
                            return "server_thread_ids[]=" + serverThread.id;
                        }).join("&");

                        $http.get("/messages_threads/search?" + serverThreadidsUrlPart).success(function(response) {
                            $scope.messagesThreads = response.data;
                            _.each($scope.messagesThreads, function(messagesThread) {
                                //console.log("HOHO", eventGetResponse.data);
                                messagesThread.received_at_formatted = moment(messagesThread.received_at).format("dddd D MMMM");

                                if(messagesThread.event_data.calendar_id) {
                                    messagesThread.event_data.date = $sce.trustAsHtml("Loading...");
                                    window.CommonHelpers.externalRequest({
                                        action: "get_event",
                                        email: messagesThread.account_email,
                                        calendar_login_username: messagesThread.event_data.calendar_login_username,
                                        event_id: messagesThread.event_data.event_id,
                                        event_url: messagesThread.event_data.event_url,
                                        calendar_id: messagesThread.event_data.calendar_id
                                    }, function(eventGetResponse) {
                                        var startDate = eventGetResponse.data.start.dateTime || eventGetResponse.data.start.date;
                                        var allDay = eventGetResponse.all_day;
//                                        if(!startDate) {
//                                            startDate = eventGetResponse.data.start.date;
//                                            allDay = true
//                                        }
                                        var endDate = eventGetResponse.data.end.dateTime || eventGetResponse.data.end.date;
                                        //if(!endDate) eventGetResponse.data.end.date;

                                        messagesThread.event_data.date = $sce.trustAsHtml(CommonHelpers.formatDateTimeRange(startDate, endDate, "en", messagesThread.computed_data.timezone, allDay));
                                        messagesThread.event_data.summary = eventGetResponse.data.summary;
                                        messagesThread.event_data.location = eventGetResponse.data.location;
                                        $scope.$apply();
                                    })
                                }
                            });
                            $scope.loading = false;
                        });
                    })
                    .error(function(e) {
                        $scope.loading = false;
                    });
        };

        $scope.navigationOffset = function() {
            if(!$scope.messagesThreadsTotalCount || $scope.messagesThreadsTotalCount == 0) {
                return "";
            }
            else {
                return ($scope.offset + 1) + " - " + Math.min($scope.messagesThreadsTotalCount, $scope.offset + $scope.limit) + " / ";
            }
        };

        $scope.mergeThread = function(messagesThread) {
            window.attemptMergeToServerThreadId(messagesThread.server_thread_id, messagesThread.id);
        };

        $scope.navigationPrevious = function() {
            if($scope.offset > 0) {
                $scope.offset = Math.max(0, $scope.offset - $scope.limit);
                $scope.fetch();
            }
        };

        $scope.navigationNext = function() {
            if($scope.offset + $scope.limit < $scope.messagesThreadsTotalCount) {
                $scope.offset = Math.min($scope.messagesThreadsTotalCount - $scope.limit, $scope.offset + $scope.limit);
                $scope.fetch();
            }
        };
        window.launchMergingFetch = function() {
            $scope.fetch();
        };
    });

    angular.element(document).ready(function () {
        angular.bootstrap(document.getElementById("merging-panel"),['mergingApp']);
    });
</script>

<div class="merging-panel" ng-controller="mergingPanelController" id="merging-panel">
  <div class="merging-search-bar">
    <!--<input ng-model="query"/>-->
    <tags-input ng-model="queryTags" replace-spaces-with-dashes="false">
      <auto-complete source="loadTags($query)" min-length="1" debounce-delay="0" selectFirstMatch="true"></auto-complete>
    </tags-input>
    <div class="search-button" ng-click="offset=0; fetch()">Search</div>
    <div class="merging-results-total-count-and-navigation">
      <span class="merging-results-total-count">{{ navigationOffset() }}{{ messagesThreadsTotalCount }} results</span>
      <div class="merging-results-navigation">
        <span class="merging-results-navigation-previous btn btn-xs btn-default" ng-click="navigationPrevious()"><</span>
        <span class="merging-results-navigation-next btn btn-xs btn-default" ng-click="navigationNext()">></span>
      </div>

    </div>
    <div class="merging-panel-spinner" ng-show="loading">Loading...</div>
  </div>


  <div class="threads-list">
    <div class="thread-item"
         ng-repeat="messagesThread in messagesThreads"
         ng-class="(currentThreadId == messagesThread.id)?'current':''">
      <div class="thread-subject-and-emails-count">
        <span class="thread-subject">{{ messagesThread.subject }}</span>
        <span class="thread-emails-count">({{ messagesThread.messages.length }} mails)</span>
        <span class="thread-date">{{ messagesThread.received_at_formatted }}</span>
      </div>
      <div class="thread-client-and-status">
        <span class="thread-client">{{ messagesThread.account.full_name }}</span>
        <span class="thread-status">{{ messagesThread.current_status }}</span>
      </div>
      <div class="thread-event" ng-show="messagesThread.event_data.date">
        <div class="thread-event-summary">{{ messagesThread.event_data.summary }}</div>
        <div class="thread-event-location">
          <span class="thread-event-location-icon"></span>
          <span class="thread-event-location-location">{{ messagesThread.event_data.location }}</span>
        </div>
        <div class="thread-event-date">
          <span class="thread-event-date-icon"></span>
          <span class="thread-event-date-date" ng-bind-html="messagesThread.event_data.date"></span>
        </div>
      </div>
      <div class="thread-nature" ng-hide="messagesThread.event_data.date">
        <span class="thread-nature" ng-show="messagesThread.event_data.appointment_nature">{{ messagesThread.event_data.appointment_nature }}</span>
      </div>
      <div class="thread-attendees">
        <span class="thread-attendees-icon"></span>
        <span class="thread-attendee" ng-repeat="attendee in messagesThread.computed_data.attendees | filter: {isPresent: true}">
          <span class="thread-attendee-usage-name">{{ attendee.usageName }}</span><span class="thread-attendee-email">{{ attendee.email }}</span>
        </span>
      </div>

      <div class="thread-action-buttons" ng-show="currentThreadId != messagesThread.id">
        <a target="_blank" href="/messages_threads/{{ messagesThread.id }}/preview" class="btn btn-primary thread-action-button-preview">Preview</a>
        <div class="btn btn-success thread-action-button-really-merge" ng-click="mergeThread(messagesThread)">Merge</div>
      </div>
    </div>
  </div>
</div>